(function ($) {
    function Laboratory() {
    }

    $.extend(Laboratory.prototype, {
        topo: new LabTopology(),
        event: new LabEvent(),
        menu: new LabMenu(),
        exp: new LabExport(),
        ui: new LabUI(),
        direct: new LabDirect(),
        itsm: new LabITSM()
    });
    function LabMenu() {
    }

    $.extend(LabMenu.prototype, {
        showContextMenu: function (pageX, pageY) {
            var menuData = $.ctxAdapter.menu();
            if (menuData.length === 0) {
                return
            }
            var spliceMenuCache = {}, spliceMenuIndex = [];
            for (var i = 0, len = menuData.length; i < len; i++) {
                if (menuData[i].id === "active") {
                    var _action = eval(menuData[i].action);
                    var _menu = _action.call();
                    spliceMenuCache[i] = _menu;
                    spliceMenuIndex.unshift(i)
                }
            }
            for (var i = 0, len = spliceMenuIndex.length; i < len; i++) {
                var cacheKey = parseInt(spliceMenuIndex[i]), cacheMnu = spliceMenuCache[cacheKey];
                menuData.splice(cacheKey, 1);
                if (cacheMnu != null && cacheMnu.length > 0) {
                    for (var j = 0, cLen = cacheMnu.length; j < cLen; j++) {
                        menuData.splice(cacheKey + j, 0, cacheMnu[j])
                    }
                }
            }
            $("#svgCanvas").ContextMenu({menu: menuData, mouseButton: "", horizAnimateName: "easeOutBack"});
            $("#svgCanvas").ContextMenu("show", pageX, pageY)
        },
        clearContextMenu: function (e) {
            if (e && e.target) {
                var $target = $(e.target);
                if ($target.is(".jqCtxMenu") || $target.parents(".jqCtxMenu:first").length) {
                } else {
                    $("#svgCanvas").ContextMenu("hide")
                }
            } else {
                $("#svgCanvas").ContextMenu("hide")
            }
        },
        activeUrl: function () {
            if (!$.lab.menu.testSingleSelected() || $.topology.contextObj == null) {
                return null
            }
            var ctxObj = $.topology.contextObj, puuid = 1, urlMenu = [], urlItem = null;
            if (ctxObj.option != null && typeof(ctxObj.option["related-view"]) !== "undefined") {
                var subView = $.topology.views[ctxObj.option["related-view"]];
                if (subView != null && typeof(subView) !== "undefined") {
                    urlItem = {};
                    urlItem.id = "3." + (puuid++);
                    urlItem.text = subView.name.length > 4 ? (subView.name.substr(0, 4) + "...") : subView.name;
                    urlItem.image = subView.type == "1" ? "../images/icon/topo-16.png" : "../images/icon/relation-16.png";
                    var _url = "main.html?type=" + subView.type + "&id=" + subView.id + "&layout=none&fill=1";
                    urlItem.action = "$.lab.direct.openUrl(" + _url + ",_blank," + subView.name + ")";
                    urlItem.separator = true;
                    urlMenu.push(urlItem)
                }
            }
            if (ctxObj.url != null && ctxObj.url.name.length > 0) {
                var _url = ctxObj.url;
                for (var i = 0, len = _url.name.length; i < len; i++) {
                    urlItem = {};
                    urlItem.id = "3." + (puuid++);
                    urlItem.text = _url.name[i].length > 4 ? (_url.name[i].substr(0, 4) + "...") : _url.name[i];
                    urlItem.image = _url.icon[i];
                    urlItem.action = "$.lab.direct.openUrl(" + _url.link[i] + ",_blank," + _url.name[i] + ")";
                    if (urlMenu.length === 0 && i === 0) {
                        urlItem.separator = true
                    }
                    urlMenu.push(urlItem)
                }
            }
            return urlMenu
        },
        testFullScreen: function () {
            var innerLayout = $.topology.ui.innerLayout, outerLayout = $.topology.ui.outerLayout;
            if ($.topology.status === "SHOW") {
                if (outerLayout.state["west"].isClosed && outerLayout.state["north"].isClosed && innerLayout.state["south"].isClosed) {
                    return true
                } else {
                    return false
                }
            } else {
                if ($.topology.status === "EDIT") {
                    if (innerLayout.state["west"].isClosed && outerLayout.state["north"].isClosed) {
                        return true
                    } else {
                        return false
                    }
                }
            }
        },
        testSingleSelected: function () {
            var _selector = $.topology.selector;
            if (_selector.size() === 1) {
                return true
            } else {
                return false
            }
        },
        testTelnet: function () {
            if ($.browser.msie) {
                return true
            } else {
                return false
            }
        },
        testSSH: function () {
            if ($.browser.msie) {
                return true
            } else {
                return false
            }
        },
        testSupportGpm: function () {
            if ($.lab.menu.testSingleSelected()) {
                var obj = $.topology.contextObj, supportObjectClass = ["3003", "3004", "3023", "3020", "3021", "3024", "3027", "3005", "3015", "3016", "3017", "3018", "3019", "3022", "3061", "3062", "3063", "3064", "3065", "3066", "3067", "3304", "3305", "3307"];
                if ($.inArray(obj.objectClass, supportObjectClass) !== -1) {
                    return true
                } else {
                    return false
                }
            } else {
                return false
            }
        },
        testSupportRpm: function () {
            if ($.lab.menu.testSingleSelected()) {
                var obj = $.topology.contextObj, supportObjectClass = ["3003", "3004", "3023", "3020", "3021", "3024", "3027", "3005", "3015", "3016", "3017", "3018", "3019", "3022", "3006"];
                if ($.inArray(obj.objectClass, supportObjectClass) !== -1) {
                    return true
                } else {
                    return false
                }
            } else {
                return false
            }
        },
        testEvent: function () {
            if ($.lab.menu.testActiveEvent() || $.lab.menu.testHistroyEvent()) {
                return true
            } else {
                return false
            }
        },
        testCopySelectedElement: function () {
            var selector = $.topology.selector;
            return selector.size() > 0 && (selector.symbols().length + selector.containers().length) == selector.size()
        },
        testPasteElement: function () {
            return $.topology.clipBoard && $.topology.clipBoard.length > 0
        },
        testActiveEvent: function () {
            var $topo = $.topology, $obj = $topo.contextObj;
            if ($topo.selector.size() === 1 && $obj != null && $obj.eventIds != null && $obj.eventIds.length > 0) {
                return true
            } else {
                return false
            }
        },
        testHistroyEvent: function () {
            var $topo = $.topology, $obj = $topo.contextObj;
            if ($topo.selector.size() === 1 && $obj.objectId != null && $.trim($obj.objectId) !== "" && $obj.objectId !== "-1") {
                return true
            } else {
                return false
            }
        },
        testSwitchConnectPC: function () {
            if ($.topology.selector.size() === 1 && $.topology.contextObj != null && $.topology.config["global"]["ipaddmgr"] == 1 && ($.topology.contextObj.objectClass == "3004" || $.topology.contextObj.objectClass == "3023")) {
                return true
            } else {
                return false
            }
        },
        testDrawLine: function () {
            var _selector = $.topology.selector, test = false;
            if (_selector.size() === 1 && _selector.symbols().length === 1) {
                test = true
            }
            if (_selector.size() === 2 && _selector.symbols().length === 2) {
                test = true
            }
            return test
        },
        testLayoutTreeVisible: function () {
            var o = $.topology.contextObj;
            return $.topology.isSymbol(o) || $.topology.isContainer(o)
        },
        testLayoutTreeAvailable: function () {
            var o = $.topology.contextObj || $.topology.selector.focus();
            return $.topology.isSymbol(o) || $.topology.isContainer(o)
        },
        testPasteTarget: function () {
            var target = $.topology.selector.focus();
            if (!target) {
                return false
            }
            if ($.topology.isView(target) || $.topology.isContainer(target)) {
                return true
            } else {
                return false
            }
        },
        testAlignlet: function () {
            var $selector = $.topology.selector, selectedCount = $selector.symbols().length + $selector.containers().length;
            if (selectedCount > 1) {
                return true
            } else {
                return false
            }
        },
        testDistributelet: function () {
            var $selector = $.topology.selector, selectedCount = $selector.symbols().length + $selector.containers().length;
            if (selectedCount > 2) {
                return true
            } else {
                return false
            }
        },
        testCanvasGridSupport: function () {
            return !!document.createElement("canvas").getContext
        },
        testPolyPoints: function () {
            var obj = $.topology.selector.focus();
            if (obj.points.length > 2) {
                if (!obj.parent) {
                    return true
                } else {
                    if (obj.parent.state !== 1) {
                        return true
                    } else {
                        return false
                    }
                }
            } else {
                return false
            }
        },
        testRelatedModel: function () {
            if ($.topology.view.type != 2) {
                return false
            }
            var _selector = $.topology.selector;
            if (_selector.size() === 1) {
                var target = $.topology.selector.focus();
                if (typeof target.option["modeltree-node"] !== "undefined" && target.option["modeltree-node"] != "-1") {
                    return true
                } else {
                    return false
                }
            } else {
                return false
            }
        },
        testSpeech: function () {
            return $.topology.config.global["speech_service"] === "1" && $.topology.view.option["speech"] && $.topology.view.option["speech"] === "1"
        },
        testHang: function () {
            return $.topology.ui.tooltip4hang.number() > 0
        }
    });
    function LabEvent() {
    }

    $.extend(LabEvent.prototype, {
        activeAlarm: function () {
            var obj = $.topology.contextObj, eventIds = null;
            if (obj && obj.eventIds && $.type(obj.eventIds) === "array" && obj.eventIds.length >= 1) {
                eventIds = obj.eventIds
            } else {
                $.jAlert({type: "warn", content: "不存在告警"});
                return
            }
            var _alarmTableObj = null, $content = $("<div/>").attr("id", "activeAlarmWindowContent" + obj.id).addClass("alarm-window"), adjustTable = function () {
                if (_alarmTableObj && _alarmTableObj.$alarmTable) {
                    var $window = this, timerName = "delay-timer", timer = $window.data(timerName);
                    if (timer) {
                        clearTimeout(timer);
                        $window.removeData(timerName)
                    }
                    $window.data(timerName, setTimeout(function () {
                        $window.removeData(timerName);
                        _alarmTableObj.$alarmTable.fnAdjustColumnSizing(false);
                        var height = $window.find(".table-mm-content").outerHeight();
                        if (height) {
                            $content.find(".dataTables_scrollBody").height(height - 85)
                        }
                        _alarmTableObj.$alarmTable.fnAdjustColumnSizing(false)
                    }, 50))
                }
            }, $msg = $.MsgWindow({
                WindowId: "activeAlarmWindow_" + obj.id,
                WindowTitle: "活动告警",
                WindowWidth: 870,
                WindowHeight: 360,
                WindowResizeMinWidth: 660,
                WindowResizeMinHeight: 240,
                WindowResizable: true,
                WindowMaximize: true,
                WindowMinimize: true,
                WindowDraggable: true,
                contentBorder: "none",
                contentPadding: "0px",
                containment: "html",
                showOverlay: false,
                WindowClosableByEsc: true,
                onWindowResize: adjustTable,
                afterWindowResize: adjustTable,
                afterWindowMaximize: adjustTable,
                afterWindowRegular: adjustTable,
                content: $content
            });
            _alarmTableObj = new $.topology.ui.AlarmTable.Active($content.attr("id"), {
                eventFilter: function (id) {
                    return $.inArray(id, eventIds) >= 0
                }, beforeCancelAlarm: function () {
                    $msg.css({overflow: "visible"}).find(".table-mm-content").css({overflow: "visible"})
                }, afterCancelAlarm: function () {
                    $msg.css({overflow: "hidden"})
                }
            }, {
                sScrollY: 272,
                aoColumns: [{"mData": "chk", sWidth: "40px"}, {
                    "mData": "gradeText",
                    sWidth: "80px"
                }, {"mData": "currentStatusValue", sWidth: "75px"}, {
                    "mData": "ftime",
                    sWidth: "120px"
                }, {"mData": "ltime"}, {
                    "mData": "oname", fnCreatedCell: function (nTd, sData) {
                        _alarmTableObj._lengthLimit(nTd, sData, 10)
                    }
                }, {"mData": "type"}, {
                    "mData": "title", fnCreatedCell: function (nTd, sData) {
                        _alarmTableObj._lengthLimit(nTd, sData, 15)
                    }
                }, {"mData": "astatusText", sWidth: "75px"}, {
                    "mData": "dsText",
                    sWidth: "75px"
                }, {"mData": "text"}, {"mData": "ackuser"}, {"mData": "acktime"}, {"mData": "ackmemo"}, {
                    "mData": "detail",
                    sWidth: "20px"
                }, {"mData": "alarmId"}]
            });
            setTimeout(function () {
                _alarmTableObj.reload()
            }, 750)
        },
        historyAlarm: function () {
            var obj = $.topology.contextObj;
            var _alarmTableObj = null, $content = $("<div/>").attr("id", "historyAlarmWindowContent" + obj.id).addClass("alarm-window"), adjustTable = function () {
                if (_alarmTableObj && _alarmTableObj.$alarmTable) {
                    var $window = this, timerName = "delay-timer", timer = $window.data(timerName);
                    if (timer) {
                        clearTimeout(timer);
                        $window.removeData(timerName)
                    }
                    $window.data(timerName, setTimeout(function () {
                        $window.removeData(timerName);
                        _alarmTableObj.$alarmTable.fnAdjustColumnSizing(bRedraw = false);
                        var height = $window.find(".table-mm-content").outerHeight();
                        if (height) {
                            $content.find(".dataTables_scrollBody").height(height - 85)
                        }
                        _alarmTableObj.$alarmTable.fnAdjustColumnSizing(bRedraw = false)
                    }, 50))
                }
            };
            $.MsgWindow({
                WindowId: "historyAlarmWindow_" + obj.id,
                WindowTitle: "历史告警",
                WindowWidth: 750,
                WindowHeight: 360,
                WindowResizeMinWidth: 660,
                WindowResizeMinHeight: 240,
                WindowResizable: true,
                WindowMaximize: true,
                WindowMinimize: true,
                WindowDraggable: true,
                contentBorder: "none",
                contentPadding: "0px",
                containment: "html",
                showOverlay: false,
                WindowClosableByEsc: true,
                onWindowResize: adjustTable,
                afterWindowResize: adjustTable,
                afterWindowMaximize: adjustTable,
                afterWindowRegular: adjustTable,
                content: $content
            });
            _alarmTableObj = new $.topology.ui.AlarmTable.History($content.attr("id"), {intId: obj.objectId})
        },
        speech: function () {
            var $topo = $.topology, $navMenu = $topo.ui.navMenu;
            if (typeof($topo.view.option["speech-status"]) === "undefined") {
                $topo.view.option["speech-status"] = "1"
            }
            if ($topo.view.option["speech-status"] === "1") {
                $.ajax({
                    url: $.project.path + "/topo/event/sstop.action",
                    type: "POST",
                    dataType: "json",
                    success: function (data, textStatus, XMLHttpRequest) {
                        if (data.success) {
                            var _data = data.data;
                            if (_data === "1") {
                                $navMenu.navmenu("setIcon", "1.0", "images/icon/sound-16.png");
                                $topo.view.option["speech-status"] = "0"
                            } else {
                                $.jAlert({type: "warn", content: "停止告警朗读失败"})
                            }
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        $.jAlert({type: "warn", content: $.converter.requestError(XMLHttpRequest, textStatus)})
                    }
                })
            } else {
                $.ajax({
                    url: $.project.path + "/topo/event/sstart.action",
                    type: "POST",
                    dataType: "json",
                    success: function (data, textStatus, XMLHttpRequest) {
                        if (data.success) {
                            var _data = data.data;
                            if (_data === "1") {
                                $navMenu.navmenu("setIcon", "1.0", "images/icon/sound_mute-16.png");
                                $topo.view.option["speech-status"] = "1"
                            } else {
                                $.jAlert({type: "warn", content: "开启告警朗读失败"})
                            }
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        $.jAlert({type: "warn", content: $.converter.requestError(XMLHttpRequest, textStatus)})
                    }
                })
            }
        }
    });
    function LabITSM() {
    }

    $.extend(LabITSM.prototype, {
        InfoTextShow: function () {
            var ctxObj = $.topology.contextObj,
                kpis = ctxObj && ctxObj.kpis,
                objectClass = ctxObj && ctxObj.objectClass,
                context = $.topology.config.context[objectClass],
                information = context && context["INFORMATION"];
                configs = $.topology.config.kpi[objectClass],
                     kpiNames = null,
                     cvrNames = null,
                     data = [];
                console.log(ctxObj);
            if (information) {
                kpiNames = information.kpiTexts.split(",");
                cvrNames = information.converters.split(",")
            }
            if (!kpis || !kpiNames) {
                $.jAlert({type: "warn", content: "不存在信息"});
                return
            }
            console.log(kpiNames);
            console.log(kpis);
            var $table = $("<table/>").addClass("pair-table"), /*$button = $("<input/>").attr("type", "button").val(" 关 闭 "),*/ $content = $("<div/>").addClass("detailInfo-text").append($("<div/>").addClass("body-text").append($table))/*.append($("<div/>").addClass("footer").append($button))*/;
            $.each(kpiNames, function (index, kpiName) {
                var val = kpis[kpiName], cvrName = cvrNames[index], cvrCfg = $.topology.ui.converterConfig[cvrName], cvr = cvrCfg ? $.converter[cvrCfg.func] : null, $parent = $("<td/>").addClass("value-field-text");
                $("<tr/>").addClass("label-field-tr").append($("<td/>").addClass("label-field-text").append(configs[kpiName].zhname + "：")).append($parent).appendTo($table);
                data.push({parent: $parent, value: val, kpiName: kpiName, converter: cvr})
            });
            var detailWindow = $.MsgWindow({
                WindowId: "nodeDetailInfoWindow_" + ctxObj.id,
                WindowTitle: ctxObj.name,
                WindowWidth: 246,
                WindowHeight: 160,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: true,
                WindowDraggable: true,
                contentBorder: "none",
                contentPadding: "0px",
                containment: "html",
                showOverlay: false,
                WindowClosableByEsc: true,
                content: $content
            });
            /*$button.click(function () {
                detailWindow.close()
            });*/
            $.each(data, function (index, kpiInfo) {
                var cvr = kpiInfo.converter, val = kpiInfo.value, $parent = kpiInfo.parent;
                if (val == null || val === "") {
                    $parent.html("")
                } else {
                    if ($.isFunction(cvr)) {
                        cvr.call($.converter, {value: val, unit: configs[kpiInfo.kpiName].unit}, kpiInfo.parent)
                    } else {
                        $parent.html(val)
                    }
                }
            })
        },

        //查看设备详情
        gotoSymbolDetail:function(){
            var ctxObj = $.topology.contextObj;
            var id=ctxObj.objectId; 
            var url = ctx+'/resource/resource/getInfo?id='+id;
            //转向网页的地址; 
            var name='';
           // 网页名称，可为空; 
            var iWidth=document.body.scrollWidth;
        // 弹出窗口的宽度; 
            var iHeight=document.body.scrollHeight;
        // 弹出窗口的高度; 
            window.open(url, name, 'height='  + iHeight + ',width=' + iWidth + ',status=no,toolbar=no,menubar=no,location=no,resizable=no,scrollbars=0,titlebar=no'); 
        },

        detailInfo: function () {
            var ctxObj = $.topology.contextObj,
                kpis = ctxObj && ctxObj.kpis,
                objectClass = ctxObj && ctxObj.objectClass,
                context = $.topology.config.context[objectClass],
                information = context && context["INFORMATION"];
                configs = $.topology.config.kpi[objectClass],
                    kpiNames = null,
                    cvrNames = null,
                    data = [];

            if (information) {
                kpiNames = information.kpis.split(",");
                cvrNames = information.converters.split(",")
            }


            // console.log(ctxObj);
            // console.log(kpis);
            // console.log(objectClass);
            // console.log(context);
            // console.log(information);
            // console.log(configs);
            // console.log(kpiNames);
            // console.log(cvrNames);

            if (!kpis || !kpiNames) {
                $.jAlert({type: "warn", content: "不存在设备信息"});
                return
            }
            var $table = $("<table/>").addClass("pair-table"), /*$button = $("<input/>").attr("type", "button").val(" 关 闭 "),*/ $content = $("<div/>").addClass("detailInfo").append($("<div/>").addClass("body").append($table))/*.append($("<div/>").addClass("footer").append($button))*/;
            $.each(kpiNames, function (index, kpiName) {
                var val = kpis[kpiName], cvrName = cvrNames[index], cvrCfg = $.topology.ui.converterConfig[cvrName], cvr = cvrCfg ? $.converter[cvrCfg.func] : null, $parent = $("<td/>").addClass("value-field");
                $("<tr/>").append($("<td/>").addClass("label-field").append(configs[kpiName].zhname)).append($parent).appendTo($table);
                data.push({parent: $parent, value: val, kpiName: kpiName, converter: cvr})
            });
            var detailWindow = $.MsgWindow({
                WindowId: "nodeDetailInfoWindow_" + ctxObj.id,
                WindowTitle: $.topology.isSymbol(ctxObj) ? "设备信息" : "链路信息",
                WindowWidth: 500,
                WindowHeight: 240,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: true,
                WindowDraggable: true,
                contentBorder: "none",
                contentPadding: "0px",
                containment: "html",
                showOverlay: false,
                WindowClosableByEsc: true,
                content: $content
            });
            /*$button.click(function () {
                detailWindow.close()
            });*/
            $.each(data, function (index, kpiInfo) {
                var cvr = kpiInfo.converter, val = kpiInfo.value, $parent = kpiInfo.parent;
                if (val == null || val === "") {
                    $parent.html("")
                } else {
                    if ($.isFunction(cvr)) {
                        cvr.call($.converter, {value: val, unit: configs[kpiInfo.kpiName].unit}, kpiInfo.parent)
                    } else {
                        $parent.html(val)
                    }
                }
            })
        },
        setLinkWeight: function () {
            var $topo = $.topology, $msg = null, $table = null, _html = null;
            $table = $("<table/>").addClass("pair-table");
            _html = "<tr><td class='label-field'>粗细变化</td>" + "<td class='value-field'><input id='weight_switch' type='checkbox' class='switch'></td></tr>";
            $table.append(_html);
            _html = "<tr><td class='label-field'>指标项</td>" + "<td class='value-field'><select id='weight_kpi' class='propsel'>" + "<option value='LinkOctet'>流量(KB)</option>" + "<option value='LinkRate'>速率(Kb/秒)</option>" + "<option value='LinkBwUsedPer'>带宽利用率(%)</option>" + "<option value='LinkInOctet'>入流量(KB)</option>" + "<option value='LinkOutOctet'>出流量(KB)</option>" + "<option value='LinkInRate'>入速率(Kb/秒)</option>" + "<option value='LinkOutRate'>出速率(Kb/秒)</option>" + "<option value='LinkInBwUsedPer'>入带宽利用率(%)</option>" + "<option value='LinkOutBwUsedPer'>出带宽利用率(%)</option>" + "</select></td></tr>";
            $table.append(_html);
            _html = "<tr><td class='label-field'>基线值</td>" + "<td class='value-field'><input id='weight_base' type='text' class='proptext'/></td></tr>";
            $table.append(_html);
            _html = "<tr><td class='label-field'>步长值</td>" + "<td class='value-field'><input id='weight_step' type='text' class='proptext'/></td></tr>";
            $table.append(_html);
            _html = "<tr><td class='label-field'>像限值</td>" + "<td class='value-field'><input id='weight_pixel' type='text' class='proptext'/></td></tr>";
            $table.append(_html);
            _html = "<tr><td></td><td style='padding-top:5px;'>" + "<input type='button' id='lw_submit' value='确定' />" + "<input type='button' id='lw_cancel' value='取消' style='margin-left: 10px;'/></td></tr>";
            $table.append(_html);
            $msg = $.MsgWindow({
                WindowId: "linkweight",
                WindowTitle: "链路粗细变化设置",
                WindowWidth: 400,
                WindowHeight: "auto",
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowDraggable: true,
                contentBorder: "none",
                contentPadding: "1px",
                showOverlay: false,
                content: $table
            });
            $("#weight_switch").iphoneStyle({
                onChange: function (chk, checked) {
                    if (checked) {
                        $("#weight_kpi").removeAttr("disabled");
                        $("#weight_base").removeAttr("disabled");
                        $("#weight_step").removeAttr("disabled");
                        $("#weight_pixel").removeAttr("disabled")
                    } else {
                        $("#weight_kpi").attr("disabled");
                        $("#weight_base").attr("disabled");
                        $("#weight_step").attr("disabled");
                        $("#weight_pixel").attr("disabled")
                    }
                }
            });
            $("#weight_switch").attr("checked", $topo.view.option["link-weight-switch"] && $topo.view.option["link-weight-switch"] === "1").iphoneStyle("refresh");
            $("#weight_kpi").val($topo.view.option["link-weight-kpi"] || "LinkOctet");
            $("#weight_base").val($topo.view.option["link-weight-base"] || "0");
            $("#weight_step").val($topo.view.option["link-weight-step"] || "");
            $("#weight_pixel").val($topo.view.option["link-weight-pixel"] || "10");
            $("#weight_base").addClass("jvalidate").attr({
                validtype: "required,number",
                requiredmsg: "必须填写基线值.",
                numbermsg: "基线值必须为数字."
            });
            $("#weight_step").addClass("jvalidate").attr({
                validtype: "required,number",
                requiredmsg: "必须填写步长值.",
                numbermsg: "步长值必须为数字."
            });
            $("#weight_pixel").addClass("jvalidate").attr({
                validtype: "required,number",
                requiredmsg: "必须填写像限值.",
                numbermsg: "像限值必须为数字."
            });
            $table.jvalidate();
            $("#lw_submit").unbind().click(function () {
                if (!$table.valid()) {
                    return
                }
                var $view = $.topology.view;
                $view.option["link-weight-switch"] = $("#weight_switch").prop("checked") ? "1" : "0";
                $view.option["link-weight-kpi"] = $("#weight_kpi").val();
                $view.option["link-weight-base"] = $("#weight_base").val();
                $view.option["link-weight-step"] = $("#weight_step").val();
                $view.option["link-weight-pixel"] = $("#weight_pixel").val();
                $.topology.changed.view = true;
                $msg.close()
            });
            $("#lw_cancel").unbind().click(function () {
                $msg.close()
            });
            setTimeout(function () {
                $msg.find(".table-mm-content").css({overflow: "visible"})
            }, 1500)
        },
        linkWeight: function () {
            var isChange = $.topology.view.option && $.topology.view.option["link-weight-switch"] && $.topology.view.option["link-weight-switch"] === "1" ? true : false, isIE9 = $.browser.msie && $.browser.version == 9;
            if (!isChange) {
                return
            }
            var $topo = $.topology, $ge = $topo.graphEngine, cfgKpi = $topo.view.option["link-weight-kpi"], cfgBase = Number($topo.view.option["link-weight-base"]), cfgStep = Number($topo.view.option["link-weight-step"]), cfgPixel = Number($topo.view.option["link-weight-pixel"]), cfgTrans = {
                    "LinkOctet": 1024,
                    "LinkInOctet": 1024,
                    "LinkOutOctet": 1024,
                    "LinkRate": 1000,
                    "LinkInRate": 1000,
                    "LinkOutRate": 1000
                }[cfgKpi] || 1, $lines = $topo.shapes.lines, $lineseters = $topo.shapes.lineseters, changeWeightLines = [];
            for (var id in $lines) {
                var line = $lines[id];
                if (line.kpis === null || typeof(line.kpis[cfgKpi]) == "undefined") {
                    continue
                }
                changeWeightLines.push(line)
            }
            for (var id in $lineseters) {
                var lineseter = $lineseters[id];
                if (lineseter.kpis === null || typeof(lineseter.kpis[cfgKpi]) == "undefined") {
                    continue
                }
                changeWeightLines.push(lineseter)
            }
            for (var i = 0, len = changeWeightLines.length; i < len; i++) {
                var l = changeWeightLines[i], value = Number(l.kpis[cfgKpi]), _weight = parseInt((value - cfgBase * cfgTrans) / (cfgStep * cfgTrans));
                if (_weight < parseInt($ge.options.line["weight"])) {
                    _weight = $ge.options.line["weight"]
                } else {
                    if (_weight > Number(cfgPixel)) {
                        _weight = parseInt(cfgPixel)
                    }
                }
                l.style["weight"] = _weight;
                var isLine = $topo.isLine(l);
                if (isLine) {
                    $ge.line(l)
                } else {
                    $ge.lineseter(l)
                }
                if (isIE9 && l.kpis["EventLevel"]) {
                    var _render = l.alarm && l.alarm.render ? l.alarm.render : "matrix";
                    if (_render === "matrix") {
                        $ge.eventColorRender4IE9(l.id, (isLine ? "lines" : "lineseters"), l.kpis["EventLevel"])
                    } else {
                        $ge.eventAnimationRender4IE9(l.id, (isLine ? "lines" : "lineseters"), l.kpis["EventLevel"])
                    }
                }
            }
        },
        hangInfo: function () {
            var $table = $("<table/>").addClass("pair-table"), $ok = $("<input/>").attr("type", "button").val(" 确 定 "), $cancel = $("<input/>").css("margin-left", "20px").attr("type", "button").val(" 取 消 "), $content = $("<div/>").addClass("hangInfo").append($("<div/>").addClass("body").append($table)).append($("<div/>").addClass("footer").append($ok).append($cancel));
            switchs = [];
            $.each(["显示节点指标", "显示连线指标", "显示指标名称", "免遮挡处理"], function (i, zh) {
                var $tr = $("<tr/>").append($("<td/>").addClass("label-field").append(zh)).appendTo($table), $chk = $("<input/>").attr({type: "checkbox"}).addClass("switch").appendTo($("<td/>").addClass("value-field").appendTo($tr));
                switchs.push($chk)
            });
            var $tr = $("<tr/>").append($("<td/>").addClass("label-field").append("节点指标位置")).appendTo($table), $td = $("<td/>").addClass("value-field").appendTo($tr), $select = $("<select style='width:80px;'>" + "<option value='1'>右</option>" + "<option value='2'>下</option>" + "<option value='3'>左</option>" + "<option value='4'>上</option>" + "</select>").appendTo($td);
            var recoverFn = function () {
                var isNodeHang = $.topology.view.option["node-hang-display"] == 1, isLineHang = $.topology.view.option["line-hang-display"] == 1, isShowLabel = $.topology.view.option["hang-name-display"] == 1, isNodeAdapter = $.topology.view.option["node-hang-adapter"] == 1, method = null;
                method = isNodeHang ? "open" : "close";
                $.topology.ui.tooltip4hang[method](1);
                method = isLineHang ? "open" : "close";
                $.topology.ui.tooltip4hang[method](2);
                method = isShowLabel ? "showLabel" : "hideLabel";
                $.topology.ui.tooltip4hang[method]();
                $.topology.ui.tooltip4hang.setNodeAdapter(isNodeAdapter, !isNodeAdapter);
                if (!isNodeAdapter) {
                    $.topology.ui.tooltip4hang.setNodeHangPos($select.val())
                }
            }, hangWindow = $.MsgWindow({
                WindowId: "hangInfoWindow",
                WindowTitle: "指标挂载",
                WindowWidth: 380,
                WindowHeight: 175,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: true,
                WindowDraggable: true,
                contentBorder: "none",
                contentPadding: "0px",
                containment: "html",
                showOverlay: false,
                WindowClosableByEsc: true,
                content: $content,
                beforeWindowClose: recoverFn
            });
            $ok.click(function () {
                var $btn = $(this);
                $btn.prop("disabled", true);
                $.topology.view.option["node-hang-display"] = $.topology.ui.tooltip4hang.isOpen(1) ? 1 : 0;
                $.topology.view.option["line-hang-display"] = $.topology.ui.tooltip4hang.isOpen(2) ? 1 : 0;
                $.topology.view.option["hang-name-display"] = $.topology.ui.tooltip4hang.isShowLabel() ? 1 : 0;
                var nodeHangAdapter = $.topology.view.option["node-hang-adapter"] = $.topology.ui.tooltip4hang.isNodeAdapter() ? 1 : 0;
                if (nodeHangAdapter) {
                    delete $.topology.view.option["node-hang-position"]
                } else {
                    $.topology.view.option["node-hang-position"] = $.topology.ui.tooltip4hang.getNodeHangPos()
                }
                hangWindow.close(recoverFn)
            });
            $cancel.click(function () {
                hangWindow.close(recoverFn)
            });
            $(switchs[0]).iphoneStyle({
                onChange: function (chk, checked) {
                    var method = checked ? "open" : "close";
                    $.topology.ui.tooltip4hang[method](1)
                }
            });
            $(switchs[1]).iphoneStyle({
                onChange: function (chk, checked) {
                    var method = checked ? "open" : "close";
                    $.topology.ui.tooltip4hang[method](2)
                }
            });
            $(switchs[2]).iphoneStyle({
                onChange: function (chk, checked) {
                    var method = checked ? "showLabel" : "hideLabel";
                    $.topology.ui.tooltip4hang[method]()
                }
            });
            $(switchs[3]).iphoneStyle({
                onChange: function (chk, checked) {
                    var method = checked ? "hide" : "show";
                    $tr[method]();
                    $.topology.ui.tooltip4hang.setNodeAdapter(checked);
                    if (!checked) {
                        $.topology.ui.tooltip4hang.setNodeHangPos($select.val())
                    }
                }
            });
            $select.change(function () {
                $.topology.ui.tooltip4hang.setNodeHangPos($(this).val())
            });
            switchs[0].prop("checked", $.topology.view.option["node-hang-display"] == 1);
            switchs[1].prop("checked", $.topology.view.option["line-hang-display"] == 1);
            switchs[2].prop("checked", $.topology.view.option["hang-name-display"] == 1);
            switchs[3].prop("checked", $.topology.view.option["node-hang-adapter"] == 1);
            if (switchs[3].prop("checked")) {
                $tr.hide()
            } else {
                $select.val($.topology.view.option["node-hang-position"] || 1)
            }
            setTimeout(function () {
                $.each(switchs, function () {
                    $(this).iphoneStyle("refresh")
                })
            }, 500)
        }
    });
    function LabExport() {
        this.$downloadWindow = null
    }

    $.extend(LabExport.prototype, {
        exportJpg: function () {
            $.lab.exp._export($.topology.graphEngine.code(), "JPG", false)
        }, exportPng: function () {
            $.lab.exp._export($.topology.graphEngine.code(), "PNG", false)
        }, exportPdf: function () {
            $.lab.exp._export($.topology.graphEngine.code(), "PDF", false)
        }, exportThumb: function () {
            $.lab.exp._export($.topology.graphEngine.code(), "PNG", true)
        }, svgXml: function () {
            $.MsgWindow({
                WindowId: "xmlWindow",
                WindowTitle: "图形脚本",
                WindowWidth: 580,
                WindowHeight: 432,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                contentBorder: "none",
                contentBackground: "#fff",
                showOverlay: false,
                content: $("<div/>").attr("id", "xmlWidget")
            });
            $("#xmlWidget").empty().append($("<div />").attr("id", "codeContainer").text($.topology.graphEngine.code())).append($("<div style='text-align:center;padding:8px 0 0 0;'>" + "<input id='selectBtn' type='button' value=' 全 选 ' />&nbsp;&nbsp;" + "<input id='closeBtn' type='button' class='cancel_button' value=' 关 闭 ' />" + "</div>"));
            $("#selectBtn").unbind().click(function () {
                var elem = $("#codeContainer")[0];
                if (document.body.createTextRange) {
                    var range = document.body.createTextRange();
                    range.moveToElementText(elem);
                    range.moveEnd("character", 0);
                    range.moveStart("character", 0);
                    range.select()
                } else {
                    if (window.getSelection) {
                        var selection = window.getSelection(), range = document.createRange();
                        range.selectNodeContents(elem);
                        selection.removeAllRanges();
                        selection.addRange(range)
                    }
                }
            });
            $("#closeBtn").unbind().click(function () {
                window.$(".table-mm-container:first").siblings(".buttons").find(".win-close-btn").trigger("click")
            })
        }, _export: function (code, format, isThumb) {
            $.lab.exp.$downloadWindow = null;
            if (!isThumb) {
                $.lab.exp.$downloadWindow = $.MsgWindow({
                    WindowId: "loading",
                    WindowTitle: "",
                    WindowWidth: 220,
                    WindowHeight: 90,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosable: false,
                    WindowDraggable: false,
                    contentBackground: "#fff",
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
                });
                $("#load_infor").html("请等待，正在为您导出拓扑图...");
                $.ajax({
                    url: $.project.path + "/topo/export.action",
                    type: "POST",
                    data: {code: code, format: format},
                    dataType: "json",
                    success: function (data, textStatus, XMLHttpRequest) {
                        if (data.success) {
                            $("#load_container").empty().append($("<table width='100%'><tr><td class='success-content-frame'>" + "<div class='success-content'>拓扑图导出成功！&nbsp;" + "<a href='images/export/" + data.data + "' target='_blank' " + "onclick='javascript:$.lab.exp.$downloadWindow.close();'>" + "下载或打开</a></div></td></tr><tr><td class='btn-content'>" + "<input type='button' value=' 取  消 ' onclick='" + "javascript:$.lab.exp.$downloadWindow.close();'>" + "</td></tr></table>"))
                        } else {
                            $.lab.exp.$downloadWindow.close();
                            $.jAlert({
                                type: "warn",
                                content: "系统检测到您目前绘制的拓扑图可能" + "存在不易检查的图形错误，建议您联系系统" + "维护人员，并提供日志以便分析隐含的图形" + "错误！"
                            })
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        $.lab.exp.$downloadWindow.close();
                        $.jAlert({
                            type: "error",
                            title: "错误",
                            content: $.converter.requestError(XMLHttpRequest, textStatus)
                        })
                    }
                })
            } else {
                //生成缩略图(保存已有的变化，将返回的图片保存本地，viewId作为名称)
                //console.log(code);
                $.ajax({
                    url: ctx + "/topoview/topoView/exportPng",
                    type: "POST",
                    data: {code: code, id: $.topology.view.id},
                    dataType: "json",
                    success: function (data, textStatus, XMLHttpRequest) {
                        if (data.msg =='error') {
                            $.jAlert({
                                type: "warn",
                                content: "系统检测到您目前绘制的拓扑图可能" + "存在不易检查的图形错误，建议您联系系统" + "维护人员，并提供日志以便分析隐含的图形" + "错误！"
                            })
                        }
                    }
                })
            }
        }
    });

    function LabDirect() {
    }

    $.extend(LabDirect.prototype, {
        gotoSys: function (_window, page, param) {
            var url = page + "?";
            for (var i in param) {
                url += i + "=" + param[i] + "&"
            }
            (_window ? _window : window).location = url.substr(0, url.length - 1)
            console.log(url.substr(0, url.length - 1));
        }, openUrl: function (url, target, title) {
            if (!url) {
                $.jAlert({type: "warn", content: "没有可以打开的链接"});
                return
            }
            var isMsgWin = $.topology.config.global["popup_window"] === "0";
            if (isMsgWin) {
                if ((target || "_blank") === "_blank") {
                    $.MsgWindow({
                        WindowId: "urlDialog",
                        WindowAdaptive: true,
                        contentBackground: "transparent",
                        contentBorder: "none",
                        WindowTitle: (title || "新窗口"),
                        containment: "html",
                        content: "<iframe src='" + url + "' width='100%' height='99%' style='border: 0px;' frameborder='0'></iframe>",
                        WindowWidth: 1024,
                        WindowHeight: 768
                    })
                } else {
                }
            } else {
                $.lab.direct.popupWindow(url, title || "新窗口", {
                    "width": 1024,
                    "height": 768,
                    "location": "yes",
                    "menubar": "no",
                    "resizable": "yes",
                    "scrollbars": "yes",
                    "status": "no",
                    "titlebar": "no",
                    "toolbar": "no"
                })
            }
        }, openMainLink: function (element) {
            if (element.option != null && typeof(element.option["related-view"]) !== "undefined") {
                var subView = $.topology.views[element.option["related-view"]];
                if (subView != null && typeof(subView) !== "undefined") {
                    var _url = "main.html?type=" + subView.type + "&id=" + subView.id + "&layout=none&fill=1";
                    $.lab.direct.openUrl(_url, "_blank", subView.name)
                }
            } else {
                if (element.url != null && element.url.name.length > 0) {
                    $.lab.direct.openUrl(element.url.link[0], "_blank", element.url.name[0])
                }
            }
        }, popupWindow: function (url, title, options) {
            var _options = {
                "width": 800,
                "height": 600,
                "location": "yes",
                "menubar": "no",
                "resizable": "yes",
                "scrollbars": "yes",
                "status": "no",
                "titlebar": "no",
                "toolbar": "no"
            };
            if (options !== null && $.isPlainObject(options)) {
                _options = $.extend(_options, options)
            }
            _options.left = (screen.width - _options.width) / 2;
            _options.top = (screen.height - _options.height) / 2;
            title = title && title.replace(/[ -/:-@\[-`{-~]/g, "_");
            window.open(url, title, "width=" + _options.width + ",height=" + _options.height + ",left=" + _options.left + ",top=" + _options.top + ",status=" + _options.status + ",location=" + _options.location + ",menubar=" + _options.menubar + ",resizable=" + _options.resizable + ",scrollbars=" + _options.scrollbars + ",titlebar=" + _options.titlebar + ",toolbar=" + _options.toolbar)
        },returnTopoList:function(){
            window.location.href=ctx +"/topoIndex";
        }, addView: function () {
            /*if ($.topology.permission != 3 && $.topology.permission != 4) {
                return
            }
            var type = $.string.queryParams(window.location.search).type;
             var windowWidth = 610, windowHeight = 492;
            if (type == 2) {
                windowHeight = 510
            }*/
            var windowWidth = 420, windowHeight = 260;
            var type = 1;
            //     $.MsgWindow({
            //     WindowId: "addtopo",
            //     WindowTitle: ($.topology.config.global["topos"][type].label || "拓扑") + "添加",
            //     WindowWidth: windowWidth,
            //     WindowHeight: windowHeight,
            //     WindowResizable: false,
            //     WindowMaximize: false,
            //     WindowMinimize: false,
            //     WindowDraggable: false,
            //     contentBorder: "none",
            //     containment: "html",
            //     showOverlay: true,
            //     content: '<iframe src="' + ctx + '/addTopo" width="100%" height="99%" style="border: 0px;" frameborder="0"></iframe>'
            // })

            var addTopoView = $.MsgWindow({
                WindowId: "addTopo",
                WindowTitle: ($.topology.config.global["topos"][type].label || "拓扑") + "添加",
                WindowWidth: 360,
                WindowHeight: 140,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                contentBorder: "none",
                showOverlay: true,
                content: $("<div/>").attr("id", "addTopoContent")
            });
            $("#addTopoContent").empty().append($("<div/>").attr("id", "addConditionContent")).append($("<div style='text-align:center;padding:8px 0 0 0;'>" + "<input id='selectElemtSubmit' type='button' value=' 确 定 ' />&nbsp;&nbsp;" + "<input id='selectElemtCancel' type='button' value=' 取 消 ' />" + "</div>"));
            var addTopoHtml = [];
            addTopoHtml.push('<div class="importSymbol-item" value="1" style="margin:20px;line-height: 32px;">拓扑图名称：<input id="topoName" maxlength="30" name="topoName" type="text" style="width:206px;height: 32px;line-height: 32px;"/></div>');
            addTopoHtml.push('<div class="importSymbol-item" value="2" style="margin:10px 20px 30px;line-height: 32px;display: none;">拓扑图类型：<select id="topoType" style="width:206px;height: 32px;line-height: 32px;display: none;" ><option value="1">网络拓扑图</option></select></div>');
            $("#addConditionContent").append(addTopoHtml.join(""));





            $("#selectElemtCancel").click(function () {
                addTopoView.close()
            });
            //确定提交
            $("#selectElemtSubmit").click(function () {
               // console.log($.topology.views);
                var arr = new  Array();
                var topoName = document.getElementById("topoName").value;
                for (i=0;i<testData.views.length;i++){
                    arr.push(testData.views[i]);//当前的所有视图Views
                }
                $.ajax({
                        type : 'POST',
                        url :  ctx+"/topoview/topoView/topoResouceSave",
                        data:{name:topoName,type:"1"},
                        timeout:3*1000,    //超时时间 10s
                        success : function(result) {
                           // console.log(result);
                            if(result.success){
                                var data = result.body.data;
                                arr.push({
                                    "id": data.id,
                                    "name": data.name,
                                    "descr": "",
                                    "type": 1,
                                    "timestamp": data.timeStamp,
                                    "isInstance": true,
                                    "isCache": true,
                                    "isHidden": false,
                                    "style": "background-color:#fff;width:1366;height:768;",
                                    "config": "",
                                    "options": "",
                                    "parentViewId": -1,
                                    "orderCode": 2,
                                    "relSymbolId": -1
                                });
                                $.topology.views = arr;
                                //给新增加的TopoView增加子视图的symbol和lines和view
                                testData.view[data.id] = {
                                    "symbols": [],
                                    "lines": [],
                                    "view": {
                                        "id": data.id,
                                        "name": data.name,
                                        "descr": "",
                                        "type": 1,
                                        "timestamp": data.timeStamp,
                                        "isInstance": true,
                                        "isCache": true,
                                        "isHidden": false,
                                        "style": "background-color:#fff;width:1366;height:768;",
                                        "config": "",
                                        "options": "",
                                        "parentViewId": -1,
                                        "orderCode": 2,
                                        "relSymbolId": -1
                                    }
                                };
                               // console.log(testData.view);
                                var _views = getViewsByTypeAndHidden(1, false);
                                //刷新界面
                                if (!$.svg._support) {
                                    addTopoView.close();
                                    if ($.browser.msie) {
                                        $.jAlert({
                                            type: "warn",
                                            content: "您目前使用的ie浏览器无法正常浏览图形！" + '请您<a href="tools/SVGView.exe">下载</a>并安装插件。'
                                        })
                                    } else {
                                        $.jAlert({type: "warn", content: "您目前使用的浏览器并不是标准内核，不支持图形显示！" + "建议您使用ie、chrome或firefox等主流浏览器。"})
                                    }
                                } else{
                                    // reloadNavTree(_views);
                                    window.location.reload();
                                    addTopoView.close();
                                }
                            }else{
                                $.jAlert({type: "warn", content: result.msg});
                            }

                        },
                        error:function(){
                            $.jAlert({type: "warn", content: "请求失败"})
                        },
                        complete:function(XMLHttpRequest,status){
                            if(status=='timeout'){
                                $.jAlert({type: "warn", content: "请求超时"})
                            }
                        }
                    });




            //     arr.push({
            //         "id": 654,
            //         "name": topoName,
            //         "descr": "",
            //         "type": 1,
            //         "timestamp": 201602021420036,
            //         "isInstance": true,
            //         "isCache": true,
            //         "isHidden": false,
            //         "style": "",
            //         "config": "",
            //         "options": "",
            //         "parentViewId": -1,
            //         "orderCode": 2,
            //         "relSymbolId": -1
            // });

          });

            function getViewsByTypeAndHidden(type, hidden) {
                var _views = [], datas = $.topology.views;
                for (var id in datas) {
                    if (type == datas[id].type && hidden == datas[id].isHidden) {
                        _views.push(datas[id])
                    }
                }
                return _views.sort(function (a, b) {
                    return a.name.localeCompare(b.name)
                }).sort(function (a, b) {
                    return (parseInt(a.orderCode) - parseInt(b.orderCode))
                })
            }
            function reloadNavTree(viewData) {
                var treeId = "navZTree", zTreeStore = $("#" + treeId).data("zTreeStore"), attrHandle = function (arr) {
                    $.each(arr, function () {
                        this.title = "";
                        this.nodeType = this.iconSkin = "view"
                    });
                    return arr
                }, success = reloadZTree(treeId, attrHandle(viewData), null, "parentViewId");
                if (success) {
                    zTreeStore.viewNodes = {};
                    $.each(viewData, function () {
                        zTreeStore.viewNodes[this.id] = this
                    })
                } else {
                    zTreeStore.viewNodes = null
                }
            }
            function reloadZTree(treeId, data, idKey, pIdKey) {
                idKey = idKey || "id";
                pIdKey = pIdKey || "pId";
                var zTreeObj = $.fn.zTree.getZTreeObj(treeId), children = zTreeObj.getNodes(), convertToTreeNode = function (arr) {
                    var i, o, rootIds = [], mounted = {}, root = [], other = [], getObjectById = function (id) {
                        for (var i = 0; i < arr.length; i++) {
                            if (arr[i][idKey] == id) {
                                return arr[i]
                            }
                        }
                        return null
                    }, mount = function (other) {
                        var i, parent, o, remaining = [];
                        for (i = 0; i < other.length;
                             i++) {
                            o = other[i];
                            parent = mounted[o[pIdKey]];
                            if (parent) {
                                if (!parent.children) {
                                    parent.children = []
                                }
                                parent.children.push(o);
                                mounted[o[idKey]] = o
                            } else {
                                remaining.push(o)
                            }
                        }
                        if (remaining.length) {
                            arguments.callee(remaining)
                        }
                    };
                    for (i = 0; i < arr.length; i++) {
                        o = arr[i];
                        if (($.inArray(o[pIdKey], rootIds) < 0) && !getObjectById(o[pIdKey])) {
                            rootIds.push(o[pIdKey])
                        }
                    }
                    for (i = 0; i < arr.length; i++) {
                        o = arr[i];
                        if ($.inArray(o[pIdKey], rootIds) < 0) {
                            other.push(o)
                        } else {
                            root.push(o);
                            mounted[o[idKey]] = o
                        }
                    }
                    mount(other);
                    return root
                };
                if (children && children.length > 0) {
                    for (var i = children.length - 1; i >= 0; i--) {
                        zTreeObj.removeNode(children[i])
                    }
                }
                if (data) {
                    zTreeObj.addNodes(null, convertToTreeNode(data))
                }
                return true
            }

        },
        gotoMain: function () {
           $.lab.direct.gotoSys(null, ctx +"/topo", {type: $.topology.view.type, id: $.topology.view.id})
        }, gotoEdit: function () {
            $.lab.direct.gotoSys(null, ctx +"/topoEdit", {type: $.topology.view.type, id: $.topology.view.id})
        }, exit: function () {
            window.opener = null;
            window.open("", "_self", "");
            window.close()
        }, addLink: function (line, srcObjectId, dstObjectId) {
            if (!srcObjectId || !dstObjectId) {
                return
            }
            var url = $.project.path + "/dalconf/loadAddLinkNode.action?srcIntId=" + srcObjectId + "&destIntId=" + dstObjectId;
            var addLinkDialog = $.MsgWindow({
                WindowId: "addLinkDialog",
                WindowTitle: "添加链路",
                WindowWidth: 500,
                WindowHeight: 400,
                WindowMinWidth: 300,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowResizable: true,
                WindowDraggable: true,
                contentBorder: "none",
                containment: "html",
                showOverlay: true,
                content: '<iframe id="addLinkIframe" src="' + url + '" width="100%" height="99%" style="border: 0px;" frameborder="0"></iframe>'
            });
            var $msgWindow = null;

            function onAddLinkSubmit() {
                $msgWindow = $.MsgWindow({
                    WindowId: "addLinkLoding",
                    ParentWindowId: "addLinkDialog",
                    WindowTitle: "增加链路",
                    WindowWidth: 280,
                    WindowHeight: 80,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosable: false,
                    WindowDraggable: false,
                    contentBackground: "#ffffff",
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
                });
                $("#load_infor").html("请等待，正在增加链路...")
            }

            function onAddLinkSuccess(linkData) {
                if ($msgWindow) {
                    $("#load_infor").html("增加链路成功, 正在关联链路...");
                    if (linkData) {
                        $.lab.itsm.findLink(linkData, {
                            success: function (data) {
                                line.objectId = data["int_id"];
                                line.objectClass = data["object_class"];
                                line.change();
                                $($.topology).triggerHandler("linkElement", line);
                                $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>增加并关联链路成功！" + "</div></td></tr></table>"));
                                setTimeout(function () {
                                    addLinkDialog.close();
                                    $msgWindow.close()
                                }, 1000)
                            }, error: function (XMLHttpRequest, textStatus, errorThrown) {
                                $("#load_container").empty().append($("<table><tr><td class='error-content-frame'>" + "<div class='error-content'>关联链路失败！" + "</div></td></tr></table>"))
                            }
                        })
                    } else {
                        $("#load_container").empty().append($("<table><tr><td class='error-content-frame'>" + "<div class='error-content'>关联链路失败！" + "</div></td></tr></table>"))
                    }
                }
            }

            function onAddLinkError() {
                if ($msgWindow) {
                    $msgWindow.close()
                }
                $.jAlert({
                    type: "error",
                    title: "增加链路",
                    showOverlay: true,
                    WindowWidth: 280,
                    ParentWindowId: "addLinkDialog",
                    content: "操作失败，请重试！"
                })
            }

            function onAddLinkExists() {
                if ($msgWindow) {
                    $msgWindow.close()
                }
                $.jAlert({
                    type: "warn",
                    title: "增加链路",
                    showOverlay: true,
                    WindowWidth: 280,
                    ParentWindowId: "addLinkDialog",
                    content: "此链路已经存在！"
                })
            }

            var addLinkIframeWindow = document.getElementById("addLinkIframe").contentWindow;
            $(addLinkIframeWindow).on("load", function () {
                addLinkIframeWindow.onAddLinkSubmit = onAddLinkSubmit;
                addLinkIframeWindow.onAddLinkSuccess = onAddLinkSuccess;
                addLinkIframeWindow.onAddLinkError = onAddLinkError;
                addLinkIframeWindow.onAddLinkExists = onAddLinkExists
            })
        }, modifyLink: function (line, id) {
            if (!id) {
                return
            }
            var url = $.project.path + "/dalconf/loadEditLinkNode.action?id=" + id;
            var modifyLinkDialog = $.MsgWindow({
                WindowId: "modifyLinkDialog",
                WindowTitle: "修改链路",
                WindowWidth: 500,
                WindowHeight: 400,
                WindowMinWidth: 300,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowResizable: true,
                WindowDraggable: true,
                contentBorder: "none",
                containment: "html",
                showOverlay: true,
                content: '<iframe id="modifyLinkIframe" src="' + url + '" width="100%" height="99%" style="border: 0px;" frameborder="0"></iframe>'
            });
            var $msgWindow = null;

            function onEditLinkSubmit() {
                $msgWindow = $.MsgWindow({
                    WindowId: "modifyLinkLoding",
                    ParentWindowId: "modifyLinkDialog",
                    WindowTitle: "修改链路",
                    WindowWidth: 280,
                    WindowHeight: 80,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosable: false,
                    WindowDraggable: false,
                    contentBackground: "#ffffff",
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
                });
                $("#load_infor").html("请等待，正在修改链路...")
            }

            function onEditLinkSuccess() {
                if ($msgWindow) {
                    $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>修改链路成功！" + "</div></td></tr></table>"));
                    setTimeout(function () {
                        modifyLinkDialog.close();
                        $msgWindow.close()
                    }, 1000)
                }
            }

            function onEditLinkError() {
                if ($msgWindow) {
                    $msgWindow.close()
                }
                $.jAlert({
                    type: "error",
                    title: "修改链路",
                    showOverlay: true,
                    WindowWidth: 280,
                    ParentWindowId: "modifyLinkDialog",
                    content: "操作失败，请重试！"
                })
            }

            function onEditLinkExists() {
                if ($msgWindow) {
                    $msgWindow.close()
                }
                $.jAlert({
                    type: "warn",
                    title: "修改链路",
                    showOverlay: true,
                    WindowWidth: 280,
                    ParentWindowId: "modifyLinkDialog",
                    content: "此链路已经存在！"
                })
            }

            var modifyLinkIframeWindow = document.getElementById("modifyLinkIframe").contentWindow;
            $(modifyLinkIframeWindow).on("load", function () {
                modifyLinkIframeWindow.onEditLinkSubmit = onEditLinkSubmit;
                modifyLinkIframeWindow.onEditLinkExists = onEditLinkExists;
                modifyLinkIframeWindow.onEditLinkSuccess = onEditLinkSuccess;
                modifyLinkIframeWindow.onEditLinkError = onEditLinkError
            })
        }
    });
    function LabUI() {
    }

    $.extend(LabUI.prototype, {
        fullScreen: function () {
            try {
                $.each(["north", "south", "west"], function () {
                    $.topology.ui.innerLayout.close(this);
                    $.topology.ui.outerLayout.close(this)
                })
            } catch (e) {
                return
            }
        }, unfullScreen: function () {
            try {
                $.each(["north", "south", "west"], function () {
                    $.topology.ui.innerLayout.open(this);
                    $.topology.ui.outerLayout.open(this)
                })
            } catch (e) {
                return
            }
        }, formatPainter: function () {
        }, layoutControl: function (queryParams) {
            var param = queryParams["layout"] || "nswe", keys = {
                n: "north",
                s: "south",
                w: "west",
                e: "east"
            }, status = {north: "open", south: "open", west: "open", east: "close"};
            if (param === "none") {
                $.each(keys, function (key, value) {
                    status[value] = "close"
                })
            } else {
                if ($.type(param) === "string") {
                    $.each(keys, function (key, value) {
                        if (param.indexOf(key) < 0) {
                            status[value] = "close"
                        }
                    })
                }
            }
            $.each(status, function (direc, method) {
                try {
                    $.topology.ui.outerLayout[method](direc);
                    $.topology.ui.innerLayout[method](direc)
                } catch (e) {
                }
            })
        }, eagleEyeDisplayToggle: function () {
            var eagleEye = $.topology.ui.eagleEye;
            if (!eagleEye) {
                return
            }
            if (eagleEye.isOpen() && eagleEye.visible()) {
                eagleEye.close()
            } else {
                eagleEye.open()
            }
        }, canvasGridToggle: function () {
            $.topology.graphEngine.canvasGrid.toggle()
        }, gridAndSnap: function () {
            var isSupportGrid = $.topology.graphEngine.canvasGrid.isSupport(), isGridShow = $.topology.graphEngine.canvasGrid.isShow(), gridColor = $.topology.graphEngine.canvasGrid.gridColor(), gridSnapping = $.topology.config.gridSnapping;
            var html = [];
            html.push('<table id="gridAndSnapTab" class="pair-table">');
            html.push("<tr>");
            html.push('<td class="label-field">吸附</td>');
            html.push('<td class="value-field">');
            html.push('<input id="snapSwitch" type="checkbox" class="switch" />');
            html.push("</td>");
            html.push('<td class="help-field"></td>');
            html.push("</tr>");
            html.push("<tr>");
            html.push('<td class="label-field">网格</td>');
            html.push('<td class="value-field">');
            html.push('<input id="gripSwitch" type="checkbox" class="switch" />');
            html.push("</td>");
            html.push('<td class="help-field"></td>');
            html.push("</tr>");
            html.push("<tr>");
            html.push('<td class="label-field">网格颜色</td>');
            html.push('<td class="value-field">');
            html.push('<input id="grid_color" type="text" class="color-picker proptext" />');
            html.push("</td>");
            html.push('<td class="help-field"></td>');
            html.push("</tr>");
            html.push('<tr class="submit_block">');
            html.push('<td class="operate" colspan="3" align="center" style="padding-top:10px;">');
            html.push('<input type="button" value="确&nbsp;&nbsp;定" class="submit_button" />&nbsp;&nbsp;');
            html.push('<input type="button" value="取&nbsp;&nbsp;消" class="cancel_button" />');
            html.push("</td>");
            html.push("</tr>");
            html.push("</table>");
            var w = $.MsgWindow({
                WindowId: "gridAndSnapWin",
                WindowTitle: "网格与吸附",
                WindowWidth: 400,
                WindowHeight: 120,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                showOverlay: true,
                content: $(html.join(""))
            });
            var $gc = $("#grid_color"), $gs = $("#gripSwitch"), $ss = $("#snapSwitch");
            if (!isSupportGrid) {
                $gs.attr("disabled", "disabled");
                $gc.attr("disabled", "disabled")
            }
            setColorValue($gc, gridColor);
            initColorPicker($gc);
            initSwitchs("#gridAndSnapTab .switch");
            initButtons();
            setTimeout(function () {
                $gs.attr("checked", isGridShow).iphoneStyle("refresh");
                $ss.attr("checked", gridSnapping).iphoneStyle("refresh")
            }, 750);
            function initSwitchs(selector) {
                $(selector).iphoneStyle({
                    onChange: function (chk, checked) {
                        var id = chk.attr("id");
                        if (id === "gripSwitch") {
                            isGridShow = checked
                        } else {
                            if (id === "snapSwitch") {
                                gridSnapping = checked
                            }
                        }
                    }
                })
            }

            function setColorValue($ele, backgroundColor) {
                var rgb = $.color.color2rgb(backgroundColor);
                var fontColor = getFontColor(rgb);
                $ele.val(backgroundColor).animate({"background-color": backgroundColor, "color": fontColor}, 1000);
                function getFontColor(rgb) {
                    return rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114 < 192 ? "#fff" : "#000"
                }
            }

            function initColorPicker($input) {
                $input.unbind("click").click(function () {
                    var colorPickerWindow = $.MsgWindow({
                        WindowId: "colorPickerWindow",
                        ParentWindowId: "gridAndSnapWin",
                        WindowTitle: "拾色器",
                        WindowWidth: 360,
                        WindowHeight: 180,
                        WindowResizable: false,
                        WindowMaximize: false,
                        WindowMinimize: false,
                        WindowClosableByEsc: true,
                        contentBackground: "#fff",
                        contentBorder: "none",
                        showOverlay: true,
                        content: $("<div/>").attr("id", "colorPickerWidget")
                    });
                    var ele = $(this), _color = ele.val();
                    $("#colorPickerWidget").ColorPicker({
                        flat: true,
                        color: _color,
                        onSubmit: function (hsb, hex, rgb, el) {
                            gridColor = "#" + hex;
                            setColorValue(ele, gridColor);
                            colorPickerWindow.close()
                        },
                        onBeforeShow: function () {
                            $(this).ColorPickerSetColor(_color)
                        }
                    })
                })
            }

            function saveSettings() {
                $.topology.graphEngine.canvasGrid.gridColor(gridColor);
                $.topology.graphEngine.canvasGrid.toggle(isGridShow);
                $.topology.config.gridSnapping = gridSnapping;
                w.close()
            }

            function initButtons() {
                $("#gridAndSnapTab .submit_button").click(function () {
                    saveSettings()
                });
                $("#gridAndSnapTab .cancel_button").click(function () {
                    w.close()
                })
            }
        }, setViewDragSelect: function () {
            var _ui = $.topology.ui;
            _ui.viewDragAction = _ui.VIEW_DRAG_ACTION_SELECT;
            _ui.menuSwitch.moveOrSelect(_ui.VIEW_DRAG_ACTION_SELECT)
        }, setViewDragMove: function () {
            var _ui = $.topology.ui;
            _ui.viewDragAction = _ui.VIEW_DRAG_ACTION_MOVE;
            _ui.menuSwitch.moveOrSelect(_ui.VIEW_DRAG_ACTION_MOVE)
        }, shortcutBook: function () {
            var shortList = null, _table = "<table class='pair-table'><tr>";
            if ($.topology.status === "SHOW") {
                shortList = [{"keyboard": "Ctrl + F", "label": "搜索", "used": true}, {
                    "keyboard": "Ctrl + A",
                    "label": "全选",
                    "used": true
                }, {"keyboard": "Ctrl + Shift + A", "label": "按类型选择", "used": true}, {
                    "keyboard": "Alt + Ctrl + E",
                    "label": "编辑模式",
                    "used": true
                }, {"keyboard": "Ctrl + Shift + S", "label": "视图另存", "used": true}, {
                    "keyboard": "Ctrl + R",
                    "label": "中心位置",
                    "used": true
                }, {"keyboard": "Ctrl + Left(←)", "label": "导航栏", "used": true}, {
                    "keyboard": "Ctrl + Up(↑)",
                    "label": "菜单栏",
                    "used": true
                }, {"keyboard": "Ctrl + Down(↓)", "label": "告警栏", "used": true}]
            } else {
                shortList = [{"keyboard": "Ctrl + F", "label": "搜索", "used": true}, {
                    "keyboard": "Ctrl + C",
                    "label": "复制",
                    "used": true
                }, {"keyboard": "Ctrl + X", "label": "剪切", "used": false}, {
                    "keyboard": "Ctrl + V",
                    "label": "粘贴",
                    "used": true
                }, {"keyboard": "Del", "label": "删除", "used": true}, {
                    "keyboard": "Ctrl + Z",
                    "label": "撤销",
                    "used": false
                }, {"keyboard": "Ctrl + Y", "label": "重做", "used": false}, {
                    "keyboard": "Ctrl + S",
                    "label": "保存",
                    "used": true
                }, {"keyboard": "Ctrl + E", "label": "编辑属性", "used": true}, {
                    "keyboard": "Ctrl + A",
                    "label": "全选",
                    "used": true
                }, {"keyboard": "Ctrl + Shift + A", "label": "按类型选择", "used": true}, {
                    "keyboard": "Ctrl + [",
                    "label": "上移一层",
                    "used": false
                }, {"keyboard": "Ctrl + Shift + [", "label": "置于顶层", "used": false}, {
                    "keyboard": "Ctrl + ]",
                    "label": "下移一层",
                    "used": false
                }, {"keyboard": "Ctrl + Shift + ]", "label": "置于底层", "used": false}, {
                    "keyboard": "Alt + Ctrl + W",
                    "label": "浏览模式",
                    "used": false
                }, {"keyboard": "Shift + Left(←)", "label": "向左移动", "used": true}, {
                    "keyboard": "Shift + Right(→)",
                    "label": "向右移动",
                    "used": true
                }, {"keyboard": "Shift + Up(↑)", "label": "向上移动", "used": true}, {
                    "keyboard": "Shift + Down(↓)",
                    "label": "向下移动",
                    "used": true
                }, {"keyboard": "Left(←)", "label": "向左微调", "used": true}, {
                    "keyboard": "Right(→)",
                    "label": "向右微调",
                    "used": true
                }, {"keyboard": "Up(↑)", "label": "向上微调", "used": true}, {
                    "keyboard": "Down(↓)",
                    "label": "向下微调",
                    "used": true
                }, {"keyboard": "Alt + Ctrl + T", "label": "顶端对齐", "used": true}, {
                    "keyboard": "Alt + Ctrl + M",
                    "label": "中部对齐",
                    "used": true
                }, {"keyboard": "Alt + Ctrl + B", "label": "底端对齐", "used": true}, {
                    "keyboard": "Alt + Ctrl + L",
                    "label": "左侧对齐",
                    "used": true
                }, {"keyboard": "Alt + Ctrl + C", "label": "居中对齐", "used": true}, {
                    "keyboard": "Alt + Ctrl + R",
                    "label": "右侧对齐",
                    "used": true
                }]
            }
            for (var i = 0, len = shortList.length; i < len; i++) {
                if (shortList[i].used) {
                    _table += "<td class='label-field'>" + shortList[i].keyboard + "</td><td class='value-field'>" + shortList[i].label + "</td>"
                } else {
                    _table += "<td class='label-field'><font color='#bcbcbc'>" + shortList[i].keyboard + "</font></td><td class='value-field'><font color='#bcbcbc'>" + shortList[i].label + "</font></td>"
                }
                if (i % 2 === 1) {
                    _table += "</tr><tr>"
                }
            }
            $.MsgWindow({
                WindowId: "shortcutList",
                WindowTitle: "快捷键一览",
                WindowWidth: 520,
                WindowHeight: 302,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: true,
                WindowClosable: true,
                WindowDraggable: true,
                contentBackground: "#ffffff",
                contentBorder: "none",
                showOverlay: true,
                content: _table
            })
        }, toggleResourceMessage: function (cfg, on) {
            var status = $.topology.ui.tooltip4msg.status();
            on = $.type(on) === "boolean" ? on : !status;
            if (on != status) {
                if (on) {
                    $.topology.view.option["resource-message"] = 1;
                    $.topology.changed.view = true;
                    $.topology.ui.navMenu.navmenu("setDisabled", cfg.id, true);
                    $.topology.ui.tooltip4msg.init(function () {
                        $.topology.ui.navMenu.navmenu("setDisabled", cfg.id, false);
                        $.topology.ui.navMenu.navmenu("setText", cfg.id, "关闭资源变更")
                    })
                } else {
                    $.topology.view.option["resource-message"] = 0;
                    $.topology.changed.view = true;
                    $.topology.ui.tooltip4msg.destory();
                    $.topology.ui.navMenu.navmenu("setText", cfg.id, "开启资源变更")
                }
            } else {
                $.topology.ui.navMenu.navmenu("setText", cfg.id, (on ? "关闭" : "开启") + "资源变更")
            }
        }
    });
    function LabTopology() {
    }

    $.extend(LabTopology.prototype, {
        saveTopo: function () {
            // if (!$.topology.isChanged()) {
            //     $.jAlert({type: "info", content: "拓扑图不存在变化，无须保存"});
            //     return
            // }
           // console.log($.topology.serializeAddSymbols());
          // console.log($.topology.serializeAddlines());
            //保存单独的图元,,,暂时先设计保存资源的
            $msgWindow = $.MsgWindow({
                WindowId: "loading",
                WindowTitle: "",
                WindowWidth: 200,
                WindowHeight: 80,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosable: false,
                WindowDraggable: false,
                contentBackground: "#fff",
                contentBorder: "none",
                showOverlay: true,
                content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
            });
            $("#load_infor").html("请等待，正在保存拓扑图...");
            //获取当前拓扑图中所有拓扑图
            $.ajax({
                type : 'POST',
                async : false,
                dataType:'json',
                url :  ctx+"/toposymbols/topoSymbols/saveList",
                data:{
                    addSymbolsString:$.topology.serializeAddSymbols(),
                    addLineString:$.topology.serializeAddlines()
                },
                timeout:10*1000,    //超时时间 10s
                success : function(result) {
                    console.log(result);
                    if (result.success){
                        $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>拓扑图保存成功！</td></tr></table>"));
                        setTimeout(function () {
                            $msgWindow.close();
                            window.location.reload();
                        }, 1000);
                        $.lab.exp.exportThumb();
                    }else{
                        $msgWindow.close();
                        $.jAlert({
                            type: "warn",
                            content: "保存拓扑图失败,"
                        })
                    }
                },
                error:function(){
                        $msgWindow.close();
                        $.jAlert({
                           type: "warn",
                           content: "保存拓扑图失败,"
                        })
                },
                complete:function(XMLHttpRequest,status){
                    if(status=='timeout'){
                        alert("请求超时，请检查网络后重试");
                    }
                }
            });


        }, deleteView: function () {
            function delView() {
                $msgWindow = $.MsgWindow({
                    WindowId: "loading",
                    WindowTitle: "",
                    WindowWidth: 280,
                    WindowHeight: 80,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosable: false,
                    WindowDraggable: false,
                    contentBackground: "#fff",
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
                });
                $("#load_infor").html("请等待，正在删除拓扑图...");
                var viewId = $.topology.view.id;
                $.topology.deleteView({

                    id: viewId, success: function (data, textStatus, XMLHttpRequest) {
                        $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>拓扑图删除成功！" + "</div></td></tr></table>"));
                        setTimeout(function () {
                            $.lab.direct.gotoSys(null, "main.html", {type: $.topology.view.type})
                        }, 1000)
                    }, error: function (XMLHttpRequest, textStatus, errorThrown) {
                        $("#load_container").empty().append($("<table><tr><td class='error-content-frame'>" + "<div class='success-content'>拓扑图删除失败, " + $.converter.requestError(XMLHttpRequest, textStatus) + "</div></td></tr></table>"));
                        setTimeout(function () {
                            $.lab.direct.gotoSys(null, "main.html", {type: $.topology.view.type})
                        }, 1000)
                    }
                })
            }

            var viewName = $.topology.view.name;
            $.jConfirm({
                title: "删除拓扑图", content: "您确定删除此拓扑图 [ " + viewName + " ] ？", callback: function (isYes) {
                    if (!!isYes) {
                        delView()
                    }
                }
            })
        }, saveAs: function () {
            if ($.topology.permission != 3 && $.topology.permission != 4) {
                return
            }
            var $content = null, $prompt = $.jPrompt({
                type: "help",
                title: "另存为...",
                content: "另存为的拓扑图名称：",
                value: $.topology.view.name + "_副本",
                callback: function (value) {
                    if (value === null) {
                        return
                    }
                    if ($content && !$content.valid()) {
                        return false
                    }
                    $msgWindow = $.MsgWindow({
                        WindowId: "loading",
                        WindowTitle: "",
                        WindowWidth: 280,
                        WindowHeight: 80,
                        WindowResizable: false,
                        WindowMaximize: false,
                        WindowMinimize: false,
                        WindowClosable: false,
                        WindowDraggable: false,
                        contentBackground: "#fff",
                        contentBorder: "none",
                        showOverlay: true,
                        content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
                    });
                    $("#load_infor").html("请等待，正在另存拓扑图...");
                    $.ajax({
                        url: $.project.path + "/topo/sas.action",
                        type: "POST",
                        data: {from: $.topology.view.id, to: value},
                        dataType: "json",
                        success: function (data, textStatus, XMLHttpRequest) {
                            if (data.success) {
                                $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>拓扑图另存成功！即将进入编辑..." + "</div></td></tr></table>"));
                                setTimeout(function () {
                                    $msgWindow.close()
                                }, 1000);
                                $.lab.direct.gotoSys(null, "edit.html", {type: $.topology.view.type, id: data.data})
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            $.jAlert({
                                type: "warn",
                                content: $.converter.requestError(XMLHttpRequest, textStatus) + " [另存拓扑图]"
                            })
                        }
                    })
                }
            });
            if (!$.jvalidate.existMethod("viewNameRepeat")) {
                $.jvalidate.addMethod("viewNameRepeat", function (value) {
                    var result = false;
                    $.ajax({
                        async: false,
                        type: "POST",
                        url: $.project.path + "/topo/vn.action",
                        data: {name: value},
                        dataType: "json",
                        success: function (data) {
                            result = data.data === true
                        }
                    });
                    return result
                }, "拓扑名已经存在, 请重新填写.")
            }
            $content = $prompt.find(".prompt-content");
            $content.find(".prompt-text").addClass("jvalidate").attr({
                validtype: "required,noSpecialCaracters,maxLength,viewNameRepeat",
                validpar: $.toJSON({reqUrl: $.project.path + "/topo/vn.action", reqData: "data", length: 30}),
                requiredmsg: "必须填写拓扑图名称.",
                noSpecialCaractersmsg: "拓扑图名称中不能出现特殊字符, 请用数字、英文字母、汉字或下划线作为拓扑图的名称.",
                maxLengthmsg: "名称过长, 请减少名称内容."
            });
            $content.jvalidate({container: "#defaultWindowId"}).css({overflow: "visible"});
            setTimeout(function () {
                $prompt.find(".table-mm-content").css({overflow: "visible"})
            }, 1500)
        }, setUserDefaultView: function () {
            $msgWindow = $.MsgWindow({
                WindowId: "loading",
                WindowTitle: "",
                WindowWidth: 280,
                WindowHeight: 80,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosable: false,
                WindowDraggable: false,
                contentBackground: "#fff",
                contentBorder: "none",
                showOverlay: true,
                content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
            });
            $("#load_infor").html("请等待，正在设置默认视图...");
            $.ajax({
                url: $.project.path + "/topo/sudv.action",
                type: "POST",
                data: {type: $.topology.view.type, viewId: $.topology.view.id},
                timeout: 5000,
                dataType: "json",
                success: function (data, textStatus, XMLHttpRequest) {
                    if (data.success) {
                        $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>默认视图设置成功！" + "</div></td></tr></table>"));
                        setTimeout(function () {
                            $msgWindow.close()
                        }, 1000)
                    } else {
                        $msgWindow.close();
                        $.jAlert({type: "error", content: "设置默认视图失败, " + data.data})
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $msgWindow.close();
                    $.jAlert({type: "warn", content: $.converter.requestError(XMLHttpRequest, textStatus)})
                }
            })
        }, refreshConfig: function () {
            var $msgWindow = $.MsgWindow({
                WindowId: "loading",
                WindowTitle: "",
                WindowWidth: 280,
                WindowHeight: 80,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosable: false,
                WindowDraggable: false,
                contentBackground: "#fff",
                contentBorder: "none",
                showOverlay: true,
                content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
            });
            $("#load_infor").html("正在重新加载个性化配置...");
            $.ajax({
                url: $.project.path + "/topo/rcc.action",
                type: "POST",
                dataType: "json",
                timeout: 10000,
                success: function (data, textStatus, XMLHttpRequest) {
                    if (data.success) {
                        $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>加载个性化配置成功！" + "</div></td></tr></table>"));
                        setTimeout(function () {
                            $msgWindow.close()
                        }, 1000)
                    } else {
                        $msgWindow.close();
                        $.jAlert({type: "error", content: "操作失败，请重试！"})
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $msgWindow.close();
                    $.jAlert({type: "error", content: "操作失败，请重试！"})
                }
            })
        }, copySelectedElement: function () {
            if ($.lab.menu.testCopySelectedElement()) {
                var nodeIds = [].concat($.topology.selector.symbols()).concat($.topology.selector.containers());
                var nodes = [], node;
                for (var i = 0; i < nodeIds.length; i++) {
                    node = $.topology.find(nodeIds[i], "symbol|container");
                    if (node) {
                        nodes.push(node)
                    }
                }
                $.topology.clipBoard = nodes
            }
        }, pasteElement: function (isCentered) {
            var $topo = $.topology;
            var cb = $topo.clipBoard;
            if (!cb.length) {
                return
            }
            var pasted = copyNodes(cb);
            var nodeIconBBox = $topo.getNodesIconBBox(pasted), dx, dy;
            if (isCentered) {
                var viewport = $topo.view.viewport();
                var centerX = viewport.x + viewport.width / 2, centerY = viewport.y + viewport.height / 2;
                dx = centerX - nodeIconBBox.minX - nodeIconBBox.width / 2;
                dy = centerY - nodeIconBBox.minY - nodeIconBBox.height / 2
            } else {
                var lastClickPoint = $topo.lastClickPoint;
                var point = $topo.graphEngine.canvas.coordinateConvert.page2Canvas(lastClickPoint.x, lastClickPoint.y);
                dx = point.x - nodeIconBBox.minX;
                dy = point.y - nodeIconBBox.minY
            }
            var viewBox = $topo.view.getViewBox();
            var nodesBbox = $topo.getNodesBBox(pasted);
            if (nodesBbox.minX + dx < viewBox.x) {
                dx = viewBox.x - nodesBbox.minX
            } else {
                if (nodesBbox.maxX + dx > viewBox.x + viewBox.width) {
                    dx = viewBox.x + viewBox.width - nodesBbox.maxX
                }
            }
            if (nodesBbox.minY + dy < viewBox.y) {
                dy = viewBox.y - nodesBbox.minY
            } else {
                if (nodesBbox.maxY + dy > viewBox.y + viewBox.height) {
                    dy = viewBox.y + viewBox.height - nodesBbox.maxY
                }
            }
            $topo.view.moveNodes(pasted, dx, dy);
            var nodeIds = [];
            for (var i = 0; i < pasted.length; i++) {
                nodeIds.push(pasted[i].id)
            }
            $topo.selector.select(nodeIds);
            return;
            function copyNodes(nodes) {
                var pasted = [];
                var nodeMap = {}, newNodeMap = {}, lineMap = {}, newLineMap = {}, nodeIdMap = {}, lineIdMap = {};
                var node;
                for (var i = 0; i < nodes.length; i++) {
                    node = nodes[i];
                    nodeMap[node.id] = node;
                    if ($topo.isContainer(node)) {
                        for (var nid in node.children) {
                            nodeMap[nid] = node.children[nid]
                        }
                    }
                }
                var newNode;
                for (var id in nodeMap) {
                    node = nodeMap[id];
                    if ($topo.isSymbol(node)) {
                        newNode = copySymbol(node)
                    } else {
                        newNode = copyContainer(node)
                    }
                    newNode.add();
                    newNodeMap[newNode.id] = newNode;
                    nodeIdMap[id] = newNode.id
                }
                var nodeParent;
                for (var id in nodeMap) {
                    node = nodeMap[id];
                    if (node.parent && nodeMap[node.parent.id]) {
                        nodeParent = newNodeMap[nodeIdMap[node.parent.id]];
                        newNode = newNodeMap[nodeIdMap[id]];
                        newNode.parent = nodeParent;
                        newNode.visible = nodeParent.isExpand;
                        $topo.graphEngine.coverage.dropNode(newNode);
                        nodeParent.children[newNode.id] = newNode;
                        newNode.change()
                    }
                }
                var line, lines;
                for (var id in nodeMap) {
                    node = nodeMap[id];
                    if ($topo.isSymbol(node)) {
                        lines = node.lines
                    } else {
                        lines = node.lineseters
                    }
                    for (var lid in lines) {
                        line = lines[lid];
                        lineMap[lid] = line
                    }
                }
                var newLine;
                var srcNode, dstNode, newSrcNode, newDstNode;
                for (var id in lineMap) {
                    line = lineMap[id];
                    if ($topo.isLine(line)) {
                        newLine = copyLine(line)
                    } else {
                        newLine = copyLineseter(line)
                    }
                    srcNode = line.srcNode;
                    dstNode = line.dstNode;
                    if (srcNode) {
                        if (nodeIdMap[srcNode.id]) {
                            newSrcNode = newNodeMap[nodeIdMap[srcNode.id]]
                        } else {
                            newSrcNode = srcNode
                        }
                        newLine.srcNode = newSrcNode;
                        if ($topo.isSymbol(newSrcNode)) {
                            newSrcNode.lines[newLine.id] = newLine
                        } else {
                            newSrcNode.lineseters[newLine.id] = newLine
                        }
                    }
                    if (dstNode) {
                        if (nodeIdMap[dstNode.id]) {
                            newDstNode = newNodeMap[nodeIdMap[dstNode.id]]
                        } else {
                            newDstNode = dstNode
                        }
                        newLine.dstNode = newDstNode;
                        if ($topo.isSymbol(newDstNode)) {
                            newDstNode.lines[newLine.id] = newLine
                        } else {
                            newDstNode.lineseters[newLine.id] = newLine
                        }
                    }
                    newLine.updateNodePosition();
                    newLine.refreshName();
                    newLine.add();
                    newLineMap[newLine.id] = newLine;
                    lineIdMap[id] = newLine.id
                }
                var lineParent;
                for (var id in lineMap) {
                    line = lineMap[id];
                    if (line.parent && lineMap[line.parent.id]) {
                        if (lineMap[line.parent.id]) {
                            lineParent = newLineMap[lineIdMap[line.parent.id]]
                        } else {
                            lineParent = $topo.find(id, "lineseter")
                        }
                        if (lineParent) {
                            newLine = newLineMap[lineIdMap[id]];
                            newLine.parent = lineParent;
                            lineParent.children[newLine.id] = newLine;
                            newLine.change()
                        }
                    }
                }
                for (var id in newNodeMap) {
                    pasted.push(newNodeMap[id])
                }
                return pasted
            }

            function copySymbol(node) {
                var copy = $topo.createSymbol();
                copy.name = node.name;
                copy.x = node.x;
                copy.y = node.y;
                copy.objectId = node.objectId;
                copy.objectClass = node.objectClass;
                copy.instanceId = node.instanceId;
                copy.option = $.extend({}, node.option);
                delete copy.option["related-view"];
                copy.style = $.extend({}, node.style);
                return copy
            }

            function copyContainer(node) {
                var copy = $topo.createContainer();
                copy.name = node.name;
                copy.x = node.x;
                copy.y = node.y;
                copy.expandX = node.expandX;
                copy.expandY = node.expandY;
                copy.isExpand = node.isExpand;
                copy.objectId = node.objectId;
                copy.objectClass = node.objectClass;
                copy.instanceId = node.instanceId;
                copy.option = $.extend({}, node.option);
                copy.style = $.extend({}, node.style);
                return copy
            }

            function copyLine(line) {
                var copy = $topo.createLine();
                copy.name = line.name;
                copy.x1 = line.x1;
                copy.y1 = line.y1;
                copy.x2 = line.x2;
                copy.y2 = line.y2;
                copy.path = line.path;
                copy.points = [].concat(line.points);
                copy.objectId = line.objectId;
                copy.objectClass = line.objectClass;
                copy.instanceId = line.instanceId;
                copy.visible = line.visible;
                copy.option = $.extend({}, line.option);
                copy.style = $.extend({}, line.style);
                return copy
            }

            function copyLineseter(line) {
                var copy = $topo.createLineseter();
                copy.name = line.name;
                copy.x1 = line.x1;
                copy.y1 = line.y1;
                copy.x2 = line.x2;
                copy.y2 = line.y2;
                copy.path = line.path;
                copy.points = [].concat(line.points);
                copy.objectId = line.objectId;
                copy.objectClass = line.objectClass;
                copy.instanceId = line.instanceId;
                copy.isExpand = line.isExpand;
                copy.isPermit = line.isPermit;
                copy.visible = line.visible;
                copy.state = line.state;
                copy.option = $.extend({}, line.option);
                copy.style = $.extend({}, line.style);
                return copy
            }
        }, pasteElementInCenter: function () {
            $.lab.topo.pasteElement(true)
        }, selectAllNodes: function () {
            var nodeIds = [], shapes = $.topology.shapes, symbols = shapes.symbols, containers = shapes.containers;
            for (var id in symbols) {
                nodeIds.push(id)
            }
            for (var id in containers) {
                nodeIds.push(id)
            }
            $.topology.selector.select(nodeIds)
        }, addContainer: function (data) {
            var icon = $.topology.getIcon("container");
            console.log("??"+icon);
            if (!icon) {
                return
            }
            console.log(icon.path);
            var x = 20, y = 40;
            data = data || {};
            data.id = null;
            data = $.extend({
                "name": "新容器",
                "x": x,
                "y": y,
                "parentId": -1,
                "style": {"icon": icon.path, "icon-width": icon.width, "icon-height": icon.height}
            }, data);
            var container = $.topology.createContainer(data);
            container.add();
            $.topology.selector.select(container.id);
            return container
        }, addVitualSymbol: function () {
            var icon = $.topology.getIcon("symbol");
            if (!icon) {
                return
            }
            var x = 20, y = 40;
            var symbol = $.topology.createSymbol({
                "name": "新节点",
                "x": x,
                "y": y,
                "parentId": -1,
                "style": {"icon": icon.path, "icon-width": icon.width, "icon-height": icon.height}
            });
            symbol.add();
            $.topology.selector.select(symbol.id)
        }, treeNode2SymbolData: function (treeNode) {
            var data = {};
            data.name = treeNode.name;
            data.objectClass = treeNode["object_class"];
            var icon = $.topology.getIcon(data.objectClass);
            if (!icon) {
                icon = $.topology.getIcon("symbol")
            }
            data.style = {"icon": icon.path, "icon-width": icon.width, "icon-height": icon.height};
            if ($.topology.view.type == 1) {
                data.objectId = treeNode.id
            } else {
                if ($.topology.view.type == 2) {
                    data.objectId = treeNode.objectid;
                    data.instanceId = treeNode["instance_id"];
                    data.options = {"modeltree-node": treeNode.id}
                } else {
                    data.objectId = treeNode.id
                }
            }
            return data
        }, importSymbols: function () {
            var nodes = [], maxNodeCount = 300;
            try {


                var treeNodes = $.topology.ui.trees.focus.getCheckedNodes(true), treeNode;

                var shapes = $.topology.shapes, node, line;
                var pannelNode = [];
                for(var i in shapes.symbols){//导入节点判断已有面板中是否已有此资源
                    pannelNode.push(shapes.symbols[i].objectId);
                }
                for (var i = 0; i < treeNodes.length; i++) {
                    treeNode = treeNodes[i];
                    if (importTreeNodeEnabled(treeNode) && $.inArray(treeNode.id,pannelNode) ==-1) {
                        nodes.push(treeNode);

                    }
                }
                function importTreeNodeEnabled(treeNode) {
                    if ($.topology.view.type == 2) {
                        return treeNode.objectid && treeNode.objectid != -1
                    } else {
                        return !treeNode.isParent
                    }
                }
            } catch (e) {
            }

            var nodeCount = nodes.length;
            if (nodeCount == 0) {
                $.jAlert({type: "info", content: "请选择有效的节点。"});
                return
            } else {
                if (nodeCount > maxNodeCount) {
                    $.jAlert({type: "warn", content: "将要导入的节点个数" + nodeCount + "超过最多支持个数" + maxNodeCount + "，请分次导入！"});
                    return
                }
            }
            var containers = $.topology.shapes.containers;
            console.log(containers);
            var containerArr = [];
            for (var id in containers) {
                containerArr.push(containers[id])
            }
            $msgWindow = $.MsgWindow({
                WindowId: "importSymbolsDialog",
                WindowTitle: "导入节点",
                WindowWidth: 300,
                WindowHeight: containerArr.length > 0 ? 150 : 127,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                contentBorder: "none",
                showOverlay: true,
                content: $("<div/>").attr("id", "importSymbols")
            });
            $("#importSymbols").empty().css("overflow-y", "hidden").append($("<div/>").attr("id", "importSymbols-content")).append($("<div style='text-align:center;padding-top:20px;'>" + "<input id='importSymbols-submit' type='button' value=' 确 定 ' />&nbsp;&nbsp;" + "<input id='importSymbols-cancel' type='button' value=' 取 消 ' />" + "</div>"));
            var html = [];
            html.push('<div class="importSymbol-item importSymbol-item-checked" value="1"><input name="importSymbol" type="radio" value="1" checked="checked">导入到视图</div>');
           // html.push('<div class="importSymbol-item" value="2"><input name="importSymbol" type="radio" value="2">导入到新容器<input id="importSymbol-newContainer" maxlength="30" type="text" /></div>');
            html.push('<div class="importSymbol-item" value="3" style="display:none;"><input name="importSymbol" type="radio" value="3">导入到已有容器<select id="importSymbol-containers"></select></div>');
            $("#importSymbols-content").append(html.join(""));
            /*$("#importSymbol-newContainer").addClass("jvalidate").attr({
                validtype: "required",
                requiredmsg: "容器名称不能为空"
            });*/
            /*var $jvaldate = $("#importSymbol-newContainer").parent().jvalidate({
                container: "#importSymbolsDialog",
                showAlways: true
            });*/
            setTimeout(function () {
                $msgWindow.find(".table-mm-content").css({overflow: "visible"})
            }, 1500);
            if (containerArr.length > 0) {
                containerArr.sort(function (c1, c2) {
                    return c1.name.localeCompare(c2.name)
                });
                var containerOption = [];
                for (var i = 0; i < containerArr.length; i++) {
                    containerOption.push('<option value="' + containerArr[i].id + '">' + containerArr[i].getName() + "</option>")
                }
                $("#importSymbol-containers").append(containerOption.join(""));
                $(".importSymbol-item").eq(2).show();
                $("#importSymbol-containers").change(function () {
                    selectContainer()
                })
            }
            function getSelectContainerId() {
                return $("#importSymbol-containers").val()
            }

            function selectContainer() {
                $.topology.selector.select(getSelectContainerId())
            }

            var selectVal = 1;
            $(".importSymbol-item").click(function () {
                var $this = $(this);
                selectVal = $this.attr("value");
                $("input[name='importSymbol'][value='" + selectVal + "']").prop("checked", true);
                $(".importSymbol-item").removeClass("importSymbol-item-checked");
                $this.addClass("importSymbol-item-checked");
                if (selectVal == 1) {
                    $("#importSymbol-containers").hide();
                   // $("#importSymbol-newContainer").hide();
                    $jvaldate.reset()
                } else {
                    if (selectVal == 2) {
                        $("#importSymbol-containers").hide();
                       // $("#importSymbol-newContainer").show()
                    } else {
                        if (selectVal == 3) {
                            $("#importSymbol-containers").show();
                            selectContainer();
                         //   $("#importSymbol-newContainer").hide();
                            $jvaldate.reset()
                        }
                    }
                }
            });
            $("#importSymbols-submit").click(function () {
                if (selectVal == 2 && !$jvaldate.valid()) {
                    return
                }
                var container, containerId;
                var symbols = [];
                var symbolIds = [];
                var parentId = -1;
                $.each(nodes, function (i, node) {
                    var symbolData = $.lab.topo.treeNode2SymbolData(node);
                    $.extend(symbolData, {"parentId": parentId});
                    var symbol = $.topology.createSymbol(symbolData);
                    symbols.push(symbol);
                    symbolIds.push(symbol.id)
                });
                console.log(symbols);
                if (selectVal == 1) {
                    var x = 50, y = 50;
                    var viewHeight = $.topology.view.getHeight();
                    for (var i = 0; i < symbols.length; i++) {
                        var symbol = symbols[i];
                        symbol.x = x;
                        symbol.y = y;
                        y += 60;
                        if (y >= viewHeight - 80) {
                            x += 60;
                            y = 50
                        }
                        symbol.add()
                    }
                } else {
                    if (selectVal == 2) {
                       // container = $.lab.topo.addContainer({name: $("#importSymbol-newContainer").val()})
                    } else {
                        if (selectVal == 3) {
                            containerId = getSelectContainerId();
                            container = containers[containerId]
                        }
                    }
                    if (!container) {
                        return
                    }
                    var containerIconBBox = container.getIconBBox();
                    var x = containerIconBBox.minX + container.expandSpacing / 2, y = containerIconBBox.minY + container.expandSpacing / 2;
                    var totalCol = Math.ceil(Math.sqrt(nodeCount)), col = 1, row = 1;
                    for (var i = 0; i < symbols.length; i++) {
                        var symbol = symbols[i];
                        symbol.x = x + (col - 1) * 60;
                        symbol.y = y + (row - 1) * 60;
                        symbol.add();
                        container.addChild(symbol, true);
                        col++;
                        if (col > totalCol) {
                            col = 1;
                            row++
                        }
                    }
                    container.change();
                    container.edgeDetect()
                }
                // if ($.topology.view.type === 1 || $.topology.view.type === 2) {
                //     $.lab.itsm.supplementLinks(symbols, "add", {
                //         success: function (illegalLinks) {
                //             if (illegalLinks.length > 0) {
                //                 var warnMsg = "下列网元上可能存在错误链路：<br><ul>";
                //                 for (var i = 0, len = illegalLinks.length; i < len; i++) {
                //                     var ne = illegalLinks[i];
                //                     warnMsg += "<li><b><a title='点击定位此网元'>" + ne.name + "</a></b>" + "有<a title='点击打开链路管理'>链路</a>连接自身，" + "源接口为" + ne.srcifname + "(" + ne.srcifindex + ")，" + "目的接口为" + ne.dstifname + "(" + ne.dstifindex + ")</li>"
                //                 }
                //                 warnMsg += "</ul>";
                //                 $.jAlert({type: "warn", title: "链路智能纠错", content: warnMsg})
                //             }
                //         }
                //     })
                // } else {
                //     if ($.topology.view.type === 3) {
                //         $.lab.vm.supplementVirtualizationRelations(symbols, {
                //             success: function () {
                //                 $.lab.vm.supplementLinks(symbols, "add", {
                //                     success: function (illegalLinks) {
                //                         if (illegalLinks.length > 0) {
                //                             var warnMsg = "下列网元上可能存在错误链路：<br><ul>";
                //                             for (var i = 0, len = illegalLinks.length; i < len; i++) {
                //                                 var ne = illegalLinks[i];
                //                                 warnMsg += "<li><b><a title='点击定位此网元'>" + ne.name + "</a></b>" + "有<a title='点击打开链路管理'>链路</a>连接自身，" + "源接口为" + ne.srcifname + "(" + ne.srcifindex + ")，" + "目的接口为" + ne.dstifname + "(" + ne.dstifindex + ")</li>"
                //                             }
                //                             warnMsg += "</ul>";
                //                             $.jAlert({type: "warn", title: "链路智能纠错", content: warnMsg})
                //                         }
                //                     }
                //                 })
                //             }
                //         })
                //     }
                // }
                $.topology.selector.select(symbolIds);
                $msgWindow.close();
                var zTreeObj = null;
                if ($.topology.view.type == 1) {
                    var $accordion = $("#accordion"), $ztree = $($accordion.children("h3")[$accordion.accordion("option", "active")]).data("ztree");
                    zTreeObj = $.fn.zTree.getZTreeObj($ztree.attr("id"))
                } else {
                    if ($.topology.view.type == 2) {
                        zTreeObj = $.fn.zTree.getZTreeObj("rp_tree")
                    }
                }
                zTreeObj && zTreeObj.checkAllNodes(false)
            });
            $("#importSymbols-cancel").click(function () {
                $msgWindow.close()
            })
        }, removeSymbolsFromContainer: function () {
            var $topology = $.topology, selector = $topology.selector, symbols = selector.symbols();
            if (selector.size() == 0 || (selector.size() != symbols.length)) {
                return
            }
            var id, symbol;
            for (var k in symbols) {
                id = symbols[k];
                symbol = $topology.find(id);
                if (symbol && symbol.parent) {
                    symbol.parent.removeChild(symbol, true)
                }
            }
        }, selectElemtByCondition: function () {
            var isShowPage = $.topology.status === "SHOW";
            var w = $.MsgWindow({
                WindowId: "selectElemtByCondition",
                WindowTitle: "批量选择",
                WindowWidth: 420,
                WindowHeight: 180,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                contentBorder: "none",
                showOverlay: true,
                content: $("<div/>").attr("id", "selectElemtByConditionWidget")
            });
            $("#selectElemtByConditionWidget").empty().append($("<div/>").attr("id", "conditionContent")).append($("<div style='text-align:center;padding:8px 0 0 0;'>" + "<input id='selectElemtSubmit' type='button' value=' 确 定 ' />&nbsp;&nbsp;" + "<input id='selectElemtCancel' type='button' value=' 取 消 ' />" + "</div>"));
            var tabHtml = [];
            tabHtml.push('<div id="conditionTabs">');
            tabHtml.push("<ul>");
            tabHtml.push('<li><a href="#conditionTabs-0">按网元类型</a></li>');
            if (!isShowPage) {
                tabHtml.push('<li><a href="#conditionTabs-1">按元素类型</a></li>')
            }
            tabHtml.push("</ul>");
            tabHtml.push('<div id="conditionTabs-0" class="conditionTabs"></div>');
            if (!isShowPage) {
                tabHtml.push('<div id="conditionTabs-1" class="conditionTabs"></div>')
            }
            tabHtml.push("</div>");
            $("#conditionContent").append(tabHtml.join(""));
            var $topo = $.topology;
            var _s = $.topology.shapes;
            var ocs = $topo.getAllObjectClass();
            var optionsHtml = [], o;
            for (var i = 0; i < ocs.length; i++) {
                o = $topo.getObjectClassInfo(ocs[i]);
                o && optionsHtml.push('<label title="' + o.name + '"><input class="sebc0" value="' + o.id + '" type="checkbox">' + o.name + "</label>")
            }
            $("#conditionTabs-0").append(optionsHtml.join(""));
            if (!isShowPage) {
                optionsHtml = [];
                ocs = [];
                if (!$.isEmptyObject(_s.symbols)) {
                    ocs.push({id: "symbol", name: "节点"})
                }
                if (!$.isEmptyObject(_s.containers)) {
                    ocs.push({id: "container", name: "容器"})
                }
                if (!$.isEmptyObject(_s.lines)) {
                    ocs.push({id: "line", name: "连线"})
                }
                if (!$.isEmptyObject(_s.lineseters)) {
                    ocs.push({id: "lineseter", name: "线组器"})
                }
                for (var i = 0; i < ocs.length; i++) {
                    o = ocs[i];
                    o && optionsHtml.push('<label title="' + o.name + '"><input class="sebc1" value="' + o.id + '" type="checkbox">' + o.name + "</label>")
                }
                $("#conditionTabs-1").append(optionsHtml.join(""))
            }
            var $tabs = $("#conditionTabs").tabs();
            $("#selectElemtSubmit").click(function () {
                ocs = [];
                var active = $tabs.tabs("option", "active");
                var $checked = $(".sebc" + active + ":checked");
                $.each($checked, function (i, n) {
                    ocs.push($(n).val())
                });
                var ids = [];
                if (active == 0) {
                    var ocsMap = {}, ocTmp;
                    for (var i = 0; i < ocs.length; i++) {
                        ocsMap[ocs[i]] = true
                    }
                    for (var type in _s) {
                        var es = _s[type];
                        for (var id in es) {
                            ocTmp = es[id].getObjectClass();
                            if (ocsMap[ocTmp]) {
                                ids.push(id)
                            }
                        }
                    }
                } else {
                    if (active == 1) {
                        for (var i in ocs) {
                            var es = _s[ocs[i] + "s"];
                            if (es) {
                                for (var id in es) {
                                    ids.push(id)
                                }
                            }
                        }
                    }
                }
                $topo.selector.select(ids);
                w.close()
            });
            $("#selectElemtCancel").click(function () {
                w.close()
            })
        }, elementExpandCollapseToggle: function () {
            var $topology = $.topology, selector = $topology.selector, contextObj = $topology.contextObj;
            if (!contextObj) {
                return
            }
            if ($topology.isContainer(contextObj)) {
                if (!contextObj.isPermit) {
                    return
                }
                if (contextObj.isExpand) {
                    contextObj.collapse()
                } else {
                    contextObj.expand()
                }
                contextObj.change();
                selector.refresh()
            } else {
                if ($topology.isLine(contextObj)) {
                    var parent = contextObj.parent;
                    if (parent) {
                        parent.show()
                    }
                } else {
                    if ($topology.isLineseter(contextObj)) {
                        contextObj.expand();
                        if ($topology.selector.contains(contextObj.id)) {
                            $.topology.selector.reset()
                        }
                    }
                }
            }
        }, deleteElement: function () {
            var topology = $.topology, selector = topology.selector, symbolIds = selector.symbols(), lineIds = selector.lines(), containerIds = selector.containers();
            if (selector.size() == 0 || (selector.size() == 1 && topology.isView(selector.focus()))) {
                return
            }
            console.log(symbolIds);
            console.log(lineIds);
            $.ajax({
                url:ctx+"/topoview/topoView/deleteTopoSymbolsOrLines",
                type:'POST',
                async:false,
                data:{
                    "lineIds":lineIds.toString(),
                    "symbolIds":symbolIds.toString()
                },
                timeout:100*1000,    //超时时间 100s
                dataType:'json',    //返回的数据格式：
                success:function(data,textStatus,jqXHR){
                    console.log(data);
                    ids = lineIds;
                    for (var k in ids) {
                        id = ids[k];
                        obj = topology.find(id);
                        if (obj) {
                            obj.remove()
                        }
                    }
                    ids = symbolIds;
                    for (var k in ids) {
                        id = ids[k];
                        obj = topology.find(id);
                        if (obj) {
                            obj.remove()
                        }
                    }
                    ids = containerIds;
                    for (var k in ids) {
                        id = ids[k];
                        obj = topology.find(id);
                        if (obj) {
                            obj.remove()
                        }
                    }
                    selector.reset();
                },
                error:function(xhr,textStatus){

                }
            })

        }, propertyPanel: function () {
            $.topology.contextObj = $.topology.selector.focus() || $.topology.view;
            var $tabs = $("#tabs"), $ul = $tabs.children("ul"), innerLayout = $.topology.ui.innerLayout;
            $ul.children(":eq(0)").children().trigger("click");
            if ($(".ui-layout-east").is(":hidden")) {
                innerLayout.options.east.resizable = true;
                innerLayout.slideOpen("east");
                innerLayout.options.east.resizable = false;
                innerLayout.options.east.closable = false
            }
            var $evtTabTitle = $("#tabs>ul").children(":eq(1)");
            if ($.propertyPanel.panelType() === "view") {
                $evtTabTitle.hide()
            } else {
                $evtTabTitle.show()
            }
            $.propertyPanel.display(function () {
                var autoScroll = innerLayout.options.east.onresize_end;
                if ($.isFunction(autoScroll)) {
                    setTimeout(function () {
                        autoScroll()
                    }, 300)
                }
            })
        }, forceLayout: function () {

            var force = $.topology.layout.force;
            var w;
            w = $.MsgWindow({
                WindowId: "forceLayout-loadding",
                WindowTitle: "",
                WindowWidth: 280,
                WindowHeight: 80,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosable: true,
                WindowDraggable: true,
                contentBackground: "#fff",
                contentBorder: "none",
                showOverlay: true,
                overlayOpacity: 0.1,
                content: $("<div/>").attr("id", "load_container").css("text-align", "center").css("font-size", "12px").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "forceLayout_infor").css("margin", "4px"))
            });
            $("#forceLayout_infor").html("正在初始化...");
            w.close();
            w = $.MsgWindow({
                WindowId: "forceLayout",
                WindowTitle: "力学布局",
                WindowWidth: 400,
                WindowHeight: 100,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                showOverlay: true,
                content: testPanelHtml["layout_force.html"]
            });
            var steps = {friction: 0.05, linkDistance: 1, linkStrength: 0.05, charge: 10, gravity: 0.05, theta: 0.05};
            $("#forceLayout-linkDistance").spinner({step: steps["linkDistance"]});
            $("#forceLayout-charge").spinner({step: steps["charge"]});
            initSettingValue();
            $("#forceLayout-cancel").button().click(function () {
                w.close()
            });
            $("#forceLayout-reset").button().click(function () {
                resetSettingValue()
            });
            $("#forceLayout-submit").button().click(function () {
                writeSettingValue();
                w.close();
                doForceLayout()
            });
            function initSettingValue() {
                $("friction,linkDistance,linkStrength,charge,gravity,theta".split(",")).each(function (i, v) {
                    if (v === "charge") {
                        var _charge = Number(force.getOption("charge"));
                        _charge = _charge > 0 ? -_charge : Math.abs(_charge);
                        $("#forceLayout-charge").val(_charge)
                    } else {
                        $("#forceLayout-" + v).val(force.getOption(v))
                    }
                })
            }

            function resetSettingValue() {
                force.resetSetting();
                initSettingValue()
            }

            function writeSettingValue() {
                $("friction,linkDistance,linkStrength,charge,gravity,theta".split(",")).each(function (i, v) {
                    var value = Number($("#forceLayout-" + v).val(), 10);
                    if (v === "charge") {
                        value = value > 0 ? -value : Math.abs(value)
                    }
                    force.setOption(v, value)
                })
            }

            function doForceLayout() {
                var $msgWindow = null;
                force.on("start", function () {
                    $msgWindow = $.MsgWindow({
                        WindowId: "forceLayout",
                        WindowTitle: "",
                        WindowWidth: 280,
                        WindowHeight: 80,
                        WindowResizable: false,
                        WindowMaximize: false,
                        WindowMinimize: false,
                        WindowClosable: true,
                        WindowDraggable: true,
                        contentBackground: "#fff",
                        contentBorder: "none",
                        showOverlay: true,
                        overlayOpacity: 0,
                        beforeWindowClose: function () {
                            force.stop()
                        },
                        content: $("<div/>").attr("id", "load_container").css("text-align", "center").css("font-size", "12px").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "forceLayout_infor").css("margin", "4px"))
                    });
                    $("#forceLayout_infor").html("请等待，正在进行力学布局...")
                });
                force.on("end", function () {
                    $msgWindow.close()
                });
                force.start()
            }
        }, treeLayoutTop: function () {
            $.topology.layout.tree.setOption("orientation", 0);
            $.lab.topo.treeLayout()
        }, treeLayoutRight: function () {
            $.topology.layout.tree.setOption("orientation", 2);
            $.lab.topo.treeLayout()
        }, treeLayoutBottom: function () {
            $.topology.layout.tree.setOption("orientation", 1);
            $.lab.topo.treeLayout()
        }, treeLayoutLeft: function () {
            $.topology.layout.tree.setOption("orientation", 3);
            $.lab.topo.treeLayout()
        }, treeLayout: function () {
            var root;
            var contextObj = $.topology.contextObj;
            if (contextObj) {
                root = contextObj
            } else {
                if ($.topology.selector.focus()) {
                    root = $.topology.selector.focus()
                }
            }
            if (root && root.parent) {
                root = root.parent
            }
            if (!$.topology.isSymbol(root) && !$.topology.isContainer(root)) {
                return
            }
            var tree = $.topology.layout.tree;
            var w;
            w = $.MsgWindow({
                WindowId: "treeLayout-loadding",
                WindowTitle: "",
                WindowWidth: 280,
                WindowHeight: 80,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosable: true,
                WindowDraggable: true,
                contentBackground: "#fff",
                contentBorder: "none",
                showOverlay: true,
                overlayOpacity: 0.1,
                content: $("<div/>").attr("id", "load_container").css("text-align", "center").css("font-size", "12px").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "treeLayout_infor").css("margin", "4px"))
            });
            $("#treeLayout_infor").html("正在初始化...");
            w.close();
            w = $.MsgWindow({
                WindowId: "treeLayout",
                WindowTitle: "树形布局",
                WindowWidth: 400,
                WindowHeight: 160,
                WindowResizable: false,
                WindowMaximize: false,
                WindowMinimize: false,
                WindowClosableByEsc: true,
                showOverlay: true,
                content: testPanelHtml["layout_tree.html"]
            });
            var steps = {levelDistance: 5, siblingDistance: 5, subtreeDistance: 5};
            for (var k in steps) {
                $("#treeLayout-" + k).spinner({step: steps[k]})
            }
            initSettingValue();
            $("#treeLayout-cancel").button().click(function () {
                w.close()
            });
            $("#treeLayout-reset").button().click(function () {
                resetSettingValue()
            });
            $("#treeLayout-submit").button().click(function () {
                writeSettingValue();
                w.close();
                doLayout()
            });
            function initSettingValue() {
                $("orientation,levelDistance,siblingDistance,subtreeDistance".split(",")).each(function (i, v) {
                    $("#treeLayout-" + v).val(tree.getOption(v))
                })
            }

            function resetSettingValue() {
                tree.resetSetting();
                initSettingValue()
            }

            function writeSettingValue() {
                $("orientation,levelDistance,siblingDistance,subtreeDistance".split(",")).each(function (i, v) {
                    var value = Number($("#treeLayout-" + v).val(), 10);
                    tree.setOption(v, value)
                })
            }

            function doLayout() {
                tree.root(root);
                tree.start()
            }
        }, collapseAllContainer: function () {
            var s = $.topology.shapes;
            for (var id in s.containers) {
                var container = s.containers[id];
                if (container.isExpand) {
                    container.collapse()
                }
            }
        }, collapseAllLineseter: function () {
            var s = $.topology.shapes;
            for (var id in s.lineseters) {
                var lineseter = s.lineseters[id];
                if (lineseter.isExpand) {
                    lineseter.collapse()
                }
            }
        }, drawStraightLine: function () {
            var $topology = $.topology, selector = $topology.selector, symbols = selector.symbols(), symbolsLength = symbols.length, dl = $topology.graphEngine.drawStraightLine;
            if (selector.size() == 1 && symbolsLength == 1) {
                dl.init($topology);
                var from = selector.focus();
                if ($topology.isSymbol(from)) {
                    dl.start();
                    dl.setFromNode(from)
                }
            } else {
                if (selector.size() == 2 && symbolsLength == 2) {
                    dl.init($topology);
                    var from = selector.focus();
                    if ($topology.isSymbol(from)) {
                        dl.start();
                        dl.setFromNode(from);
                        var toid = from.id == symbols[0] ? symbols[1] : symbols[0];
                        var to = $topology.find(toid);
                        if ($topology.isSymbol(to)) {
                            dl.setToNode(to)
                        }
                    }
                }
            }
        }, moveSelected: function (dx, dy) {
            var $topo = $.topology, nodeIds = [].concat($topo.selector.symbols()).concat($topo.selector.containers()), nodes = [];
            if (!nodeIds.length) {
                return
            }
            dx = Number(dx, 10);
            dy = Number(dy, 10);
            var node;
            for (var i = 0; i < nodeIds.length; i++) {
                node = $topo.find(nodeIds[i], "symbol|container");
                node && nodes.push(node)
            }
            var viewBox = $topo.view.getViewBox();
            var nodesBbox = getNodesMaxBBox(nodes);
            if (nodesBbox.minX + dx < viewBox.x) {
                dx = viewBox.x - nodesBbox.minX
            } else {
                if (nodesBbox.maxX + dx > viewBox.x + viewBox.width) {
                    dx = viewBox.x + viewBox.width - nodesBbox.maxX
                }
            }
            if (nodesBbox.minY + dy < viewBox.y) {
                dy = viewBox.y - nodesBbox.minY
            } else {
                if (nodesBbox.maxY + dy > viewBox.y + viewBox.height) {
                    dy = viewBox.y + viewBox.height - nodesBbox.maxY
                }
            }
            $topo.view.moveNodes(nodes, dx, dy);
            $topo.view.moveNodesStop(nodes);
            $topo.selector.refresh();
            function getNodesMaxBBox(nodes) {
                var bbox, bboxs = [], o;
                for (var i = 0; i < nodes.length; i++) {
                    o = nodes[i];
                    bbox = $.extend({}, o.getBBox());
                    if (o.parent) {
                        var parentPadding = o.parent.getExpandPadding();
                        bbox.minX -= parentPadding.left;
                        bbox.minY -= parentPadding.top;
                        bbox.maxX += parentPadding.right;
                        bbox.maxY += parentPadding.bottom
                    }
                    bboxs.push(bbox)
                }
                return $topo.getMaxBBox(bboxs)
            }
        }, horiLeftAlign: function () {
            $.lab.topo._horiAlign("left")
        }, horiCenterAlign: function () {
            $.lab.topo._horiAlign("center")
        }, horiRightAlign: function () {
            $.lab.topo._horiAlign("right")
        }, vertTopAlign: function () {
            $.lab.topo._vertAlign("top")
        }, vertMiddleAlign: function () {
            $.lab.topo._vertAlign("middle")
        }, vertBottomAlign: function () {
            $.lab.topo._vertAlign("bottom")
        }, _horiAlign: function (type) {
            var $topo = $.topology, $selector = $topo.selector, $ge = $topo.graphEngine, $animation = $ge.animation, selectedSymbols = $selector.symbols(), selectedContainers = $selector.containers(), focus = $selector.focus(), isSymbolFocus = $topo.isSymbol(focus), baseX = 0, dur = 400, lineseterExpandMap = {};
            switch (type) {
                case"left":
                    if (isSymbolFocus) {
                        baseX = focus.x
                    } else {
                        baseX = focus.isExpand ? focus.expandX : focus.x
                    }
                    break;
                case"center":
                    if (isSymbolFocus) {
                        baseX = focus.x + parseInt(focus.style["icon-width"]) / 2
                    } else {
                        baseX = focus.isExpand ? (focus.expandX + focus.expandWidth / 2) : (focus.x + parseInt(focus.style["icon-width"]) / 2)
                    }
                    break;
                case"right":
                    if (isSymbolFocus) {
                        baseX = focus.x + parseInt(focus.style["icon-width"])
                    } else {
                        baseX = focus.isExpand ? (focus.expandX + focus.expandWidth) : (focus.x + parseInt(focus.style["icon-width"]))
                    }
                    break
            }
            var symbol = null, container = null, i = 0, len = 0, x = 0, offsetX = 0;
            for (i = 0, len = selectedSymbols.length; i < len; i++) {
                if (selectedSymbols[i] === focus.id) {
                    continue
                }
                symbol = $topo.find(selectedSymbols[i], "symbol");
                collapseSymbolLineseter(symbol);
                if (type === "left") {
                    x = baseX
                } else {
                    if (type === "center") {
                        x = baseX - parseInt(symbol.style["icon-width"]) / 2
                    } else {
                        if (type === "right") {
                            x = baseX - parseInt(symbol.style["icon-width"])
                        }
                    }
                }
                offsetX = x - symbol.x;
                $animation.move(symbol, offsetX, 0, dur)
            }
            for (i = 0, len = selectedContainers.length; i < len; i++) {
                if (selectedContainers[i] === focus.id) {
                    continue
                }
                container = $topo.find(selectedContainers[i], "container");
                if (container.isExpand) {
                    var children = container.children;
                    for (var sid in children) {
                        var child = children[sid];
                        collapseSymbolLineseter(child)
                    }
                }
                if (type === "left") {
                    x = baseX
                } else {
                    if (type === "center") {
                        x = baseX - (container.isExpand ? container.expandWidth : parseInt(container.style["icon-width"])) / 2
                    } else {
                        if (type === "right") {
                            x = baseX - (container.isExpand ? container.expandWidth : parseInt(container.style["icon-width"]))
                        }
                    }
                }
                offsetX = x - (container.isExpand ? container.expandX : container.x);
                $animation.move(container, offsetX, 0, dur)
            }
            var lazy = true;
            var majorVer = Number($.browser.version.split(".")[0]);
            if ($.browser.msie && (majorVer <= 8)) {
                lazy = false
            }
            if (lazy) {
                var reExpandLazy = 200 * (selectedSymbols.length + selectedContainers.length);
                setTimeout(function () {
                    if (lineseterExpandMap) {
                        for (var lid in lineseterExpandMap) {
                            o = $topo.find(lid);
                            if (!o) {
                                continue
                            }
                            o.expand()
                        }
                    }
                }, (reExpandLazy < 1000 ? 1200 : reExpandLazy))
            }
            $topo.graphEngine.selector.resize();
            function collapseSymbolLineseter(symbol) {
                if (!symbol) {
                    return
                }
                lines = symbol.lines;
                for (var k in lines) {
                    line = lines[k];
                    if (line.state == 1 && $.topology.isLineseter(line)) {
                        if (line.isExpand) {
                            lineseterExpandMap[line.id] = line.isExpand;
                            line.collapse()
                        }
                    }
                }
            }
        }, _vertAlign: function (type) {
            var $topo = $.topology, $selector = $topo.selector, $ge = $topo.graphEngine, $animation = $ge.animation, selectedSymbols = $selector.symbols(), selectedContainers = $selector.containers(), focus = $selector.focus(), isSymbolFocus = $topo.isSymbol(focus), baseY = 0, dur = 400, lineseterExpandMap = {};
            switch (type) {
                case"top":
                    if (isSymbolFocus) {
                        baseY = focus.y
                    } else {
                        baseY = focus.isExpand ? focus.expandY : focus.y
                    }
                    break;
                case"middle":
                    if (isSymbolFocus) {
                        baseY = focus.y + parseInt(focus.style["icon-height"]) / 2
                    } else {
                        baseY = focus.isExpand ? (focus.expandY + focus.expandHeight / 2) : (focus.y + parseInt(focus.style["icon-height"]) / 2)
                    }
                    break;
                case"bottom":
                    if (isSymbolFocus) {
                        baseY = focus.y + parseInt(focus.style["icon-height"])
                    } else {
                        baseY = focus.isExpand ? (focus.expandY + focus.expandHeight) : (focus.y + parseInt(focus.style["icon-height"]))
                    }
                    break
            }
            var symbol = null, container = null, i = 0, len = 0, y = 0, offsetY = 0;
            for (i = 0, len = selectedSymbols.length; i < len; i++) {
                if (selectedSymbols[i] === focus.id) {
                    continue
                }
                symbol = $topo.find(selectedSymbols[i], "symbol");
                collapseSymbolLineseter(symbol);
                if (type === "top") {
                    y = baseY
                } else {
                    if (type === "middle") {
                        y = baseY - parseInt(symbol.style["icon-height"]) / 2
                    } else {
                        if (type === "bottom") {
                            y = baseY - parseInt(symbol.style["icon-height"])
                        }
                    }
                }
                offsetY = y - symbol.y;
                $animation.move(symbol, 0, offsetY, dur)
            }
            for (i = 0, len = selectedContainers.length; i < len; i++) {
                if (selectedContainers[i] === focus.id) {
                    continue
                }
                container = $topo.find(selectedContainers[i], "container");
                if (container.isExpand) {
                    var children = container.children;
                    for (var sid in children) {
                        var child = children[sid];
                        collapseSymbolLineseter(child)
                    }
                }
                if (type === "top") {
                    y = baseY
                } else {
                    if (type === "middle") {
                        y = baseY - (container.isExpand ? container.expandHeight : parseInt(container.style["icon-height"])) / 2
                    } else {
                        if (type === "bottom") {
                            y = baseY - (container.isExpand ? container.expandHeight : parseInt(container.style["icon-height"]))
                        }
                    }
                }
                offsetY = y - (container.isExpand ? container.expandY : container.y);
                $animation.move(container, 0, offsetY, dur)
            }
            var lazy = true;
            var majorVer = Number($.browser.version.split(".")[0]);
            if ($.browser.msie && (majorVer <= 8)) {
                lazy = false
            }
            if (lazy) {
                var reExpandLazy = 200 * (selectedSymbols.length + selectedContainers.length);
                setTimeout(function () {
                    if (lineseterExpandMap) {
                        for (var lid in lineseterExpandMap) {
                            o = $topo.find(lid);
                            if (!o) {
                                continue
                            }
                            o.expand()
                        }
                    }
                }, (reExpandLazy < 1000 ? 1200 : reExpandLazy))
            }
            $topo.graphEngine.selector.resize();
            function collapseSymbolLineseter(symbol) {
                if (!symbol) {
                    return
                }
                lines = symbol.lines;
                for (var k in lines) {
                    line = lines[k];
                    if (line.state == 1 && $.topology.isLineseter(line)) {
                        if (line.isExpand) {
                            lineseterExpandMap[line.id] = line.isExpand;
                            line.collapse()
                        }
                    }
                }
            }
        }, horiDistribute: function () {
            var $topo = $.topology, $selector = $topo.selector, $ge = $topo.graphEngine, $animation = $ge.animation, element = null, elements = [], ids = [].concat($selector.symbols()).concat($selector.containers()), minX = 0, maxX = 0, sizeX = 0, spaceX = 0, addX = 0, offsetX = 0, usedSpace = 0, dur = 400, lineseterExpandMap = {};
            for (var i = 0, len = ids.length; i < len; i++) {
                element = $topo.find(ids[i], "symbol|container");
                if ($topo.isSymbol(element)) {
                    collapseSymbolLineseter(element)
                } else {
                    if (element.isExpand) {
                        var children = element.children;
                        for (var sid in children) {
                            var child = children[sid];
                            collapseSymbolLineseter(child)
                        }
                    }
                }
                usedSpace += parseInt(element.style["icon-width"]);
                elements.push(element)
            }
            elements.sort(function (a, b) {
                return (a.x - b.x)
            });
            minX = elements[0].x;
            maxX = elements[elements.length - 1].x + parseInt(elements[elements.length - 1].style["icon-width"]);
            sizeX = maxX - minX;
            spaceX = parseInt((sizeX - usedSpace) / (elements.length - 1));
            addX = minX;
            for (var i = 0, len = elements.length; i < len; i++) {
                addX += i === 0 ? 0 : spaceX;
                offsetX = addX - elements[i].x;
                addX += parseInt(elements[i].style["icon-width"]);
                $animation.move(elements[i], offsetX, 0, dur)
            }
            var lazy = true;
            var majorVer = Number($.browser.version.split(".")[0]);
            if ($.browser.msie && (majorVer <= 8)) {
                lazy = false
            }
            if (lazy) {
                var reExpandLazy = 200 * ids.length;
                setTimeout(function () {
                    if (lineseterExpandMap) {
                        for (var lid in lineseterExpandMap) {
                            o = $topo.find(lid);
                            if (!o) {
                                continue
                            }
                            o.expand()
                        }
                    }
                }, (reExpandLazy < 1000 ? 1200 : reExpandLazy))
            }
            $topo.graphEngine.selector.resize();
            function collapseSymbolLineseter(symbol) {
                if (!symbol) {
                    return
                }
                lines = symbol.lines;
                for (var k in lines) {
                    line = lines[k];
                    if (line.state == 1 && $.topology.isLineseter(line)) {
                        if (line.isExpand) {
                            lineseterExpandMap[line.id] = line.isExpand;
                            line.collapse()
                        }
                    }
                }
            }
        }, vertDistribute: function () {
            var $topo = $.topology, $selector = $topo.selector, $ge = $topo.graphEngine, $animation = $ge.animation, element = null, elements = [], ids = [].concat($selector.symbols()).concat($selector.containers()), minY = 0, maxY = 0, sizeY = 0, spaceY = 0, addY = 0, offsetY = 0, usedSpace = 0, dur = 400, lineseterExpandMap = {};
            for (var i = 0, len = ids.length; i < len; i++) {
                element = $topo.find(ids[i], "symbol|container");
                if ($topo.isSymbol(element)) {
                    collapseSymbolLineseter(element)
                } else {
                    if (element.isExpand) {
                        var children = element.children;
                        for (var sid in children) {
                            var child = children[sid];
                            collapseSymbolLineseter(child)
                        }
                    }
                }
                usedSpace += parseInt(element.style["icon-height"]);
                elements.push(element)
            }
            elements.sort(function (a, b) {
                return (a.y - b.y)
            });
            minY = elements[0].y;
            maxY = elements[elements.length - 1].y + parseInt(elements[elements.length - 1].style["icon-height"]);
            sizeY = maxY - minY;
            spaceY = parseInt((sizeY - usedSpace) / (elements.length - 1));
            addY = minY;
            for (var i = 0, len = elements.length; i < len; i++) {
                addY += i === 0 ? 0 : spaceY;
                offsetY = addY - elements[i].y;
                addY += parseInt(elements[i].style["icon-height"]);
                $animation.move(elements[i], 0, offsetY, dur)
            }
            var lazy = true;
            var majorVer = Number($.browser.version.split(".")[0]);
            if ($.browser.msie && (majorVer <= 8)) {
                lazy = false
            }
            if (lazy) {
                var reExpandLazy = 200 * ids.length;
                setTimeout(function () {
                    if (lineseterExpandMap) {
                        for (var lid in lineseterExpandMap) {
                            o = $topo.find(lid);
                            if (!o) {
                                continue
                            }
                            o.expand()
                        }
                    }
                }, (reExpandLazy < 1000 ? 1200 : reExpandLazy))
            }
            $topo.graphEngine.selector.resize();
            function collapseSymbolLineseter(symbol) {
                if (!symbol) {
                    return
                }
                lines = symbol.lines;
                for (var k in lines) {
                    line = lines[k];
                    if (line.state == 1 && $.topology.isLineseter(line)) {
                        if (line.isExpand) {
                            lineseterExpandMap[line.id] = line.isExpand;
                            line.collapse()
                        }
                    }
                }
            }
        }, rightAnglePolyLine: function () {
            var $selector = $.topology.selector, $ge = $.topology.graphEngine, element = null, ids = [].concat($selector.lines()).concat($selector.lineseters());
            for (var i = 0, len = ids.length; i < len; i++) {
                element = $.topology.find(ids[i], "line|lineseter");
                element.rightAngle().changePath();
                element.change()
            }
        }, viewPositionReset: function () {
            var view = $.topology.view, scale = view.scale(), bbox = view.getBBox(), width = bbox.width, height = bbox.height;
            view.scale(scale, -width / 2, -height / 2, true)
        }, viewOrigiZoom: function () {
            $.topology.view.origiZoom()
        }, viewFitToCanvas: function () {
            $.topology.view.fitToCanvas()
        }, viewZoomIn: function () {
            var view = $.topology.view, scale = view.scale(), width = view.getContainerWidth(), height = view.getContainerHeight(), zoomStep = 1.2;
            view.scale(scale * zoomStep, width / 2, height / 2)
        }, viewZoomOut: function () {
            var view = $.topology.view, scale = view.scale(), width = view.getContainerWidth(), height = view.getContainerHeight(), zoomStep = 1.2;
            view.scale(scale / zoomStep, width / 2, height / 2)
        }, viewRefresh: function () {
        }, viewNameReflush: function (viewName) {
            var $title = $("#topoTitle"), $container = $title.parent().parent(), view = $.topology.view, style = view && view.style, $ge = $.topology.graphEngine, viewOpts = $ge && $ge.options && $ge.options.view, viewName = viewName != null ? viewName : (view && view.name);
            if (!style || !viewOpts) {
                return
            }
            var textDisplay = style ? style["text-display"] : viewOpts["text-display"];
            if (!$title.data("topoTitleInited")) {
                $title.data("topoTitleInited", true);
                $container.draggable({
                    distance: 3, containment: $("#svgCanvas"), stop: function () {
                        var $this = $(this), svgWidth = $("#svgCanvas").width(), left = $this.position().left;
                        $(this).data("titleLeft", left).data("svgWidth", svgWidth)
                    }
                })
            }
            if (textDisplay == "1") {
                $title.html(viewName);
                if ($container.is(":hidden")) {
                    $container.stop(true, false).css({top: "-30px"}).show().animate({top: "0px"}, 500, function () {
                        $(this).addClass("fixedTop")
                    })
                }
                var $svg = $("#svgCanvas"), titleLeft = $container.data("titleLeft"), svgWidth = $container.data("svgWidth"), left = 0;
                if (titleLeft != null && titleLeft != null) {
                    left = parseInt(titleLeft * $svg.width() / svgWidth)
                } else {
                    left = parseInt($svg.width() - $container.outerWidth()) / 2
                }
                left = left < 0 ? 0 : left;
                $container.css({left: left + "px"})
            } else {
                if ($container.is(":visible")) {
                    $container.stop(true, false).removeClass("fixedTop").animate({top: "-35px"}, 300, function () {
                        $(this).hide()
                    })
                }
            }
            return $title
        }
    });
    $.lab = new Laboratory()
})(jQuery);