$(document).ready(function () {
    var $msgWindow = null;
    var projectPath = $.project.path;
    var latestFindingId = 5;
    var queryParams = $.string.queryParams(window.location.search);
    function init() {
        $msgWindow = $.MsgWindow({
            WindowId: "loading",
            WindowTitle: "",
            WindowWidth: 280,
            WindowHeight: 80,
            WindowAdaptive: false,
            WindowResizable: false,
            WindowMaximize: false,
            WindowMinimize: false,
            WindowClosable: false,
            WindowDraggable: false,
            contentBackground: "#fff",
            contentBorder: "none",
            showOverlay: true,
            content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
        });
        initUI();
        initModel()
    }

    function initUI() {
        shieldContextMenu();
        $("#load_infor").html("请等待，正在加载页面结构...");
        initOuterLayout();
        initInnerLayout();
        $.lab.ui.layoutControl(queryParams);
        $("#load_infor").html("请等待，正在加载功能菜单...");
        $.topology.ui.navMenu = initNavmenu()
    }

    function initModel() { //初始化拓扑图类型
        var $topo = $.topology;
        if (!queryParams.type) {
            $msgWindow.close();
            $.jAlert({type: "warn", content: "未确定拓扑图类型，缺少地址栏参数！"});
            return
        } else {
            if (!$topo.config.global["topos"][queryParams.type] || !$topo.config.global["topos"][queryParams.type].usable) {
                $msgWindow.close();
                $.jAlert({type: "warn", content: "非法拓扑图类型，地址栏参数不支持！"});
                return
            }
        }
        if (!queryParams.id) {
            $msgWindow.close();
            $.jAlert({type: "warn", content: "缺少拓扑视图编号参数！"});
            return
        }
        $("#load_infor").html("请等待，正在初始化配置参数...");
        $topo.status = "EDIT";
        $topo.loadPluginConfig(queryParams.type);
        $topo.loadGraphConfig();
        $("#load_infor").html("请等待，正在初始化图形引擎...");
        $topo.graphEngine = new hy.topology.engine.SVGEngine();
        $topo.layout = hy.topology.layout;
        $topo.graphEngine.init("svgContainer", function () {
            validatePermission();
            $("#load_infor").html("请等待，正在加载属性面板...");
            $.propertyPanel.init({scope: queryParams.type});
            initTabsPanel();
            initHotKeys()
        });
        $($topo).on("selectElement", function (evt, o) {
            $.topology.ui.menuSwitch.alignmentlet();
            $.topology.ui.menuSwitch.distributelet()
        })
    }

    function validatePermission() {
        loadTopology()
    }

    function loadTopology() {
        $("#load_infor").html("请等待，正在加载并绘制拓扑图...");
        $.topology.loadTopo(queryParams.id, {
            success: function () {
                var viewType = $.topology.view.type;
                $("#load_infor").html("请等待，正在加载资源面板...");
                initReaourcePanel($.topology.view);
                $("#load_infor").html("请等待，正在加载资源搜索...");
                initResourceSearcher();
                $("#load_container").empty().append($("<table style='background: #fff'><tr><td class='success-content-frame' style='background: #fff'>" + "<div class='success-content'>拓扑图绘制完成" + "</div></td></tr></table>"));
                var _title = $.topology.config.global["topos"][viewType].label || "拓扑";
                _title += " " + $.topology.view.name + " 编辑";
                document.title = _title;
                setTimeout(function () {
                    $msgWindow.close()
                }, 1000)
            }, error: function (XMLHttpRequest, textStatus, errorThrown) {
                $msgWindow.close();
                showWarnDialog("加载拓扑图", XMLHttpRequest, textStatus)
            }
        })
    }

    function shieldContextMenu() {
        $(document).bind("contextmenu", function (e) {
            return false
        })
    }

    function screenMaximum() {
        if (window.screen) {
            window.moveTo(0, 0);
            window.resizeTo(screen.availWidth, screen.availHeight)
        }
    }

    function initOuterLayout() {
        var $layoutNorthPane = $(".ui-layout-north");
        var outerLayoutSettings = {
            name: "layout",
            defaults: {
                size: "auto",
                minSize: 35,
                paneClass: "ui-layout-pane",
                resizerClass: "ui-layout-resizer",
                togglerClass: "toggler",
                buttonClass: "button",
                contentSelector: ".content",
                contentIgnoreSelector: "span",
                spacing_open: 5,
                togglerLength_open: 35,
                togglerLength_closed: 35,
                hideTogglerOnSlide: true,
                togglerTip_open: "关闭",
                togglerTip_closed: "打开",
                resizerTip: "",
                fxName: "slide",
                fxSpeed_open: 750,
                fxSpeed_close: 1000,
                fxSettings_open: {easing: "easeInQuint"},
                fxSettings_close: {easing: "easeOutQuint"},
                enableCursorHotkey: false
            },
            north: {
                size: 35, togglerLength_closed: -1, resizable: false, slidable: false, onclose_start: function () {
                    $layoutNorthPane.css("position", "absolute")
                }, onclose_end: function () {
                    $layoutNorthPane.css("position", "static");
                    try {
                        $("#accordion").accordion("refresh")
                    } catch (e) {
                    }
                }, onopen_start: function () {
                    $layoutNorthPane.css("position", "absolute")
                }, onopen_end: function () {
                    $layoutNorthPane.css("position", "static");
                    try {
                        $("#accordion").accordion("refresh")
                    } catch (e) {
                    }
                }, onresize_end: function () {
                    setTimeout(function () {
                        try {
                            $("#accordion").accordion("refresh")
                        } catch (e) {
                        }
                    }, 200)
                }, fxSpeed_open: 500, fxSpeed_close: 500
            },
            center: {paneSelector: ".ui-layout-center", minWidth: 200, minHeight: 200}
        };
        var outerLayout = $("body").layout(outerLayoutSettings);
        outerLayout.sizePane("north", 40);
        $.topology.ui.outerLayout = outerLayout
    }

    function initInnerLayout() {
        var innerLayoutSettings = {
            name: "layout",
            defaults: {
                size: "auto",
                minSize: 35,
                paneClass: "ui-layout-pane",
                resizerClass: "ui-layout-resizer",
                togglerClass: "toggler",
                buttonClass: "button",
                contentSelector: ".content",
                contentIgnoreSelector: "span",
                spacing_open: 5,
                togglerLength_open: 35,
                togglerLength_closed: 35,
                hideTogglerOnSlide: true,
                togglerTip_open: "关闭",
                togglerTip_closed: "打开",
                resizerTip: "",
                fxName: "slide",
                fxSpeed_open: 750,
                fxSpeed_close: 1500,
                fxSettings_open: {easing: "easeInQuint"},
                fxSettings_close: {easing: "easeOutQuint"},
                enableCursorHotkey: false
            },
            west: {
                paneSelector: ".ui-layout-west",
                size: 199,
                slidable: false,
                slideTrigger_open: "mouseover",
                initClosed: false
            },
            east: {
                paneSelector: ".ui-layout-east",
                size: 199,
                spacing_closed: -1,
                togglerLength_closed: 0,
                togglerLength_open: 0,
                initClosed: true,
                slidable: false,
                closable: true,
                resizable: false,
                slideTrigger_close: "click",
                onresize_end: function () {
                    var $tabs = $("#tabs"), $ul = $tabs.children("ul"), $panel = $("#property_panel").css({
                        overflowX: "",
                        overflowY: "",
                        height: ""
                    });
                    var ch = $tabs.height() - $ul.height();
                    var ph = $panel.outerHeight();
                    if (ph > ch) {
                        $panel.css({overflowX: "hidden", overflowY: "auto", height: ch - (ph - $panel.height()) - 10});
                        $.topology.ui.innerLayout.sizePane("east", 286)
                    } else {
                        $.topology.ui.innerLayout.sizePane("east", 268)
                    }
                },
                onopen_start: function () {
                    var $overlay = $("#svgCanvasOverlay"), showOverlay = function () {
                        $overlay.css({left: "100%"}).show().animate({left: "0%"}, 500)
                    };
                    if ($overlay.is(".overlay4tip")) {
                        $overlay.trigger("click");
                        setTimeout(showOverlay, 500)
                    } else {
                        showOverlay()
                    }
                },
                onclose_start: function () {
                    $("#svgCanvasOverlay").css({left: "0%"}).animate({left: "100%"}, 750, function () {
                        $(this).hide()
                    })
                },
                fxSpeed_open: 500,
                fxSpeed_close: 1200,
                fxSettings_open: {easing: null}
            },
            center: {
                paneSelector: ".ui-layout-svg", minWidth: 200, minHeight: 200, onresize_end: function () {
                    $.lab.topo.viewNameReflush()
                }
            }
        };
        var innerLayout = $(".ui-layout-center").layout(innerLayoutSettings);
        innerLayout.sizePane("west", 200);
        innerLayout.sizePane("east", 268);
        $.topology.ui.innerLayout = innerLayout
    }

    function initNavmenu() {
        return $(".ui-layout-north").css("position", "static").navmenu({menu: testData.config.navmenu4edit})
    }

    function initResourceSearcher() {
        $("#resourceSearcher").addClass("gray").val("网元搜索 已禁用").unbind().bind("focus", function () {
            var $this = $(this);
            if ($this.is(".gray")) {
                $this.removeClass("gray").val("")
            }
        }).bind("blur", function () {
            var $this = $(this);
            if ($this.val() === "") {
                $this.addClass("gray").val("网元搜索")
            }
        }).bind("keypress", function (e) {
            var value = $(this).val();
            if (e && (e.keyCode === 13)) {
                stopSearch = false;
                $overlay.css("opacity", 0).show().animate({opacity: _opacity}, 100, function () {
                    $tipArea.show();
                    searchResource(value)
                })
            }
        }).attr("disabled", "true")
    }

    function getIconByObjectClass(objectClass) {
        objectClass = objectClass + "";
        var g, icon = null, path = null, width = null, height = null, icons = arguments.callee.icons;
        if (!icons) {
            icons = {};
            arguments.callee.icons = icons
        }
        icon = icons[objectClass];
        if (!icon && $.topology && $.topology.config) {
            g = $.topology.config.graph[objectClass];
            if (g && (g.type === "ICON")) {
                path = g.icon;
                width = g.width;
                height = g.height;
                if (path) {
                    path = "icon/" + path.replace(/\.svg/i, ".gif");
                    icon = {path: path, width: width || 32, height: height || 32};
                    icons[objectClass] = icon
                }
            }
        }
        if (!icon) {
            icon = {path: "images/status/help.png", width: 32, height: 32};
            icons[objectClass] = icon
        }
        return icon
    }

    function initReaourcePanel(view) {
        var viewType = view.type;
        switch (viewType) {
            case 2:
                break;
            default:
                initCommonReaourcePanel();
                break
        }
    }

    function initCommonReaourcePanel() {
        var $accordion = $("#accordion"), data = _accordions(), itemPrefix = "resource_partitioning_", treePrefix = itemPrefix + "tree_";
        var itemId, panelId, item, $ztree;
        for (var i = 0; i < data.length; i++) {
            panelId = data[i].id;
            itemId = itemPrefix + panelId;
            item = addAccordionItem(itemId, data[i].text);
            $ztree = $("<ul class='ztree'/>").attr("id", treePrefix + panelId).appendTo(item.content);
            item.title.data("panelId", panelId);
            item.title.data("ztree", $ztree);
            item.title.click(function () {//编辑点击事件
                var $this = $(this), panelId = $this.data("panelId"), callback = function () {
                    $.topology.ui.trees.focus = $.topology.ui.trees[panelId]
                };
                if (!$this.data("zTreeInited")) {
                    $this.data("zTreeInited", true);
                    initRootNode($this.data("ztree"), panelId, callback)
                } else {
                    callback()
                }
            });
            if (i === 0) {
                item.title.trigger("click")
            }
            if (panelId == latestFindingId) {
                item.title.addClass("lastestFindingPanel")
            }
        }
        $accordion.accordion({heightStyle: "fill"});
        function addAccordionItem(id, title) {
            var $title = $("<h3>" + title + "</h3>");
            var $content = $("<div/>").attr("id", id);
            $accordion.append($title).append($content);
            return {title: $title, content: $content}
        }

        function initRootNode($element, panelId, callback) {
            if (panelId == 2) {
                return
            }
            if (!$.topology.ui.trees) {
                $.topology.ui.trees = {}
            }
            console.log("data>>"+testData["resourceNodes"]);
            $.topology.ui.trees[panelId] = $.fn.zTree.init($element, {
                data: {simpleData: {enable: true}, key: {title: "title"}},
                check: {enable: true, autoCheckTrigger: true},
                callback: {
                    beforeDrag: function (treeId, treeNodes) {
                        //TODO
                       // console.log(treeNodes);
                        //资源拖放判断已有面板中是否已有此资源
                        var shapes = $.topology.shapes, node, line;
                        for(var i in shapes.symbols){
                            if(treeNodes[0].id == shapes.symbols[i].objectId){
                                $.jAlert({
                                    type: "warn",
                                    content: "资源已存在！"
                                });
                                return;
                            }
                        }

                        if (treeNodes.length === 1) {
                            var treeNode = treeNodes[0], srcPos = {};
                            if (!treeNode.isParent) {
                                var objectClass = treeNode.object_class, $dragArea = $(".ui-layout-center"), $svgArea = $("#svgCanvas"), icon = getIconByObjectClass(objectClass);
                                $dragArea.children(".dragging-node-icon").each(function () {
                                    $(this).remove()
                                });
                                var $dragIcon = $("<img/>").attr("src", icon.path).addClass("dragging-node-icon").appendTo($dragArea);
                                var mvEntName = "mousemove.dragging-treenode", muEntName = "mouseup.drop-treenode";
                                $dragArea.bind(mvEntName, function (e) {
                                    var offset = $dragArea.offset();
                                    $dragIcon.css({left: e.pageX - offset.left + 5, top: e.pageY - offset.top + 5});
                                    if (!srcPos.init) {
                                        srcPos.init = true;
                                        srcPos.x = $dragIcon.css("left");
                                        srcPos.y = $dragIcon.css("top")
                                    }
                                    if ($dragIcon.is(":hidden")) {
                                        $dragIcon.show()
                                    }
                                });
                                $svgArea.bind(muEntName, function (e) {
                                    $svgArea.unbind(muEntName);
                                    $dragArea.unbind(mvEntName);
                                    if ($dragIcon.is(":visible")) {
                                        if (dropTreeNode(treeNode, e.pageX, e.pageY)) {
                                            $dragIcon.hide().remove()
                                        }
                                    }
                                });
                                $(document).unbind(muEntName).bind(muEntName, function (e) {
                                    $(document).unbind(muEntName);
                                    $dragArea.unbind(mvEntName);
                                    if ($dragIcon.is(":visible")) {
                                        if (srcPos.init) {
                                            $dragIcon.animate({left: srcPos.x, top: srcPos.y}, 500, function () {
                                                srcPos.init = false;
                                                $dragIcon.hide().remove()
                                            })
                                        } else {
                                            $dragIcon.hide().remove()
                                        }
                                    } else {
                                        $dragIcon.hide().remove()
                                    }
                                })
                            }
                        }
                        return false
                    }, onClick: function (event, treeId, treeNode, clickFlag) {
                        $.fn.zTree.getZTreeObj(treeId).checkNode(treeNode, !treeNode.checked, true, true)
                    }, onCheck: function (event, treeId, treeNode) {
                        if (!treeNode.zAsync) {
                            $.fn.zTree.getZTreeObj(treeId).reAsyncChildNodes(treeNode, "refresh", false)
                        }
                    }, onNodeCreated: function (event, treeId, treeNode) {
                        var parentNode = treeNode.getParentNode();
                        if (parentNode && parentNode.checked) {
                            var zTree = $.fn.zTree.getZTreeObj(treeId);
                            zTree.checkNode(treeNode, true, true, true)
                        }
                        if (treeNode.isLastNode) {
                            var asyncCache = $element.data("asyncCacheData");
                            var selectCallback = asyncCache && asyncCache[parentNode.tId];
                            if ($.isFunction(selectCallback)) {
                                selectCallback()
                            }
                        }
                    }
                },
                edit: {
                    drag: {prev: false, next: false, inner: false},
                    enable: true,
                    showRemoveBtn: false,
                    showRenameBtn: false
                }
            }, testData.resourceNodes);
            if ($.isFunction(callback)) {
                callback()
            }
        }
    }

    function initTabsPanel() {
        var $tabs = $("#tabs");
        var $ul = $("<ul/>").appendTo($tabs);
        addTabsItem("property_panel", "属性").content.propertyPanel({panelTypes: ["container", "line", "symbol", "view", "multiContainer", "multiLine", "multiNode", "multiSymbol"]}).bind("scroll", function () {
            $.jvalidate.adaptive()
        });
        addTabsItem("alarm_panel", "告警").content.propertyPanel({panelTypes: ["event", "multiEvent"]});
        $.extend($.propertyPanel, {
            afterApply: null, afterSubmit: function () {
                closeLayoutPanel()
            }, afterCancel: function () {
                closeLayoutPanel()
            }
        });
        $tabs.tabs();
        function addTabsItem(id, title) {
            var $title = $("<li><a href='#" + id + "'>" + title + "</a></li>");
            var $content = $("<div/>").attr("id", id);
            $ul.append($title);
            $tabs.append($content);
            return {title: $title, content: $content}
        }

        function closeLayoutPanel() {
            var innerLayout = $.topology.ui.innerLayout;
            innerLayout.options.east.closable = true;
            innerLayout.slideClose("east");
            innerLayout.options.east.closable = false
        }
    }

    function _accordions() {
        return testData.config.panel
    }

    function dropTreeNode(treeNode, x, y) {
        return dragNode2Canvas(treeNode, x, y);
        function dragNode2Canvas(treeNode, x, y) {
            if (arguments.length != 3) {
                return false
            }
            var coords = $.topology.graphEngine.canvas.coordinateConvert.page2Canvas(x, y);
            var cx = coords.x, cy = coords.y;
            var vp = $.topology.graphEngine.canvas.viewport();
            if (cx < vp.x || cx > vp.x + vp.width || cy < vp.y || cy > vp.y + vp.height) {
                return false
            }
            var data = $.lab.topo.treeNode2SymbolData(treeNode);
            $.extend(data, {"x": cx, "y": cy, "parentId": -1});
            var symbol = $.topology.createSymbol(data);
            symbol.add();
            symbol.edgeDetect();
            var containers = $.topology.shapes.containers, nodeBbox;
            for (var k in containers) {
                o = containers[k];
                nodeBbox = o.getBBox();
                if (cx >= nodeBbox.minX && cx <= nodeBbox.maxX && cy >= nodeBbox.minY && cy <= nodeBbox.maxY) {
                    o.addChild(symbol, true);
                    o.edgeDetect();
                    o.change();
                    break
                }
            }
            var symbols = [];
            symbols.push(symbol);
            $.topology.selector.select(symbol.id);
            return true
        }
    }

    function initHotKeys() {
        var keys = [{key: "Alt+Ctrl+W", fn: $.lab.direct.gotoMain}, {
            key: "Ctrl+A",
            fn: $.lab.topo.selectAllNodes
        }, {key: "Ctrl+Shift+A", fn: $.lab.topo.selectElemtByCondition}, {
            key: "Ctrl+X", fn: function () {
            }
        }, {key: "Ctrl+C", fn: $.lab.topo.copySelectedElement}, {
            key: "Ctrl+V",
            fn: $.lab.topo.pasteElementInCenter
        }, {key: "del", fn: $.lab.topo.deleteElement}, {
            key: "Ctrl+Z", fn: function () {
            }
        }, {
            key: "Ctrl+Y", fn: function () {
            }
        }, {key: ["Ctrl+E", true], fn: $.lab.topo.propertyPanel}, {
            key: "Left", fn: function () {
                $.lab.topo.moveSelected(-1, 0)
            }
        }, {
            key: "Up", fn: function () {
                $.lab.topo.moveSelected(0, -1)
            }
        }, {
            key: "Right", fn: function () {
                $.lab.topo.moveSelected(1, 0)
            }
        }, {
            key: "Down", fn: function () {
                $.lab.topo.moveSelected(0, 1)
            }
        }, {
            key: "Shift+Left", fn: function () {
                $.lab.topo.moveSelected(-10, 0)
            }
        }, {
            key: "Shift+Up", fn: function () {
                $.lab.topo.moveSelected(0, -10)
            }
        }, {
            key: "Shift+Right", fn: function () {
                $.lab.topo.moveSelected(10, 0)
            }
        }, {
            key: "Shift+Down", fn: function () {
                $.lab.topo.moveSelected(0, 10)
            }
        }, {
            key: "Ctrl+Left", fn: function () {
                $.topology.ui.innerLayout.toggle("west")
            }
        }, {
            key: "Ctrl+Right", fn: function () {
                $.topology.ui.innerLayout.state.east.isClosed ? $.lab.topo.propertyPanel() : $.propertyPanel.afterCancel()
            }
        }, {
            key: "Ctrl+Up", fn: function () {
                $.topology.ui.outerLayout.toggle("north")
            }
        }, {
            key: "Ctrl+Down", fn: function () {
            }
        }, {key: "Alt+Ctrl+T", fn: $.lab.topo.vertTopAlign}, {
            key: "Alt+Ctrl+M",
            fn: $.lab.topo.vertMiddleAlign
        }, {key: "Alt+Ctrl+B", fn: $.lab.topo.vertBottomAlign}, {
            key: "Alt+Ctrl+L",
            fn: $.lab.topo.horiLeftAlign
        }, {key: "Alt+Ctrl+C", fn: $.lab.topo.horiCenterAlign}, {key: "Alt+Ctrl+R", fn: $.lab.topo.horiRightAlign}];
        $.each(keys, function (i, opts) {
            var key, fn = opts.fn, pd = false;
            if ($.isArray(opts.key)) {
                key = opts.key[0];
                if (opts.key.length > 1) {
                    pd = opts.key[1]
                }
            } else {
                key = opts.key
            }
            bindKeyDown(key, fn, pd)
        });
        function bindKeyDown(key, fn, pd) {
            jQuery(document).bind("keydown", key, function (e) {
                if (pd) {
                    e.preventDefault()
                }
                fn();
                return false
            })
        }
    }

    function showWarnDialog(info, xhr, status) {
        $.jAlert({type: "warn", content: xhr ? $.converter.requestError(xhr, status) + " [" + info + "]" : info})
    }

    $(document).ready(init)
});