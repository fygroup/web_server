$(document).ready(function () {
    var $msgWindow = null;
    var projectPath = $.project.path;
    var displayMode = queryParams.display == "1";
    function init() {
        $msgWindow = $.MsgWindow({
            WindowId: "loading",
            WindowTitle: "",
            WindowWidth: 280,
            WindowHeight: 80,
            WindowAdaptive: false,
            WindowResizable: false,
            WindowMaximize: false,
            WindowMinimize: false,
            WindowClosable: false,
            WindowDraggable: false,
            contentBackground: "#fff",
            contentBorder: "none",
            showOverlay: true,
            content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
        });
        initUI();
        initModel()
        // var _views = testData.views;
        // if (_views.length > 0) {
        //     initModel()
        // } else {
        //     openAddView()
        // }
    }

    function initUI() {
        shieldContextMenu();
        $("#load_infor").html("请等待，正在加载页面结构...");
        initOuterLayout();
        initInnerLayout();
        if (displayMode) {
            queryParams.layout = "none"
        }
        $.lab.ui.layoutControl(queryParams);
        $("#load_infor").html("请等待，正在加载功能菜单...");
        $.topology.ui.navMenu = initNavmenu();
        $("#load_infor").html("请等待，正在加载转换器配置...");
        initConverterConfig();
        $.topology.ui.eagleEye = new EagleEye()
    }

    function initModel() {
        var $topo = $.topology;
        queryParams.type = !queryParams.type ? 1 : queryParams.type;
        if (!queryParams.type) {
            $msgWindow.close();
            $.jAlert({type: "warn", content: "未确定拓扑图类型，缺少地址栏参数！"});
            return
        } else {
            if (!$topo.config.global["topos"][queryParams.type] || !$topo.config.global["topos"][queryParams.type].usable) {
                $msgWindow.close();
                $.jAlert({type: "warn", content: "非法拓扑图类型，地址栏参数不支持！"});
                return
            }
        }
        $("#load_infor").html("请等待，正在初始化配置参数...");
        $topo.status = "SHOW";
        $topo.loadPluginConfig(queryParams.type);
        $topo.config.global["screen_adapter"] = (queryParams.fill && queryParams.fill == 1) ? "fill" : "auto";
        if (window.self != window.top) {
            $.topology.config.global["popup_window"] = "1"
        }
        $topo.loadViews({
            success: function () {
                if (!$.svg._support) {
                    $msgWindow.close();
                    if ($.browser.msie) {
                        $.jAlert({
                            type: "warn",
                            content: "您目前使用的ie浏览器无法正常浏览图形！" + '请您<a href="tools/SVGView.exe">下载</a>并安装插件。'
                        })
                    } else {
                        $.jAlert({type: "warn", content: "您目前使用的浏览器并不是标准内核，不支持图形显示！" + "建议您使用ie、chrome或firefox等主流浏览器。"})
                    }
                } else {
                    var _views = getViewsByTypeAndHidden(queryParams.type, false);
                    if (_views.length > 0) {
                        initNavTree(_views);
                        $("#load_infor").html("请等待，正在初始化图形引擎...");
                        $topo.graphEngine = new hy.topology.engine.SVGEngine();
                        $topo.graphEngine.init("svgContainer", function () {
                            if (queryParams && queryParams.id != null) {
                                getUserDefaultView(queryParams.id)
                            } else {
                                getUserDefaultView(getNavTree().getNodes()[0].id)
                            }
                            initHotKeys()
                        })
                    } else {
                        initNavTree(_views);
                        openAddView();
                        initHotKeys();
                        $msgWindow.close();
                    }
                }
            }
        });
        $($topo).on("selectElement", function () {
            $.topology.ui.AlarmTable.selectElementEvents();
            $.topology.ui.tooltip4hang.selectElementEvents()
        })
    }

    function reset(viewId) {
        var $topo = $.topology, vid = arguments.length === 0 ? $topo.view.id : viewId;
        if ($topo.xhrPool.kpiXhr) {
            $topo.xhrPool.kpiXhr.abort()
        }
        if ($topo.xhrPool.eventXhr) {
            $topo.xhrPool.eventXhr.abort()
        }
        if ($topo.xhrPool.searchXhr) {
            $topo.xhrPool.searchXhr.abort()
        }
        $topo.floator.clear();
        $topo.ui.eagleEye.reset();
        $topo.ui.tooltip4hang.reset();
        if ($topo.ui.AlarmTable.activeAlarm) {
            $topo.ui.AlarmTable.activeAlarm.clear()
        }
        $.MsgWindow.closeAll();
        $msgWindow = $.MsgWindow({
            WindowId: "loading",
            WindowTitle: "",
            WindowWidth: 280,
            WindowHeight: 80,
            WindowResizable: false,
            WindowMaximize: false,
            WindowMinimize: false,
            WindowClosable: false,
            WindowDraggable: false,
            contentBackground: "#fff",
            contentBorder: "none",
            showOverlay: true,
            content: $("<div/>").attr("id", "load_container").append($("<img/>").attr("src", "images/load/load_bar.gif").css("margin", "14px")).append($("<div/>").attr("id", "load_infor").css("margin", "4px")).css("text-align", "center").css("font-size", "12px")
        });
        $("#load_infor").html("请等待，正在初始化图形引擎...");
        $topo.reset(function () {
            loadTopology(vid)
        })
    }

    $.lab.topo.viewRefresh = reset;
    function getUserDefaultView(def) {
        $("#load_infor").html("请等待，正在为您加载默认资源...");
        var _type = queryParams && queryParams.type ? queryParams.type : 1;
        getNavTree();
        if (def) {
            loadTopology(def)
        } else {
            loadTopology(8685)
        }
    }

    function loadTopology(vid) {
        $("#load_infor").html("请等待，正在加载并绘制拓扑图...");
        // var id = arguments.length === 0 ? queryParams.id : vid;
        var id = queryParams.id;
        $.topology.loadTopo(id, {
            success: function () {
                if ($.topology.view.id == 654) {
                    $.topology.ui.navMenu.navmenu("setDisabled", "4", false)
                }
                var viewType = $.topology.view.type;
                $("#load_infor").html("请等待，正在加载导航树资源...");
                reloadTreeResource();
                $("#load_infor").html("请等待，正在加载资源搜索...");
                initResourceSearcher();
                $("#load_infor").html("请等待，正在加载上下文配置...");
                $.topology.loadContextConfig($.topology.getAllObjectClass());
                $("#load_infor").html("请等待，正在加载指标配置...");
                $.topology.loadKpiConfig(viewType);
                $("#load_infor").html("请等待，正在加载Tooltip配置...");
                $.topology.ui.tooltip4hang.init();
                $.topology.ui.tooltip.init();
                $("#load_container").empty().append($("<table><tr><td class='success-content-frame'>" + "<div class='success-content'>拓扑图绘制完成！" + "</div></td></tr></table>"));
                var _title = $.topology.config.global["topos"][viewType].label || "拓扑";
                _title += " " + $.topology.view.name + " 展示";
                document.title = _title;
                $.topology.ui.eagleEye.init();
                $("#load_infor").html("请等待，正在加载告警表格...");
                setTimeout(function () {
                    $msgWindow.close()
                }, 1000);


                loadEvents();
                loadKpis();
                setInterval(function () {
                      twenkling();
                }, 300);
            }
        })
    }

    //更新告警信息的数据来源？
    function twenkling() {
        var exceptionIds = testData.event[viewId].symbolEventIds;
        $("<div/>").attr("id", "twenklingContainer").insertAfter("#svgContainer").css("position","absolute");
        var insertHtmlTwenk = "";
        for( var i in exceptionIds){
            var test = [0.1,1,];
            var opacity = test[Math.floor(Math.random()*test.length)];
            $("#"+i).css("opacity",opacity);
           //  var svgContainerHeight = Number($("#svgContainer").height());
           //  var svgContainerWidth = Number($("#svgContainer").width());
           //  var xs = Number($("#" +i).attr("x"));
           //  var ys = Number($("#" +i).attr("y"));
           //  var insertHtml="<image x='" + xs + "' y = '60' id='"+ i +"' src='"+ctxStaticTopo +"/common/images/twenk.gif' width='20' style='position: absolute;top:-"+ ys +"px;right:-"+ xs +"px;z-index: 9999'></image>";
           //  insertHtmlTwenk += insertHtml;
          //  $("#block_"+i).insertAfter("<g></g>");
        }
    }

    function loadEvents() {
        var winName = "eventLoadErrorWindow";
        $.topology.loadEvent(null, {
            success: function () {
                var $msg = $.MsgWindow.get(winName);
                $msg && $.isFunction($msg.close) && $msg.close();
                $.topology.ui.tooltip.data({event: true});
                $.topology.ui.tooltip4hang.data({event: true})
            }, complete: function () {
                var tables = $.topology.ui.AlarmTable.tables;
                for (var pId in tables) {
                    tables[pId].reload()
                }
            }
        })
    }

    function loadKpis() {
        var winName = "kpiLoadErrorWindow";
        $.topology.loadKpi({
            success: function () {
                var $msg = $.MsgWindow.get(winName);
                $msg && $.isFunction($msg.close) && $msg.close();
                if ($.topology.view.type == 1) {
                    $.lab.itsm.linkWeight()
                }
                $.topology.ui.tooltip.data({kpi: true});
                $.topology.ui.tooltip4hang.data({kpi: true});
                resetTreeResourceTitle()
            }
        })
    }

    function getViewsByTypeAndHidden(type, hidden) {
        var _views = [], datas = $.topology.views;
        for (var id in datas) {
            if (type == datas[id].type && hidden == datas[id].isHidden) {
                _views.push(datas[id])
            }
        }
        return _views.sort(function (a, b) {
            return a.name.localeCompare(b.name)
        }).sort(function (a, b) {
            return (parseInt(a.orderCode) - parseInt(b.orderCode))
        })
    }

    function shieldContextMenu() {
        $(document).bind("contextmenu", function (e) {
            return false
        })
    }

    function screenMaximum() {
        if (window.screen) {
            window.moveTo(0, 0);
            window.resizeTo(screen.availWidth, screen.availHeight)
        }
    }

    function initOuterLayout() {
        var $layoutNorthPane = $(".ui-layout-north");
        var outerLayoutSettings = {
            name: "outerLayout",
            defaults: {
                size: "auto",
                minSize: 40,
                paneClass: "ui-layout-pane" + (displayMode ? "-display" : ""),
                resizerClass: "ui-layout-resizer",
                togglerClass: "toggler",
                buttonClass: "button",
                contentSelector: ".content",
                contentIgnoreSelector: "span",
                spacing_open: 5,
                spacing_closed: displayMode ? -1 : 5,
                togglerLength_open: 35,
                togglerLength_closed: 35,
                hideTogglerOnSlide: true,
                togglerTip_open: "关闭",
                togglerTip_closed: "打开1",
                resizerTip: "",
                fxName: "slide",
                fxSpeed_open: 750,
                fxSpeed_close: 1000,
                fxSettings_open: {easing: "easeInQuint"},
                fxSettings_close: {easing: "easeOutQuint"},
                initHidden: displayMode ? true : false,
                enableCursorHotkey: false
            },
            north: {
                paneSelector: ".ui-layout-north",
                size: 35,
                togglerLength_closed: -1,
                resizable: false,
                slidable: false,
                onclose_start: function () {
                    $layoutNorthPane.css("position", "absolute")
                },
                onclose_end: function () {
                    $layoutNorthPane.css("position", "static")
                },
                onopen_start: function () {
                    $layoutNorthPane.css("position", "absolute")
                },
                onopen_end: function () {
                    $layoutNorthPane.css("position", "static")
                },
                fxSpeed_open: 500,
                fxSpeed_close: 500
            },
            west: {
                paneSelector: ".ui-layout-west",
                size: 199,
                slideTrigger_open: "mouseover",
                initClosed: false,
                onclose_start: function () {
                    var $relRsPanel = $("#relViewRsPanelCover");
                    if ($relRsPanel.is(".relViewRsResizable")) {
                        $relRsPanel.hide()
                    }
                },
                onopen_end: function () {
                    var $relRsPanel = $("#relViewRsPanelCover");
                    if ($relRsPanel.is(".relViewRsResizable")) {
                        $relRsPanel.show()
                    }
                }
            },
            center: {paneSelector: ".ui-layout-center", minWidth: 200, minHeight: 200}
        };
        var outerLayout = $("body").layout(outerLayoutSettings);
        outerLayout.sizePane("north", 40);
        outerLayout.sizePane("west", 200);
        $.topology.ui.outerLayout = outerLayout
    }

    function initInnerLayout() {
        var innerLayoutSettings = {
            name: "innerLayout",
            defaults: {
                size: "auto",
                minSize: 40,
                paneClass: "ui-layout-pane" + (displayMode ? "-display" : ""),
                resizerClass: "ui-layout-resizer",
                togglerClass: "toggler",
                buttonClass: "button",
                contentSelector: ".content",
                contentIgnoreSelector: "span",
                spacing_open: 5,
                spacing_closed: displayMode ? -1 : 5,
                togglerLength_open: 35,
                togglerLength_closed: 35,
                hideTogglerOnSlide: true,
                togglerTip_open: "关闭",
                togglerTip_closed: "打开0",
                resizerTip: "",
                fxName: "slide",
                fxSpeed_open: 750,
                fxSpeed_close: 1500,
                fxSettings_open: {easing: "easeInQuint"},
                fxSettings_close: {easing: "easeOutQuint"},
                initHidden: displayMode ? true : false,
                enableCursorHotkey: false
            },
            south: {
                paneSelector: ".ui-layout-alarm",
                size: 159,
                togglerLength_closed: -1,
                togglerAlign_closed: "center",
                slideTrigger_open: "mouseover",
                initClosed: false,
                onresize_end: function () {
                    var $container = $("#alarmTableContainer"), size = innerLayout.state.south.size;
                    if (size) {
                        $container.find(".dataTables_scrollBody").height(size - 82)
                    }
                    if ($.topology.ui.AlarmTable.activeAlarm) {
                        $.topology.ui.AlarmTable.activeAlarm.$alarmTable.fnAdjustColumnSizing()
                    }
                }
            },
            center: {
                paneSelector: ".ui-layout-svg", minWidth: 200, minHeight: 200, onresize_end: function () {
                    $.lab.topo.viewNameReflush()
                }
            }
        };
        var innerLayout = $(".ui-layout-center").layout(innerLayoutSettings);
        innerLayout.sizePane("south", 160);
        $.topology.ui.innerLayout = innerLayout
    }

    function initNavmenu() {
        return $(".ui-layout-north").css("position", "static").navmenu({menu: testData.config.navmenu4show})
    }

    function initNavTree(viewData) {
        var $ztree = $("<ul/>").addClass("ztree").attr("id", "navZTree").appendTo($("<div/>").attr("id", "navZTreeContainer").appendTo("#treeArea")), $treeFooter = $("<div/>").attr("id", "treeAreaFooter").appendTo($("#treeArea").siblings(".footer")), zTreeObj = null, zTreeStore = {
            viewNodes: null,
            dragNodeMess: null,
            orderChange: false,
            editDataToServer: {
                deleteViews: null,
                symbolRelViews: null,
                viewRels: null,
                viewNames: null,
                viewOrders: null,
                editViewId:null,
                editViewName:null
            },
            thumbnailRecord: null,
            resourceBaseInfo: null,
            allViewNames: null
        }, lockToEditTree = function () {
            var $body = $("body"), $overlay = $("#treeHighlightOverlay").stop(true, true);
            $body.children(".ui-layout-north").css("position", "relative");
            $body.children(".ui-layout-west").addClass("hightlight");
            $body.children(".ui-layout-resizer-west").addClass("hightlight");
            $overlay.fadeIn(500)
        }, unLockToDisplayTree = function () {
            $("#treeHighlightOverlay").stop(true, true).delay(500).fadeOut(500, function () {
                var $body = $("body");
                $body.children(".ui-layout-north").css("position", "static");
                $body.children(".ui-layout-west").removeClass("hightlight");
                $body.children(".ui-layout-resizer-west").removeClass("hightlight")
            })
        }, initViewNames = function () {
        }, recoverTreeUI = function (callback) {
            $("#resourceSearcher").parent().slideDown(200, function () {
                $treeFooter.hide();
                var zTreeObj = getNavTree();
                $("#navZTreeContainer").css("overflowX", "");
                zTreeObj.setEditable(false);
                zTreeObj.setting.view.selectedMulti = true;
                hideRelResource();
                unLockToDisplayTree();
                if ($.isFunction(callback)) {
                    callback()
                }
            })
        }, $relPanelCover = $("#relViewRsPanelCover").resizable(), $relPanel = $("#relViewRsPanel"), $westLayout = $relPanelCover.parent(), relPanelStore = {
            status: "close",
            symbols: null
        }, loadRelSymbols = function (pid, callback, params) {
            var rs = relPanelStore.symbols[pid], fn = function (data) {
                if ($.isFunction(callback)) {
                    callback(data, $.extend({pid: pid}, params))
                }
            };
            if (rs) {
                fn(rs)
            } else {
                var $overlay = $relPanel.siblings(".layoutOverlay");
                $overlay.fadeIn("slow");
                $overlay.fadeOut("normal")
            }
        }, loadResourceTree = function (data, params) {
            var vid = params.vid, pid = params.pid, sid = params.sid, panelMark = vid + "-" + pid, lastPanelMark = arguments.callee.lastPanelMark;
            if (!params.forceLoad && panelMark === lastPanelMark) {
                return
            } else {
                arguments.callee.lastPanelMark = panelMark
            }
            var relZTreeId = "relViewRsTree", relZTree = $.fn.zTree.getZTreeObj(relZTreeId), attrHandle = function (data) {
                var i, o, relNodeId, dataCopy = [], excludeNodeIds = [], viewNode = zTreeObj.getNodeByParam("id", vid), parentViewNode = zTreeObj.getNodeByParam("id", pid), parentViewChildren = parentViewNode && parentViewNode.children;
                for (i = data.length - 1; i >= 0; i--) {
                    o = data[i];
                    if (!o._attrInited) {
                        o._attrInited = true;
                        if (o.type != 1) {
                            o.title = ""
                        }
                        o.nodeType = o.objectClass >= 100000 ? "bsmnode" : "node"
                    }
                }
                if (parentViewChildren) {
                    for (i = 0; i < parentViewChildren.length; i++) {
                        relNodeId = parentViewChildren[i].relSymbolId;
                        if (relNodeId && relNodeId > 0 && viewNode.relSymbolId != relNodeId) {
                            excludeNodeIds.push(relNodeId)
                        }
                    }
                }
                for (i = 0; i < data.length; i++) {
                    o = data[i];
                    if ($.inArray(o.id, excludeNodeIds) < 0) {
                        dataCopy.push(o)
                    }
                }
                return dataCopy
            };
            if (!relZTree) {
                var $ztree = $("<ul/>").addClass("ztree").attr("id", relZTreeId).appendTo($("<div/>").attr("id", relZTreeId + "Container").appendTo("#relViewRsPanel"));
                $ztree.data("vid", vid);
                relZTree = $.fn.zTree.init($ztree, {
                    data: {key: {title: "title"}},
                    check: {enable: true, chkStyle: "radio"},
                    callback: {
                        beforeCheck: function (treeId, treeNode) {
                            var chkNodes = relZTree.getCheckedNodes(true);
                            for (var i = 0; i < chkNodes.length; i++) {
                                if (chkNodes[i] !== treeNode) {
                                    relZTree.checkNode(chkNodes[i], false)
                                }
                            }
                        }, onCheck: function (event, treeId, treeNode) {
                            var vid = $ztree.data("vid");
                            if (treeNode.nodeType === "node" || treeNode.nodeType === "bsmnode") {
                                var viewRel = zTreeStore.editDataToServer.viewRels[vid], symbolRelViews = zTreeStore.editDataToServer.symbolRelViews;
                                if (!viewRel) {
                                    zTreeStore.editDataToServer.viewRels[vid] = viewRel = {parentId: treeNode.getParentNode().getParentNode().id}
                                }
                                viewRel.relSymbolId = treeNode.checked ? treeNode.id : -1;
                                zTreeObj.getNodeByParam("id", vid).relSymbolId = viewRel.relSymbolId;
                                for (var symbolId in symbolRelViews) {
                                    if (symbolRelViews[symbolId] == vid) {
                                        symbolRelViews[symbolId] = -1;
                                        break
                                    }
                                }
                                if (viewRel.relSymbolId > 0) {
                                    symbolRelViews[viewRel.relSymbolId] = vid
                                }
                            }
                        }, beforeClick: function (treeId, treeNode) {
                            return treeNode.level === 2
                        }, onClick: function (event, treeId, treeNode) {
                            relZTree.checkNode(treeNode, !treeNode.checked, true, true)
                        }
                    }
                }, null);
                thumbnailInit(relZTreeId)
            } else {
                $("#" + relZTreeId).data("vid", vid)
            }
            reloadZTree(relZTreeId, [{
                id: pid,
                name: zTreeStore.viewNodes[pid].name,
                nodeType: "view",
                iconSkin: "view",
                title: "",
                nocheck: true
            }]);
            relZTree.addNodes(relZTree.getNodeByParam("id", pid), _modelGroup(attrHandle(data)));
            relZTree.expandAll(true);
            var chkNode = relZTree.getNodeByParam("id", sid);
            if (chkNode) {
                relZTree.checkNode(chkNode, true);
                var viewRel = zTreeStore.editDataToServer.viewRels[vid];
                if (viewRel) {
                    zTreeObj.getNodeByParam("id", vid).relSymbolId = viewRel.relSymbolId = sid
                }
                zTreeStore.editDataToServer.symbolRelViews[sid] = vid
            }
        }, showRelResource = function (vid, pid, sid, forceLoad) {
            $relPanel.stop(true, true)
        }, hideRelResource = function () {
            if (relPanelStore.status === "close" && relPanelStore.status === "closing") {
                return
            }
            $relPanel.stop(true, false);
            relPanelStore.status = "closing";
            $relPanelCover.removeClass("relViewRsResizable");
            $relPanel.animate({left: "-105%"}, 500, function () {
                $(this).css({left: "-105%"});
                $relPanelCover.hide();
                $westLayout.removeClass("visibleRsTree");
                relPanelStore.status = "close"
            })
        }, thumbnailInit = function (zTreeId) {
            var $ztree = $("#" + zTreeId), zTreeObj = $.fn.zTree.getZTreeObj(zTreeId);
            $ztree.delegate("li>a", "mouseenter", function () {
                var $this = $(this), treeNodeId = $this.parent().attr("id"), treeNode = zTreeObj.getNodeByTId(treeNodeId), record = zTreeStore.thumbnailRecord;
                if (!treeNode || treeNode.nodeType !== "view") {
                    return
                }
                if (!record) {
                    zTreeStore.thumbnailRecord = record = {}
                }
                var id = treeNode.id, showThumbnail = function (image) {
                    if (!$.tooltip("existed", id)) {
                        var imgWidth = 180;
                        if (image) {
                            var imgHeight = parseInt(imgWidth * image.height / image.width + 0.5);
                            image.width = imgWidth;
                            image.height = imgHeight
                        }
                        $.tooltip({
                            id: id,
                            content: image,
                            width: imgWidth,
                            isInitHead: false,
                            showAnimateDelay: 500,
                            hideAnimateDelay: 200,
                            offsetX: 0,
                            offsetY: 0
                        })
                    }
                    var pos = $this.offset(), width = $this.outerWidth(), height = $this.outerHeight();
                    if ($this.data("mouseoverstatus")) {
                        var dstLeft = pos.left + width;
                        if (dstLeft > $.topology.ui.outerLayout.state.west.size) {
                            dstLeft = $.topology.ui.outerLayout.state.west.size
                        }
                        $.tooltip("show", id, {left: dstLeft + 30, top: pos.top + height});
                        $.tooltip("move", id, {left: dstLeft})
                    }
                };
                $this.data("mouseoverstatus", true);
                if (record[id]) {
                    showThumbnail()
                } else {
                    if (record[id] == null) {
                        var image = new Image();
                        image.onerror = function () {
                            record[id] = false;
                            treeNode.title = treeNode.name;
                            zTreeObj.updateNode(treeNode)
                        };
                        image.onload = function () {
                            record[id] = true;
                            showThumbnail(image)
                        };
                        image.src = "images/thumbnail/" + treeNode.id + ".png" + "?time=" + new Date().getTime()
                    }
                }
            }).delegate("li>a", "mouseleave", function () {
                var $this = $(this), treeNodeId = $this.parent().attr("id"), treeNode = zTreeObj.getNodeByTId(treeNodeId), id = treeNode.id, record = zTreeStore.thumbnailRecord;
                if (!treeNode || treeNode.nodeType !== "view") {
                    return
                }
                $this.removeData("mouseoverstatus");
                if (record && record[id] && $.tooltip("existed", id)) {
                    $.tooltip("hide", id)
                }
            })
        }, reloadTreeData = function () {
            $.topology.loadViews({
                success: function (textStatus, XMLHttpRequest) {
                    var _views = getViewsByTypeAndHidden(queryParams.type, false);
                    reloadNavTree(_views);
                    if (_views.length > 0) {
                        reloadTreeResource()
                    } else {
                        openAddView()
                    }
                }, error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $msgWindow.close();
                    showWarnDialog("图资源列表", XMLHttpRequest, textStatus)
                }
            })
        };
        
        $ztree.data("zTreeStore", zTreeStore);
        $.topology.ui.navTree = zTreeObj = $.fn.zTree.init($ztree, {
            data: {simpleData: {enable: true, pIdKey: "parentViewId"}, key: {title: "title"}},
            edit: {
                enable: false, drag: {
                    inner: function (treeId, nodes, targetNode) {
                        if (targetNode) {
                            var $a = $("#" + targetNode.tId).children("a:first");
                            return !$a.is(".removed")
                        }
                        return false
                    }
                }, removeTitle: function (treeId, treeNode) {
                    var $a = $("#" + treeNode.tId).children("a:first");
                    return $a.is(".removed") ? "恢复视图" : "删除视图"
                }, renameTitle: "修改视图名称", showRemoveBtn: true, showRenameBtn: true
            },
            callback: {
                beforeClick: function (treeId, treeNode) {
                    if (!treeNode) {
                        return false
                    }
                    if (treeNode.nodeType === "group") {
                        return false
                    } else {
                        return true
                    }
                }, onClick: function (e, treeId, treeNode) {
                    if (zTreeObj.setting.edit.enable) {
                        if (treeNode.nodeType === "view") {
                            var $a = $("#" + treeNode.tId).children("a:first");
                            if (treeNode.parentViewId && !$a.is(".removed") && (treeNode.parentViewId > 0)) {
                                showRelResource(treeNode.id, treeNode.parentViewId, treeNode.relSymbolId)
                            } else {
                                hideRelResource()
                            }
                        }
                    } else {
                        var ids = [];
                        $.each($.fn.zTree.getZTreeObj(treeId).getSelectedNodes(), function () {
                            if (this.nodeType === "node" || this.nodeType === "bsmnode") {
                                ids.push(this.id)
                            }
                        });
                        $.topology.focus(ids)
                    }
                }, beforeDblClick: function (treeId, treeNode) {
                        console.log(treeId);
                        console.log(treeNode);
                         reset(treeId);
                    // if (!treeNode || zTreeObj.setting.edit.enable) {
                    //     return false
                    // }
                    // if ((treeNode.nodeType === "view") && (getViewId() !== treeNode.id)) {
                    //     reset(treeNode.id)
                    // }
                }, beforeDrag: function (treeId, treeNodes) {
                    console.log("beforeDrag");
                    if (treeNodes.length > 0) {
                        var treeNode = treeNodes[0], $a = $("#" + treeNode.tId).children("a:first"), srcParent = treeNode.getParentNode();
                        if ($a.is(".removed")) {
                            return false
                        }
                        zTreeStore.dragNodeMess = {
                            targetId: treeNode.id,
                            srcParentId: srcParent ? srcParent.id : -1,
                            srcIndex: zTreeObj.getNodeIndex(treeNode)
                        }
                    }
                    return true
                }, onDrop: function (event, treeId, treeNodes) {
                    console.log("onDrag");
                    var dragNodeMess = zTreeStore.dragNodeMess;
                    if ((treeNodes.length > 0) && dragNodeMess && dragNodeMess.targetId) {
                        var treeNode = treeNodes[0], dstParent = treeNode.getParentNode(), dstParentId = dstParent ? dstParent.id : -1, dstIndex = zTreeObj.getNodeIndex(treeNode);
                        if ((treeNode.id === dragNodeMess.targetId) && (dragNodeMess.srcParentId != dstParentId || dragNodeMess.srcIndex != dstIndex)) {
                            zTreeStore.orderChange = true;
                            dragNodeMess.dstParentId = dstParentId;
                            dragNodeMess.dstIndex = dstIndex;
                            var viewRel = zTreeStore.editDataToServer.viewRels[treeNode.id], symbolRelViews = zTreeStore.editDataToServer.symbolRelViews;
                            if (!viewRel) {
                                zTreeStore.editDataToServer.viewRels[treeNode.id] = viewRel = {relSymbolId: -1}
                            }
                            viewRel.parentId = dstParentId;
                            if (dragNodeMess.srcParentId != dstParentId) {
                                if (treeNode.relSymbolId > 0) {
                                    symbolRelViews[treeNode.relSymbolId] = -1
                                }
                                treeNode.relSymbolId = viewRel.relSymbolId = -1
                            }
                            if (treeNode.parentViewId && (treeNode.parentViewId > 0)) {
                                showRelResource(treeNode.id, treeNode.parentViewId, treeNode.relSymbolId)
                            } else {
                                hideRelResource()
                            }
                        }
                        zTreeStore.dragNodeMess = null
                    }
                }, beforeRename: function (treeId, treeNode, newName, isCancel) {
                    console.log("beforeRename");
                    if (isCancel) {
                        return
                    }
                    newName = $.trim(newName);
                    var viewId = treeNode.id;
                    console.log(viewId);
                    console.log(newName);
                    console.log(zTreeStore.allViewNames);
                    if (newName.length === 0) {
                        zTreeObj.cancelEditName()
                    } else {
                        zTreeStore.editDataToServer.editViewId = viewId;
                        zTreeStore.editDataToServer.editViewName = newName;
                    }
                    return false
                }, beforeRemove: function (treeId, treeNode) {
                    console.log("beforeRemove");
                    var $a = $("#" + treeNode.tId).children("a:first");
                    if ($a.is(".removed")) {
                        $a.removeClass("removed");
                        var vid = treeNode.id, sid = treeNode.relSymbolId, pid = treeNode.parentViewId, viewRels = zTreeStore.editDataToServer.viewRels, symbolRelViews = zTreeStore.editDataToServer.symbolRelViews, deleteViews = zTreeStore.editDataToServer.deleteViews, parentNode = treeNode.getParentNode(), relPanelMark = parentNode && vid + "-" + parentNode.id, lastRelPanelMark = loadResourceTree.lastPanelMark, delViewIdx = $.inArray(vid, deleteViews);
                        zTreeStore.orderChange = true;
                        if (pid && relPanelMark === lastRelPanelMark) {
                            showRelResource(vid, pid, sid, true)
                        }
                        if (delViewIdx >= 0) {
                            deleteViews.splice(delViewIdx, 1)
                        }
                        viewRels[vid] = {parentId: pid || "-1", relSymbolId: sid};
                        if (sid > 0) {
                            symbolRelViews[sid] = vid
                        }
                    } else {
                        var children = treeNode.children || [], removeView = function () {
                            var vid = treeNode.id, sid = treeNode.relSymbolId, viewRels = zTreeStore.editDataToServer.viewRels, symbolRelViews = zTreeStore.editDataToServer.symbolRelViews, deleteViews = zTreeStore.editDataToServer.deleteViews, parentNode = treeNode.getParentNode(), relPanelMark = parentNode && vid + "-" + parentNode.id, lastRelPanelMark = loadResourceTree.lastPanelMark;
                            zTreeStore.orderChange = true;
                            if (relPanelMark === lastRelPanelMark) {
                                hideRelResource()
                            }
                            delete viewRels[vid];
                            if (sid > 0) {
                                treeNode.relSymbolId = symbolRelViews[sid] = -1
                            }
                            deleteViews.push(vid);
                            zTreeObj.removeChildNodes(treeNode);
                            if (children.length) {
                                zTreeObj.addNodes(null, children);
                                $.each(children, function () {
                                    var vid = this.id, sid = this.relSymbolId;
                                    if (!viewRels[vid]) {
                                        viewRels[vid] = {}
                                    }
                                    viewRels[vid].parentId = this.parentViewId = "-1";
                                    viewRels[vid].relSymbolId = -1;
                                    if (sid > 0) {
                                        symbolRelViews[sid] = -1
                                    }
                                    this.relSymbolId = "-1"
                                })
                            }
                        };
                        if (children.length) {
                            $.jConfirm({
                                showOverlay: true,
                                overlayOpacity: 0,
                                content: "您移除的视图存在子视图，若父视图被移除，子视图将作为顶级视图存在！",
                                callback: function (flag) {
                                    if (flag) {
                                        $a.addClass("removed");
                                        removeView()
                                    }
                                }
                            })
                        } else {
                            $a.addClass("removed");
                            removeView()
                        }
                    }
                    return false
                }
            }
        }, null);
        reloadNavTree(viewData);
        thumbnailInit("navZTree");
        $("<input/>").attr({//编辑拓扑图列表删除与修改名称
            id: "ensureTreeEditBtn",
            type: "button",
            value: "确定"
        }).appendTo($treeFooter).button().bind("click", function () {
             if(zTreeStore.editDataToServer.deleteViews==null){
                 window.location.href = ctx + "/topo";
                 return;
             }

            //console.log("ids");
            //console.log(zTreeStore.editDataToServer.deleteViews.toString());
            if(zTreeStore.editDataToServer.deleteViews.toString()){
                //TOPO删除逻辑
                $.ajax({
                    url: ctx + "/topoview/topoView/deleteTopoView",
                    type: "POST",
                    data: {"ids": zTreeStore.editDataToServer.deleteViews.toString()},
                    dataType: "json",
                    success: function (data, textStatus, XMLHttpRequest) {
                        recoverTreeUI(function () {
                            reloadTreeData();
                            zTreeStore.editDataToServer.deleteViews = null;
                            zTreeStore.editDataToServer.symbolRelViews = null;
                            zTreeStore.editDataToServer.viewRels = null;
                            zTreeStore.editDataToServer.viewNames = null;
                            zTreeStore.editDataToServer.viewOrders = null
                        });
                         window.location.reload();
                    }
                })
            } else if(zTreeStore.editDataToServer.editViewName && zTreeStore.editDataToServer.editViewId){
                //编辑名称
                $.ajax({
                    url: ctx + "/topoview/topoView/modifyTopoViewName",
                    type: "POST",
                    data: {"viewId":zTreeStore.editDataToServer.editViewId,"name":zTreeStore.editDataToServer.editViewName},
                    dataType: "json",
                    success: function (data, textStatus, XMLHttpRequest) {
                        console.log(data);
                        console.log(data.success);
                        if (!data.success) {
                            $.jAlert({type: "warn", content: data.msg});
                        } else {
                            // zTreeObj.cancelEditName(newName);
                            // zTreeStore.editDataToServer.viewNames[viewId] = newName;
                            // zTreeStore.allViewNames[viewId] = newName
                            // testData.view[zTreeStore.editDataToServer.editViewId].view.name = zTreeStore.editDataToServer.editViewName;
                            reloadTreeData();
                            zTreeStore.editDataToServer.deleteViews = null;
                            zTreeStore.editDataToServer.symbolRelViews = null;
                            zTreeStore.editDataToServer.viewRels = null;
                            zTreeStore.editDataToServer.viewNames = null;
                            zTreeStore.editDataToServer.viewOrders = null
                        }
                         window.location.reload();
                    },
                    error:function(){
                    }
                })
            }



        });
        $("<input/>").attr({
            id: "cancelTreeEditBtn",
            type: "button",
            value: "取消"
        }).appendTo($treeFooter).button().bind("click", function () {
            if(zTreeStore.editDataToServer.deleteViews==null){
                window.location.href = ctx + "/topo";
                return;
            }
            recoverTreeUI(function () {
                reloadTreeData();
                zTreeStore.editDataToServer.deleteViews = null;
                zTreeStore.editDataToServer.symbolRelViews = null;
                zTreeStore.editDataToServer.viewRels = null;
                zTreeStore.editDataToServer.viewNames = null;
                zTreeStore.editDataToServer.viewOrders = null
            })
        });
        $("#treeEditBtn").unbind().bind("click", function () {
            $treeFooter.show();
            $("#navZTreeContainer").css("overflowX", "hidden");
            lockToEditTree();
            $("#resourceSearcher").parent().slideUp(200, function () {
                var zTreeObj = getNavTree(), treeNode = zTreeObj.getNodeByParam("id", getViewId()), viewNodes = zTreeStore.viewNodes, viewNode = viewNodes[treeNode.id], children = treeNode.children, child = null, i = null;
                zTreeStore.resourceBaseInfo = {open: treeNode.open, nodes: []};
                if (children) {
                    for (i = children.length - 1; i >= 0; i--) {
                        child = children[i];
                        if (child.nodeType !== "view") {
                            zTreeStore.resourceBaseInfo.nodes.push(child);
                            zTreeObj.removeNode(child)
                        }
                    }
                }
                treeNode.name = viewNode.name;
                if (treeNode.title) {
                    treeNode.title = viewNode.name
                }
                zTreeObj.updateNode(treeNode);
                zTreeStore.orderChange = false;
                zTreeStore.editDataToServer.deleteViews = [];
                zTreeStore.editDataToServer.symbolRelViews = {};
                zTreeStore.editDataToServer.viewRels = {};
                zTreeStore.editDataToServer.viewNames = {};
                zTreeStore.editDataToServer.viewOrders = {};
                zTreeObj.cancelSelectedNode();
                zTreeObj.setEditable(true);
                zTreeObj.setting.view.selectedMulti = false;
                relPanelStore.symbols = {};
                initViewNames();
                delete loadResourceTree.lastPanelMark
            })
        })
    }

    function reloadNavTree(viewData) {
        var treeId = "navZTree", zTreeStore = $("#" + treeId).data("zTreeStore"), attrHandle = function (arr) {
            $.each(arr, function () {
                this.title = "";
                this.nodeType = this.iconSkin = "view"
            });
            return arr
        }, success = reloadZTree(treeId, attrHandle(viewData), null, "parentViewId");
        if (success) {
            zTreeStore.viewNodes = {};
            $.each(viewData, function () {
                zTreeStore.viewNodes[this.id] = this
            })
        } else {
            zTreeStore.viewNodes = null
        }
    }

    function getNavTree() {
        return $.fn.zTree.getZTreeObj("navZTree")
    }

    function reloadZTree(treeId, data, idKey, pIdKey) {
        idKey = idKey || "id";
        pIdKey = pIdKey || "pId";
        var zTreeObj = $.fn.zTree.getZTreeObj(treeId), children = zTreeObj.getNodes(), convertToTreeNode = function (arr) {
            var i, o, rootIds = [], mounted = {}, root = [], other = [], getObjectById = function (id) {
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i][idKey] == id) {
                        return arr[i]
                    }
                }
                return null
            }, mount = function (other) {
                var i, parent, o, remaining = [];
                for (i = 0; i < other.length;
                     i++) {
                    o = other[i];
                    parent = mounted[o[pIdKey]];
                    if (parent) {
                        if (!parent.children) {
                            parent.children = []
                        }
                        parent.children.push(o);
                        mounted[o[idKey]] = o
                    } else {
                        remaining.push(o)
                    }
                }
                if (remaining.length) {
                    arguments.callee(remaining)
                }
            };
            for (i = 0; i < arr.length; i++) {
                o = arr[i];
                if (($.inArray(o[pIdKey], rootIds) < 0) && !getObjectById(o[pIdKey])) {
                    rootIds.push(o[pIdKey])
                }
            }
            for (i = 0; i < arr.length; i++) {
                o = arr[i];
                if ($.inArray(o[pIdKey], rootIds) < 0) {
                    other.push(o)
                } else {
                    root.push(o);
                    mounted[o[idKey]] = o
                }
            }
            mount(other);
            return root
        };
        if (children && children.length > 0) {
            for (var i = children.length - 1; i >= 0; i--) {
                zTreeObj.removeNode(children[i])
            }
        }
        if (data) {
            zTreeObj.addNodes(null, convertToTreeNode(data))
        }
        return true
    }

    function openAddView() {
        $.jAlert({type: "warn", content: "暂无拓扑图"});
    }
    
    function reloadTreeResource() {
        var zTreeObj = getNavTree(), treeNode = zTreeObj.getNodeByParam("id", getViewId()), viewNodes = $("#navZTree").data("zTreeStore").viewNodes;
        $.each(viewNodes, function (idx, viewNode) {
            var i, treeNode = zTreeObj.getNodeByParam("id", viewNode.id);
            if (treeNode && treeNode.children && treeNode.nodeType === "view") {
                for (i = treeNode.children.length - 1; i >= 0; i--) {
                    if (treeNode.children[i].nodeType !== "view") {
                        zTreeObj.removeNode(treeNode.children[i])
                    }
                }
                treeNode.name = viewNode.name;
                if (treeNode.title) {
                    treeNode.title = viewNode.name
                }
                zTreeObj.updateNode(treeNode)
            }
        });
        if (treeNode) {
            zTreeObj.selectNode(treeNode);
            zTreeObj.expandNode(treeNode, true)
        } else {
            $("#load_infor").html("您访问的视图不存在或已被隐藏.");
            return false
        }
        var nodes = [], i, group, num, total = 0;
        $.each([$.topology.shapes.symbols, $.topology.shapes.lines], function (idx, coll) {
            for (var property in coll) {
                nodes.push(coll[property])
            }
        });
        nodes = _modelGroup(nodes);
        for (i = nodes.length - 1; i >= 0; i--) {
            group = nodes[i];
            console.log("group");
            console.log(group);
            if (group.objectClass == -1) {
                nodes.splice(i, 1)
            } else {
                num = group.children.length;
                total += num;
                group.name = group.title = group.name + " (" + num + "个)"
            }
        }
        zTreeObj.addNodes(treeNode, nodes);
        treeNode.name += " (" + total + "个)";
        resetTreeResourceTitle();
        zTreeObj.updateNode(treeNode);
        return true
    }

    function _modelGroup(arr) {
        var _callee = arguments.callee, groupNames = _callee.groupNames, resources = {}, unknowNameTypes = [], modelTypes = [], containerGroup = null, otherGroup = null, nodes = [];
        if (!groupNames) {
            groupNames = _callee.groupNames = {"4999": "其他", "9999": "容器"}
        }
        $.each(arr, function (idx, o) {
            var id = o.id, group = resources[o.objectClass], name = String.prototype.replace.call(o.name || "", /<br>/ig, " ");
            if (o.objectId && o.objectId > 0 && o.objectClass && o.objectClass > 0 && o.objectClass != 4999) {
                if (!group) {
                    resources[o.objectClass] = group = {
                        id: "oc_" + o.objectClass,
                        objectClass: o.objectClass,
                        drag: false,
                        nocheck: true,
                        nodeType: "group",
                        children: []
                    };
                    modelTypes.push(o.objectClass);
                    if (!groupNames[o.objectClass]) {
                        unknowNameTypes.push(o.objectClass)
                    }
                }
            } else {
                if (o.type == 1) {
                    if (!containerGroup) {
                        containerGroup = resources["9999"] = {
                            id: "oc_9999",
                            objectClass: 9999,
                            drag: false,
                            nocheck: true,
                            nodeType: "group",
                            children: []
                        }
                    }
                    group = containerGroup
                } else {
                    if (!otherGroup) {
                        otherGroup = resources["4999"] = {
                            id: "oc_4999",
                            objectClass: 4999,
                            drag: false,
                            nocheck: true,
                            nodeType: "group",
                            children: []
                        }
                    }
                    group = otherGroup
                }
            }
            var nodeType = o.objectClass >= 100000 ? "bsmnode" : "node";
            group.children.push({
                id: id,
                name: name,
                title: name,
                drag: false,
                nodeType: nodeType,
                iconSkin: nodeType + " n" + group.objectClass
            })
        });
        if (containerGroup) {
            modelTypes.push(containerGroup.objectClass)
        }
        if (otherGroup) {
            modelTypes.push(otherGroup.objectClass)
        }
        var unknowNameType, ocInfo, i;
        for (i = 0; i < unknowNameTypes.length; i++) {
            unknowNameType = unknowNameTypes[i];
            ocInfo = $.topology.getObjectClassInfo(unknowNameType);
            if (ocInfo && ocInfo.name) {
                groupNames[unknowNameType] = ocInfo.name
            } else {
                $.jAlert({type: "warn", content: "检查到未注册的资源类型[" + unknowNameType + "]！"});
                continue
            }
        }
        if (modelTypes.length > 0) {
            var i, group;
            for (i = 0; i < modelTypes.length; i++) {
                group = resources[modelTypes[i]];
                group.name = group.title = groupNames[group.objectClass];
                nodes.push(group)
            }
        }
        return nodes
    }

    function resetTreeResourceTitle() {
        var zTreeObj = getNavTree(), treeNode = zTreeObj.getNodeByParam("id", getViewId()), groups = treeNode && treeNode.children;
        if (groups) {
            var i, group, nodes, j, o, pers;
            for (i = 0; i < groups.length; i++) {
                group = groups[i];
                nodes = group.children;
                if (nodes) {
                    for (j = 0; j < nodes.length; j++) {
                        o = $.topology.find([nodes[j].id]);
                        pers = o && o.kpis;
                        if (pers && pers.IpAddr) {
                            nodes[j].title = pers.IpAddr;
                            zTreeObj.updateNode(nodes[j])
                        }
                    }
                }
            }
        }
    }

    function initResourceSearcher() {
        var _callee = arguments.callee, _opacity = _callee._opacity, $overlay = $("#resourceOverlay"), $tipArea = $("#resourceSearching"), stopSearch = false;
        if (!_callee._opacity) {
            _callee._opacity = _opacity = $overlay.css("opacity")
        }
        $("#stopSearchBtn").unbind().click(function () {
            stopSearch = true
        });
        $("#resourceSearcher").val("网元搜索").addClass("gray").unbind().bind("focus", function () {
            var $this = $(this);
            if ($this.is(".gray")) {
                $this.removeClass("gray").val("")
            }
        }).bind("blur", function () {
            var $this = $(this);
            if ($this.val() === "") {
                $this.addClass("gray").val("网元搜索")
            }
        }).bind("keypress", function (e) {
            var value = $(this).val();
            if (value && e && (e.keyCode === 13)) {
                stopSearch = false;
                $overlay.css("opacity", 0).show().animate({opacity: _opacity}, 100, function () {
                    $tipArea.show();
                    var zTreeObj = getNavTree(), treeNode = zTreeObj.getNodeByParam("id", getViewId()), getRegExp = function (arr) {
                        var escape = /[\\\^\$\*\+\?\{\}\.\(\)\|\[\]\-]/g;
                        $.each(arr, function (index, value) {
                            arr[index] = value.replace(escape, function (a) {
                                return "\\" + a
                            })
                        });
                        var expr = "^(?=[\\s\\S]*?" + arr.join(")(?=[\\s\\S]*?") + ")[\\s\\S]*$";
                        return new RegExp(expr, "i")
                    }, regexp = getRegExp(value.split(/\s+/)), nodes = zTreeObj.getNodesByFilter(function (node) {
                        if (!node.isParent) {
                            if (node.getParentNode().objectClass == 3006) {
                                var l = $.topology.find(node.id), s = l.srcNode, d = l.dstNode;
                                return regexp.test(node.name) || regexp.test(node.title) || regexp.test(s ? s.name : "") || regexp.test(s && s.kpis ? s.kpis.IpAddr : "") || regexp.test(d ? d.name : "") || regexp.test(d && d.kpis ? d.kpis.IpAddr : "")
                            } else {
                                return regexp.test(node.name) || regexp.test(node.title)
                            }
                        }
                    }, false, treeNode), ids = [], counter = 0;
                    zTreeObj.cancelSelectedNode();
                    setTimeout(function () {
                        if (stopSearch || (counter >= nodes.length)) {
                            $.topology.focus(ids);
                            $tipArea.hide();
                            $overlay.animate({opacity: 0}, 100, function () {
                                $(this).hide()
                            });
                            return false
                        }
                        var node = nodes[counter++];
                        zTreeObj.selectNode(node, true);
                        ids.push(node.id);
                        setTimeout(arguments.callee, 0)
                    }, 0)
                })
            }
        })
    }

    function initConverterConfig() {
        $.topology.ui.converterConfig = testData.config.convertor
    }

    function EagleEye() {//鹰眼图
        var eagleeye = {}, visible = false, boxDraging = false, isOpen = true, isLoadImage = false, viewSize = [0, 0], imageSize = [0, 0], imageOffset, boxBorder = [0, 0];
        var svgContainerId = "svgContainer", eagleEyeId = "eagleEye", eagleEyeHeaderId = "eagleEye-header", eagleEyeZoomId = "eagleEye-zoom", eagleEyeCloseId = "eagleEye-close", eagleEyeContentId = "eagleEye-content", eagleEyeThumbnailWrapId = "eagleEye-thumbnail-wrap", eagleEyeThumbnailId = "eagleEye-thumbnail";
        eagleEyeBoxId = "eagleEye-box";
        var $svgContainer = null, $eagleEye = null, $eagleEyeHeader = null, $eagleEyeZoom = null, $eagleEyeClose = null, $eagleEyeContent = null, $eagleEyeThumbnailWrap = null, $eagleEyeThumbnail = null, $eagleEyeBox = null;

        function initViewSize() {
            $eagleEyeContent.css({
                width: $eagleEye.width(),
                height: $eagleEye.height() - $eagleEyeHeader.outerHeight()
            });
            viewSize = [$eagleEyeContent.width(), $eagleEyeContent.height()]
        }

        function initEagleEyePosition() {
            $eagleEye.css({
                top: -$eagleEye.outerHeight() - 2,
                left: $svgContainer.width() - $eagleEye.outerWidth() - 15
            });
            boxBorder[0] = $eagleEyeBox.outerWidth() - $eagleEyeBox.width();
            boxBorder[1] = $eagleEyeBox.outerHeight() - $eagleEyeBox.height();
            updateImageOffset();
            updateBox()
        }

        function updateEagleEyePosition() {
            $eagleEye.css({top: -$eagleEye.outerHeight(), left: $svgContainer.width() - $eagleEye.outerWidth() - 15});
            updateImageOffset();
            updateBox()
        }

        function updateZoom() {
            var zoom = Math.floor($.topology.view.scale() * 100);
            $eagleEyeZoom.text("缩放至" + zoom + "%")
        }

        function setBoxSize(width, height) {
            $eagleEyeBox.css({width: width, height: height})
        }

        function updateBox() {
            if (boxDraging) {
                return
            }
            var bbox = $.topology.view.getBBox(), viewport = $.topology.view.viewport();
            if (!bbox || !viewport) {
                return
            }
            var x = 0, y = 0, width = 0, height = 0;
            x = imageSize[0] * viewport.x / bbox.width;
            y = imageSize[1] * viewport.y / bbox.height;
            if (x < 0) {
                x = 0
            }
            if (y < 0) {
                y = 0
            }
            x += imageOffset.left;
            y += imageOffset.top;
            width = viewport.width / bbox.width * imageSize[0];
            height = viewport.height / bbox.height * imageSize[1];
            width -= boxBorder[0];
            height -= boxBorder[1];
            if (width < 0) {
                width = 0
            }
            if (height < 0) {
                height = 0
            }
            setBoxSize(width, height);
            $eagleEyeBox.offset({left: x, top: y})
        }

        function updateViewport() {
            var boxOffset = $eagleEyeBox.offset(), bbox = $.topology.view.getBBox();
            var x = (boxOffset.left - imageOffset.left) / imageSize[0] * bbox.width, y = (boxOffset.top - imageOffset.top) / imageSize[1] * bbox.height, width = $eagleEyeBox.outerWidth() / imageSize[0] * bbox.width, height = $eagleEyeBox.outerHeight() / imageSize[1] * bbox.height;
            $.topology.view.viewport(x, y, width, height)
        }

        function bindEvents() {
            $eagleEye.draggable({
                handle: "#" + eagleEyeHeaderId,
                containment: "#" + svgContainerId,
                cancel: "#" + eagleEyeCloseId,
                scroll: false,
                drag: function (event, ui) {
                    updateImageOffset()
                },
                stop: function () {
                    updateImageOffset()
                }
            });
            $eagleEyeBox.draggable({
                containment: "#eagleEye-thumbnail", scroll: false, start: function () {
                    boxDraging = true
                }, drag: function (event, ui) {
                    updateViewport()
                }, stop: function () {
                    boxDraging = false
                }
            });
            $eagleEyeClose.button({icons: {primary: "ui-icon-close"}, text: false});
            $eagleEyeClose.click(function () {
                eagleeye.close()
            })
        }

        function initImage(image) {
            var scale = Math.min(viewSize[0] / image.width, viewSize[1] / image.height);
            imageSize = [image.width * scale, image.height * scale];
            image.width = imageSize[0];
            image.height = imageSize[1];
            $eagleEyeThumbnailWrap.html(image);
            $eagleEyeThumbnail = $("#" + eagleEyeThumbnailId);
            $eagleEyeThumbnailWrap.css({left: (viewSize[0] - imageSize[0]) / 2, top: (viewSize[1] - imageSize[1]) / 2});
            isLoadImage = true
        }

        function updateImageOffset() {
            imageOffset = $eagleEyeThumbnail.offset()
        }

        eagleeye.init = function () {
            isLoadImage = false;
            $svgContainer = $("#" + svgContainerId);
            $eagleEye = $("#" + eagleEyeId);
            $eagleEyeHeader = $("#" + eagleEyeHeaderId);
            $eagleEyeZoom = $("#" + eagleEyeZoomId);
            $eagleEyeClose = $("#" + eagleEyeCloseId);
            $eagleEyeContent = $("#" + eagleEyeContentId);
            $eagleEyeThumbnailWrap = $("#" + eagleEyeThumbnailWrapId);
            $eagleEyeBox = $("#" + eagleEyeBoxId);
            $eagleEye.disableSelection();
            bindEvents();
            $eagleEyeBox.css({opacity: 0.3});
            setBoxSize(0, 0);
            $eagleEyeZoom.empty();
            $eagleEyeThumbnailWrap.empty();
            eagleeye.hide();
            //加载缩略图，，
            eagleeye.loadImage({
                path: "images/thumbnail/" + getViewId() + ".png", success: function (image) {
                    initViewSize();
                    initImage(image);
                    if ($.topology.graphEngine.canvas.isMoveEnabled()) {
                        eagleeye.show(true);
                        updateZoom()
                    }
                    initEagleEyePosition();
                    eagleeye.bindContainerEvents();
                    $($.topology.graphEngine.canvas).on("change", function (evt, args) {
                        if ($.topology.graphEngine.canvas.isMoveEnabled()) {
                            if (isLoadImage) {
                                eagleeye.show(true);
                                updateBox()
                            }
                        } else {
                            eagleeye.hide(true)
                        }
                        updateZoom()
                    })
                }
            })
        };
        eagleeye.reset = function () {
            isLoadImage = false;
            eagleeye.hide();
            setBoxSize(0, 0);
            $eagleEyeZoom.empty();
            $eagleEyeThumbnailWrap.empty()
        };
        eagleeye.loadImage = function (options) {

            var image = new Image();
            image.id = eagleEyeThumbnailId;
            image.onerror = function () {
                options.success(image)
            };
            image.onload = function () {
                options.success(image)
            };

            image.src = dex + options.path + "?timestamp=" + new Date().getTime()
        };
        eagleeye.bindContainerEvents = function () {
            if ($svgContainer.attr("eagleeye-event")) {
                return
            }
            $svgContainer.attr("eagleeye-event", "true");
            $svgContainer.resize(function () {
                updateEagleEyePosition()
            })
        };
        eagleeye.open = function () {
            isOpen = true;
            eagleeye.show(true)
        };
        eagleeye.close = function () {
            isOpen = false;
            eagleeye.hide(true)
        };
        eagleeye.show = function (animate) {
            if (!isOpen || !isLoadImage) {
                return
            }
            if (!visible) {
                visible = true;
                if (animate && !($.browser.msie && Number($.browser.version.split(".")[0]) <= 8)) {
                    $eagleEye.stop(true, true);
                    $eagleEye.fadeIn("slow")
                } else {
                    $eagleEye.show()
                }
                updateImageOffset();
                updateBox()
            }
        };
        eagleeye.hide = function (animate) {
            if (visible) {
                visible = false;
                if (animate && !($.browser.msie && Number($.browser.version.split(".")[0]) <= 8)) {
                    $eagleEye.stop(true, true);
                    $eagleEye.fadeOut("slow")
                } else {
                    $eagleEye.hide()
                }
            }
        };
        eagleeye.isOpen = function () {
            return isOpen
        };
        eagleeye.visible = function () {
            return visible
        };
        return eagleeye
    }

    function initHotKeys() {
        var keys = [{key: "Ctrl+Shift+S", fn: $.lab.topo.saveAs}, {
            key: "Alt+Ctrl+E",
            fn: $.lab.direct.gotoEdit
        }, {key: "Ctrl+A", fn: $.lab.topo.selectAllNodes}, {
            key: "Ctrl+R",
            fn: $.lab.topo.viewPositionReset
        }, {key: "Ctrl+Shift+A", fn: $.lab.topo.selectElemtByCondition}, {
            key: "Ctrl+Left", fn: function () {
                $.topology.ui.outerLayout.toggle("west")
            }
        }, {
            key: "Ctrl+Right", fn: function () {
            }
        }, {
            key: "Ctrl+Up", fn: function () {
                $.topology.ui.outerLayout.toggle("north")
            }
        }, {
            key: "Ctrl+Down", fn: function () {
                $.topology.ui.innerLayout.toggle("south")
            }
        }];
        $.each(keys, function (i, opts) {
            var key, fn = opts.fn, pd = false;
            if ($.isArray(opts.key)) {
                key = opts.key[0];
                if (opts.key.length > 1) {
                    pd = opts.key[1]
                }
            } else {
                key = opts.key
            }
            bindKeyDown(key, fn, pd)
        });
        function bindKeyDown(key, fn, pd) {
            jQuery(document).bind("keydown", key, function (e) {
                if (pd) {
                    e.preventDefault()
                }
                fn();
                return false
            })
        }
    }

    function showWarnDialog(info, xhr, status, options) {
        $.jAlert($.extend({
            type: "warn",
            content: xhr ? $.converter.requestError(xhr, status) + " [" + info + "]" : info
        }, options))
    }

    function getViewId() {
        var vid = null, view = $.topology.view;
        if (view) {
            vid = view.id
        }
        return vid
    }


    $(document).ready(init);
});