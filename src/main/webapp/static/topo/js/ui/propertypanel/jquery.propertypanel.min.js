(function ($) {
    function PropertyPanel() {
    }

    $.extend(PropertyPanel.prototype, {
        init: function (options) {
            var _this = this;
            _this.options = $.extend({}, options);
            _this.projectPath = $.project.path;
            _this._loadStatus = {};
            _this._valueParser = {
                "string": function (value) {
                    return value == null ? null : value + ""
                }, "number": function (value) {
                    var group = /(-?\d*\.?\d+)/.exec(value);
                    return group ? Number(group[1]) : 0
                }, "boolean": function (value) {
                    return !!value
                }, "text": function (value, direction) {
                    return _this._valueParser["string"](value)
                }, "pixel": function (value) {
                    return parseInt(_this._valueParser["number"](value), 10)
                }, "pixel(string)": function (value, direction) {
                    value = _this._valueParser["pixel"](value, direction);
                    return direction ? _this._valueParser["string"](value) : value
                }, "boolean(0/1)": function (value, direction) {
                    return direction ? (value ? "1" : "0") : value === "1"
                }, "boolean(1/0)": function (value, direction) {
                    return direction ? (value ? "0" : "1") : value === "0"
                }, "color": function (value, direction) {
                    return _this._valueParser["string"](value)
                }, "percent": function (value, direction) {
                    value = _this._valueParser["number"](value);
                    return direction ? _this._valueParser["string"](Math.round(value / 100, 2)) : value * 100
                }, "percent(reverse)": function (value, direction) {
                    value = _this._valueParser["number"](value);
                    return direction ? _this._valueParser["string"](Math.round(100 * (1 - value / 100)) / 100) : 100 - value * 100
                }, "enum": function (value, direction) {
                    return _this._valueParser["string"](value)
                }, "array": function (value, direction) {
                    if (direction) {
                        var arr = value.split("\n");
                        arr = arr.length == 1 && !arr[0] ? [] : arr;
                        return arr
                    } else {
                        return value.join("\n")
                    }
                    return direction ? value.split("\n") : value.join("\n")
                }, "dashed": function (value, direction) {
                    return direction ? value.replace(/_/g, ",") : value.replace(/,/g, "_")
                }
            };
            _this._valueGetter = {
                "normal": function (o, map) {
                    if (o && map) {
                        var info = analyzeRLExpr(o, map);
                        if (info) {
                            var value = info.target[info.attribute], fn = this._valueParser[map.type];
                            if (value != null) {
                                value = $.isFunction(fn) ? fn(value) : value
                            }
                            return value
                        }
                    }
                }, "relatedNode": function (o, map) {
                    var info = analyzeRLExpr(o, map);
                    if (info) {
                        var value = info.target[info.attribute];
                        return value && value.name
                    }
                }, "coordinates": function (o, map) {
                    if ($.topology.isContainer(o) && o.isExpand) {
                        var name = map.expr, value, fn = this._valueParser[map.type];
                        switch (name) {
                            case"x":
                            case"y":
                                value = o["expand" + name.toUpperCase()];
                                if (value != null) {
                                    value = $.isFunction(fn) ? fn(value) : value
                                }
                                return value;
                            default:
                                break
                        }
                    } else {
                        return this._valueGetter.normal.apply(this, arguments)
                    }
                }
            };
            _this._valueSetter = {
                "normal": function (o, map, value) {
                    if (o && map) {
                        var info = analyzeRLExpr(o, map);
                        if (info) {
                            var prop = info.target, key = info.attribute, fn = this._valueParser[map.type],
                                def = map && map.def;
                            value = $.isFunction(fn) ? fn(value, true) : value;
                            if (def != null) {
                                def = $.isFunction(fn) ? fn(fn(def), true) : def
                            }
                            def == value ? delete prop[key] : prop[key] = value
                        }
                    }
                }, "relatedNode": function (o, map, value) {
                }, "coordinates": function (o, map, value) {
                }, "nodeName": function (o, map, value) {
                    var fn = this._valueParser[map.type];
                    value = $.isFunction(fn) ? fn(value, true) : value;
                    o.setName(value)
                }, "nodeIconWidth": function (o, map, value) {
                    var fn = this._valueParser[map.type];
                    value = $.isFunction(fn) ? fn(value, true) : value;
                    if ($.topology.isSymbol(o)) {
                        o.setIconWidth(value)
                    } else {
                        if ($.topology.isContainer(o)) {
                            o.setCollapseIconWidth(value)
                        }
                    }
                }, "nodeIconHeight": function (o, map, value) {
                    var fn = this._valueParser[map.type];
                    value = $.isFunction(fn) ? fn(value, true) : value;
                    if ($.topology.isSymbol(o)) {
                        o.setIconHeight(value)
                    } else {
                        if ($.topology.isContainer(o)) {
                            o.setCollapseIconHeight(value)
                        }
                    }
                }, "setContainerExpand": function (o, map, value) {
                    var fn = this._valueParser[map.type];
                    value = $.isFunction(fn) ? fn(value, true) : value;
                    if ($.topology.isContainer(o) && o.isExpand != value) {
                        if (value) {
                            o.expand()
                        } else {
                            o.collapse()
                        }
                    }
                }
            };
            _this._panelConfig = {
                view: {
                    name: "view",
                    page: "view.html",
                    relation: {
                        "view_name": {expr: "name", type: "string"},
                        "view_font_family": {
                            expr: "style.font-family",
                            type: "text",
                            def: getViewProperty("font-family")
                        },
                        "view_font_size": {
                            expr: "style.font-size",
                            type: "pixel(string)",
                            def: getViewProperty("font-size")
                        },
                        "view_font_color": {
                            expr: "style.font-color",
                            type: "color",
                            def: getViewProperty("font-color")
                        },
                        "view_name_hidden": {
                            expr: "style.text-display",
                            type: "boolean(1/0)",
                            def: getViewProperty("text-display")
                        },
                        "view_width": {expr: "style.width", type: "pixel(string)"},
                        "view_height": {expr: "style.height", type: "pixel(string)"},
                        "view_bgimg": {expr: "style.background-image", type: "text"},
                        "view_bgcolor": {
                            expr: "style.background-color",
                            type: "color",
                            def: getViewProperty("background-color")
                        },
                        "view_bgopacity": {
                            expr: "style.background-opacity",
                            type: "percent(reverse)",
                            def: getViewProperty("background-opacity")
                        },
                        "view_adapter": {expr: "option.adapter", type: "boolean(0/1)"},
                        "view_location": {expr: "option.position", type: "boolean(0/1)"},
                        "view_hidden_nav": {expr: "isHidden", type: "boolean"},
                        "view_speech": {expr: "option.speech", type: "boolean(0/1)", scope: 2}
                    },
                    effect: {font: "effect_label.html", link: "link.html"}
                },
                symbol: {
                    name: "symbol",
                    page: "symbol.html",
                    relation: {
                        "symbol_name": {expr: "name", type: "string", setter: "nodeName"},
                        "symbol_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "symbol_x": {expr: "x", type: "pixel", setter: "coordinates"},
                        "symbol_y": {expr: "y", type: "pixel", setter: "coordinates"},
                        "symbol_icon": {expr: "style.icon", type: "text"},
                        "symbol_icon_width": {expr: "style.icon-width", type: "pixel", setter: "nodeIconWidth"},
                        "symbol_icon_height": {expr: "style.icon-height", type: "pixel", setter: "nodeIconHeight"},
                        "symbol_icon_opacity": {expr: "style.opacity", type: "percent(reverse)"},
                        "symbol_icon_shadow": {expr: "style.shadow", type: "enum", def: "null"},
                        "symbol_font_family": {
                            expr: "style.font-family",
                            type: "text",
                            def: getTextProperty("font-family")
                        },
                        "symbol_font_size": {
                            expr: "style.font-size",
                            type: "pixel(string)",
                            def: getTextProperty("font-size")
                        },
                        "symbol_font_color": {
                            expr: "style.font-color",
                            type: "color",
                            def: getTextProperty("font-color")
                        },
                        "symbol_font_effect_weight": {
                            expr: "style.font-weight",
                            type: "enum",
                            def: getTextProperty("font-weight")
                        },
                        "symbol_font_effect_italic": {
                            expr: "style.font-style",
                            type: "enum",
                            def: getTextProperty("font-style")
                        },
                        "symbol_font_effect_stroke": {
                            expr: "style.text-stroke",
                            type: "pixel(string)",
                            def: getTextProperty("text-stroke")
                        },
                        "symbol_font_effect_stroke_color": {expr: "style.text-stroke-color", type: "color"},
                        "symbol_font_effect_border": {
                            expr: "style.text-border",
                            type: "pixel(string)",
                            def: getTextProperty("text-border")
                        },
                        "symbol_font_effect_border_color": {expr: "style.text-border-color", type: "color"},
                        "symbol_font_effect_border_fill_color": {expr: "style.text-border-fill-color", type: "color"},
                        "symbol_font_effect_border_radius": {expr: "style.text-border-radius", type: "pixel(string)"},
                        "symbol_font_effect_opacity": {
                            expr: "style.text-opacity",
                            type: "percent(reverse)",
                            def: getTextProperty("text-opacity")
                        },
                        "symbol_name_location_h": {
                            expr: "style.text-align",
                            type: "enum",
                            def: getTextProperty("text-align")
                        },
                        "symbol_name_location_v": {
                            expr: "style.text-valign",
                            type: "enum",
                            def: getTextProperty("text-valign")
                        },
                        "symbol_name_hidden": {expr: "style.text-display", type: "boolean(1/0)"},
                        "symbol_coverage": {expr: "style.coverage", type: "text"},
                        "symbol_link_names": {expr: "url.name", type: "array"},
                        "symbol_link_icons": {expr: "url.icon", type: "array"},
                        "symbol_link_links": {expr: "url.link", type: "array"},
                        "symbol_link_opens": {expr: "url.open", type: "array"}
                    },
                    effect: {font: "effect_label.html", link: "link.html"}
                },
                container: {
                    name: "container",
                    page: "container.html",
                    relation: {
                        "container_name": {expr: "name", type: "string", setter: "nodeName"},
                        "container_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "container_x": {expr: "x", type: "pixel", setter: "coordinates", getter: "coordinates"},
                        "container_y": {expr: "y", type: "pixel", setter: "coordinates", getter: "coordinates"},
                        "container_icon": {expr: "style.icon", type: "text"},
                        "container_icon_width": {expr: "style.icon-width", type: "pixel", setter: "nodeIconWidth"},
                        "container_icon_height": {expr: "style.icon-height", type: "pixel", setter: "nodeIconHeight"},
                        "container_icon_opacity": {expr: "style.opacity", type: "percent(reverse)"},
                        "container_icon_shadow": {expr: "style.shadow", type: "enum", def: "null"},
                        "container_font_family": {
                            expr: "style.font-family",
                            type: "text",
                            def: getTextProperty("font-family")
                        },
                        "container_font_size": {
                            expr: "style.font-size",
                            type: "pixel(string)",
                            def: getTextProperty("font-size")
                        },
                        "container_font_color": {
                            expr: "style.font-color",
                            type: "color",
                            def: getTextProperty("font-color")
                        },
                        "container_font_effect_weight": {
                            expr: "style.font-weight",
                            type: "enum",
                            def: getTextProperty("font-weight")
                        },
                        "container_font_effect_italic": {
                            expr: "style.font-style",
                            type: "enum",
                            def: getTextProperty("font-style")
                        },
                        "container_font_effect_stroke": {
                            expr: "style.text-stroke",
                            type: "pixel(string)",
                            def: getTextProperty("text-stroke")
                        },
                        "container_font_effect_stroke_color": {expr: "style.text-stroke-color", type: "color"},
                        "container_font_effect_border": {
                            expr: "style.text-border",
                            type: "pixel(string)",
                            def: getTextProperty("text-border")
                        },
                        "container_font_effect_border_color": {expr: "style.text-border-color", type: "color"},
                        "container_font_effect_border_fill_color": {
                            expr: "style.text-border-fill-color",
                            type: "color"
                        },
                        "container_font_effect_border_radius": {
                            expr: "style.text-border-radius",
                            type: "pixel(string)",
                            def: getContainerProperty("rounded")
                        },
                        "container_font_effect_opacity": {
                            expr: "style.text-opacity",
                            type: "percent(reverse)",
                            def: getTextProperty("text-opacity")
                        },
                        "container_name_location_h": {
                            expr: "style.text-align",
                            type: "enum",
                            def: getTextProperty("text-align")
                        },
                        "container_name_location_v": {
                            expr: "style.text-valign",
                            type: "enum",
                            def: getTextProperty("text-valign")
                        },
                        "container_name_hidden": {expr: "style.text-display", type: "boolean(1/0)"},
                        "container_expand_bgcolor": {
                            expr: "style.background-color",
                            type: "color",
                            def: getContainerProperty("background-color")
                        },
                        "container_expand_bgimg": {expr: "style.background-image", type: "text"},
                        "container_expand_autoresize": {expr: "autoResize", type: "boolean"},
                        "container_expand_width": {expr: "expandWidth", type: "pixel"},
                        "container_expand_height": {expr: "expandHeight", type: "pixel"},
                        "container_expand_effect_border": {expr: "style.border", type: "pixel(string)"},
                        "container_expand_effect_border_color": {expr: "style.border-color", type: "color"},
                        "container_expand_effect_opacity": {
                            expr: "style.background-opacity",
                            type: "percent(reverse)",
                            def: getContainerProperty("background-opacity")
                        },
                        "container_isexpand": {expr: "isExpand", type: "boolean", setter: "setContainerExpand"},
                        "container_ispermit": {expr: "isPermit", type: "boolean"},
                        "container_coverage": {expr: "style.coverage", type: "text"},
                        "container_link_names": {expr: "url.name", type: "array"},
                        "container_link_icons": {expr: "url.icon", type: "array"},
                        "container_link_links": {expr: "url.link", type: "array"},
                        "container_link_opens": {expr: "url.open", type: "array"}
                    },
                    effect: {font: "effect_label.html", expand: "effect_container_expand.html", link: "link.html"}
                },
                line: {
                    name: "line",
                    page: "line.html",
                    relation: {
                        "line_name": {expr: "name", type: "string"},
                        "line_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "line_srcnode": {expr: "srcNode", type: "object", setter: "relatedNode", getter: "relatedNode"},
                        "line_dstnode": {expr: "dstNode", type: "object", setter: "relatedNode", getter: "relatedNode"},
                        "line_dashed_val": {expr: "style.dashed", type: "dashed"},
                        "line_weight": {expr: "style.weight", type: "pixel(string)", def: getLineProperty("weight")},
                        "line_color": {expr: "style.color", type: "color", def: getLineProperty("color")},
                        "line_effect_border": {expr: "style.border", type: "pixel(string)"},
                        "line_effect_border_color": {expr: "style.border-color", type: "color"},
                        "line_effect_opacity": {
                            expr: "style.opacity",
                            type: "percent(reverse)",
                            def: getLineProperty("opacity")
                        },
                        "line_path": {expr: "path", type: "string"},
                        "line_arrow": {expr: "style.arrow", type: "text"},
                        "line_coverage": {expr: "style.coverage", type: "text"},
                        "line_link_names": {expr: "url.name", type: "array"},
                        "line_link_icons": {expr: "url.icon", type: "array"},
                        "line_link_links": {expr: "url.link", type: "array"},
                        "line_link_opens": {expr: "url.open", type: "array"}
                    },
                    effect: {line: "effect_line.html", link: "link.html"}
                },
                event: {
                    name: "event",
                    page: "event.html",
                    relation: {
                        "event_render": {expr: "alarm.render", type: "enum", def: "matrix"},
                        "event_tfr_status": {expr: "alarm.tfr-status-param", type: "enum", def: "0"},
                        "event_tfr_min": {expr: "alarm.tfr-min-level", type: "enum", def: "1"}
                    }
                },
                multiSymbol: {
                    name: "symbols",
                    page: "multi_symbol.html",
                    relation: {
                        "symbols_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "symbols_x": {expr: "x", type: "pixel", setter: "coordinates"},
                        "symbols_y": {expr: "y", type: "pixel", setter: "coordinates"},
                        "symbols_icon": {expr: "style.icon", type: "text"},
                        "symbols_icon_width": {expr: "style.icon-width", type: "pixel", setter: "nodeIconWidth"},
                        "symbols_icon_height": {expr: "style.icon-height", type: "pixel", setter: "nodeIconHeight"},
                        "symbols_icon_opacity": {expr: "style.opacity", type: "percent(reverse)"},
                        "symbols_icon_shadow": {expr: "style.shadow", type: "enum", def: "null"},
                        "symbols_font_family": {
                            expr: "style.font-family",
                            type: "text",
                            def: getTextProperty("font-family")
                        },
                        "symbols_font_size": {
                            expr: "style.font-size",
                            type: "pixel(string)",
                            def: getTextProperty("font-size")
                        },
                        "symbols_font_color": {
                            expr: "style.font-color",
                            type: "color",
                            def: getTextProperty("font-color")
                        },
                        "symbols_font_effect_weight": {
                            expr: "style.font-weight",
                            type: "enum",
                            def: getTextProperty("font-weight")
                        },
                        "symbols_font_effect_italic": {
                            expr: "style.font-style",
                            type: "enum",
                            def: getTextProperty("font-style")
                        },
                        "symbols_font_effect_stroke": {
                            expr: "style.text-stroke",
                            type: "pixel(string)",
                            def: getTextProperty("text-stroke")
                        },
                        "symbols_font_effect_stroke_color": {expr: "style.text-stroke-color", type: "color"},
                        "symbols_font_effect_border": {
                            expr: "style.text-border",
                            type: "pixel(string)",
                            def: getTextProperty("text-border")
                        },
                        "symbols_font_effect_border_color": {expr: "style.text-border-color", type: "color"},
                        "symbols_font_effect_border_fill_color": {expr: "style.text-border-fill-color", type: "color"},
                        "symbols_font_effect_border_radius": {expr: "style.text-border-radius", type: "pixel(string)"},
                        "symbols_font_effect_opacity": {
                            expr: "style.text-opacity",
                            type: "percent(reverse)",
                            def: getTextProperty("text-opacity")
                        },
                        "symbols_name_location_h": {
                            expr: "style.text-align",
                            type: "enum",
                            def: getTextProperty("text-align")
                        },
                        "symbols_name_location_v": {
                            expr: "style.text-valign",
                            type: "enum",
                            def: getTextProperty("text-valign")
                        },
                        "symbols_name_hidden": {expr: "style.text-display", type: "boolean(1/0)"}
                    },
                    effect: {font: "effect_labels.html"}
                },
                multiContainer: {
                    name: "containers",
                    page: "multi_container.html",
                    relation: {
                        "containers_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "containers_x": {expr: "x", type: "pixel", setter: "coordinates", getter: "coordinates"},
                        "containers_y": {expr: "y", type: "pixel", setter: "coordinates", getter: "coordinates"},
                        "containers_icon": {expr: "style.icon", type: "text"},
                        "containers_icon_width": {expr: "style.icon-width", type: "pixel", setter: "nodeIconWidth"},
                        "containers_icon_height": {expr: "style.icon-height", type: "pixel", setter: "nodeIconHeight"},
                        "containers_icon_opacity": {expr: "style.opacity", type: "percent(reverse)"},
                        "containers_icon_shadow": {expr: "style.shadow", type: "enum", def: "null"},
                        "containers_font_family": {
                            expr: "style.font-family",
                            type: "text",
                            def: getTextProperty("font-family")
                        },
                        "containers_font_size": {
                            expr: "style.font-size",
                            type: "pixel(string)",
                            def: getTextProperty("font-size")
                        },
                        "containers_font_color": {
                            expr: "style.font-color",
                            type: "color",
                            def: getTextProperty("font-color")
                        },
                        "containers_font_effect_weight": {
                            expr: "style.font-weight",
                            type: "enum",
                            def: getTextProperty("font-weight")
                        },
                        "containers_font_effect_italic": {
                            expr: "style.font-style",
                            type: "enum",
                            def: getTextProperty("font-style")
                        },
                        "containers_font_effect_stroke": {
                            expr: "style.text-stroke",
                            type: "pixel(string)",
                            def: getTextProperty("text-stroke")
                        },
                        "containers_font_effect_stroke_color": {expr: "style.text-stroke-color", type: "color"},
                        "containers_font_effect_border": {
                            expr: "style.text-border",
                            type: "pixel(string)",
                            def: getTextProperty("text-border")
                        },
                        "containers_font_effect_border_color": {expr: "style.text-border-color", type: "color"},
                        "container_font_effect_border_fill_color": {
                            expr: "style.text-border-fill-color",
                            type: "color"
                        },
                        "containers_font_effect_border_radius": {
                            expr: "style.text-border-radius",
                            type: "pixel(string)"
                        },
                        "containers_font_effect_opacity": {
                            expr: "style.text-opacity",
                            type: "percent(reverse)",
                            def: getTextProperty("text-opacity")
                        },
                        "containers_name_location_h": {
                            expr: "style.text-align",
                            type: "enum",
                            def: getTextProperty("text-align")
                        },
                        "containers_name_location_v": {
                            expr: "style.text-valign",
                            type: "enum",
                            def: getTextProperty("text-valign")
                        },
                        "containers_name_hidden": {expr: "style.text-display", type: "boolean(1/0)"},
                        "containers_expand_bgcolor": {expr: "style.background-color", type: "color"},
                        "containers_expand_bgimg": {expr: "style.background-image", type: "text"},
                        "containers_expand_autoresize": {expr: "autoResize", type: "boolean"},
                        "containers_expand_width": {expr: "expandWidth", type: "pixel"},
                        "containers_expand_height": {expr: "expandHeight", type: "pixel"},
                        "containers_expand_effect_border": {expr: "style.border", type: "pixel(string)"},
                        "containers_expand_effect_border_color": {expr: "style.border-color", type: "color"},
                        "containers_expand_effect_opacity": {
                            expr: "style.background-opacity",
                            type: "percent(reverse)"
                        },
                        "containers_isexpand": {expr: "isExpand", type: "boolean", setter: "setContainerExpand"},
                        "containers_ispermit": {expr: "isPermit", type: "boolean"}
                    },
                    effect: {font: "effect_labels.html", expand: "effect_containers_expand.html"}
                },
                multiLine: {
                    name: "lines",
                    page: "multi_line.html",
                    relation: {
                        "lines_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "lines_dashed_val": {expr: "style.dashed", type: "dashed"},
                        "lines_weight": {expr: "style.weight", type: "pixel(string)", def: getLineProperty("weight")},
                        "lines_color": {expr: "style.color", type: "color", def: getLineProperty("color")},
                        "lines_effect_border": {expr: "style.border", type: "pixel(string)"},
                        "lines_effect_border_color": {expr: "style.border-color", type: "color"},
                        "lines_effect_opacity": {
                            expr: "style.opacity",
                            type: "percent(reverse)",
                            def: getLineProperty("opacity")
                        },
                        "lines_arrow": {expr: "style.arrow", type: "text"}
                    },
                    effect: {line: "effect_lines.html"}
                },
                multiNode: {
                    name: "node",
                    page: "multi_node.html",
                    relation: {
                        "node_name_reflash": {expr: "option.custom-label", type: "boolean(1/0)"},
                        "node_x": {expr: "x", type: "pixel", setter: "coordinates", getter: "coordinates"},
                        "node_y": {expr: "y", type: "pixel", setter: "coordinates", getter: "coordinates"},
                        "node_icon": {expr: "style.icon", type: "text"},
                        "node_icon_width": {expr: "style.icon-width", type: "pixel", setter: "nodeIconWidth"},
                        "node_icon_height": {expr: "style.icon-height", type: "pixel", setter: "nodeIconHeight"},
                        "node_icon_opacity": {expr: "style.opacity", type: "percent(reverse)"},
                        "node_icon_shadow": {expr: "style.shadow", type: "enum", def: "null"},
                        "node_font_family": {
                            expr: "style.font-family",
                            type: "text",
                            def: getTextProperty("font-family")
                        },
                        "node_font_size": {
                            expr: "style.font-size",
                            type: "pixel(string)",
                            def: getTextProperty("font-size")
                        },
                        "node_font_color": {
                            expr: "style.font-color",
                            type: "color",
                            def: getTextProperty("font-color")
                        },
                        "node_font_effect_weight": {
                            expr: "style.font-weight",
                            type: "enum",
                            def: getTextProperty("font-weight")
                        },
                        "node_font_effect_italic": {
                            expr: "style.font-style",
                            type: "enum",
                            def: getTextProperty("font-style")
                        },
                        "node_font_effect_stroke": {
                            expr: "style.text-stroke",
                            type: "pixel(string)",
                            def: getTextProperty("text-stroke")
                        },
                        "node_font_effect_stroke_color": {expr: "style.text-stroke-color", type: "color"},
                        "node_font_effect_border": {
                            expr: "style.text-border",
                            type: "pixel(string)",
                            def: getTextProperty("text-border")
                        },
                        "node_font_effect_border_color": {expr: "style.text-border-color", type: "color"},
                        "node_font_effect_border_fill_color": {expr: "style.text-border-fill-color", type: "color"},
                        "node_font_effect_border_radius": {expr: "style.text-border-radius", type: "pixel(string)"},
                        "node_font_effect_opacity": {
                            expr: "style.text-opacity",
                            type: "percent(reverse)",
                            def: getTextProperty("text-opacity")
                        },
                        "node_name_location_h": {
                            expr: "style.text-align",
                            type: "enum",
                            def: getTextProperty("text-align")
                        },
                        "node_name_location_v": {
                            expr: "style.text-valign",
                            type: "enum",
                            def: getTextProperty("text-valign")
                        },
                        "node_name_hidden": {expr: "style.text-display", type: "boolean(1/0)"}
                    },
                    effect: {font: "effect_labels.html"}
                },
                multiEvent: {
                    name: "events",
                    page: "multi_event.html",
                    relation: {
                        "events_render": {expr: "alarm.render", type: "enum", def: "matrix"},
                        "events_tfr_status": {expr: "alarm.tfr-status-param", type: "enum", def: "0"},
                        "events_tfr_min": {expr: "alarm.tfr-min-level", type: "enum", def: "1"}
                    }
                }
            };

            function getTextProperty(pname) {
                return $.topology.graphEngine.options.node_text[pname]
            }

            function getViewProperty(name) {
                return $.topology.graphEngine.options.view[name]
            }

            function getLineProperty(name) {
                return $.topology.graphEngine.options.line[name]
            }

            function getContainerProperty(name) {
                return $.topology.graphEngine.options.container[name]
            }

            function analyzeRLExpr(o, map) {
                if (o && map) {
                    var expr = map.expr, i, prop, arr = expr.split("."), key = arr[arr.length - 1];
                    for (i = 0, prop = o; i < arr.length - 1; i++) {
                        if (prop) {
                            prop = prop[arr[i]]
                        } else {
                            break
                        }
                    }
                    if (prop && (i === arr.length - 1)) {
                        return {target: prop, attribute: key}
                    }
                }
            }
        }, _load: function (type, callback) {
            var _this = this;
            if (!_this._panelConfig[type]) {
                return
            }
            if (!_this._loadStatus[type]) {
                $("#" + type + "_panel").empty().html(testPanelHtml[_this._panelConfig[type].page]);
                _this._loadStatus[type] = true;
                $.propertyPanel._render(type);
                $.propertyPanel._support(type);
                $.propertyPanel._operate(type);
                if (type !== "event" && type !== "multiEvent") {
                    $.propertyPanel._validate()
                }
                if ($.isFunction(callback)) {
                    callback.call(_this, null)
                }
            } else {
                if ($.isFunction(callback)) {
                    callback.call(_this, null)
                }
            }
        }, panelType: function () {
            var type = null, selector = $.topology.selector;
            if (selector.size() > 1) {
                var selected = selector.selected();
                if (selected.symbols.length && selected.containers.length) {
                    type = "multiNode"
                } else {
                    if (selected.symbols.length) {
                        type = "multiSymbol"
                    } else {
                        if (selected.containers.length) {
                            type = "multiContainer"
                        } else {
                            if (selected.lines.length || selected.lineseters.length) {
                                type = "multiLine"
                            }
                        }
                    }
                }
            } else {
                var o = $.topology.contextObj;
                if ($.topology.isView(o)) {
                    type = "view"
                } else {
                    if ($.topology.isSymbol(o)) {
                        type = "symbol"
                    } else {
                        if ($.topology.isContainer(o)) {
                            type = "container"
                        } else {
                            if ($.topology.isLine(o) || $.topology.isLineseter(o)) {
                                type = "line"
                            }
                        }
                    }
                }
            }
            this.type = type;
            return this.type
        }, display: function (callback) {
            this.panelType();
            if (this.type !== "view") {
                var evtPanelType = this.type.indexOf("multi") != -1 ? "multiEvent" : "event";
                this._load(evtPanelType, function () {
                    var $panel = $("#" + evtPanelType + "_panel");
                    $panel.show().siblings().each(function () {
                        $(this).hide()
                    });
                    $panel.find(":checkbox[id^='apply2_']").each(function () {
                        $(this).prop("checked", false)
                    })
                })
            }
            this._load(this.type, function () {
                var $panel = $("#" + this.type + "_panel");
                var $displayPanel = null;
                $panel.data("jvalidate").reset();
                $panel.siblings().each(function () {
                    if ($(this).css("display") !== "none") {
                        $displayPanel = $(this)
                    }
                });
                var fn = function (time) {
                    setTimeout(function () {
                        $panel.find(":checkbox[id^='apply2_']").each(function () {
                            $(this).prop("checked", false)
                        });
                        $.propertyPanel._fillProp();
                        if ($.isFunction(callback)) {
                            callback()
                        }
                    }, time || 250)
                };
                var animate = !($.browser.msie && Number($.browser.version.split(".")[0]) < 8);
                if (animate) {
                    $displayPanel && $displayPanel.slideUp("slow");
                    $panel.is(":hidden") ? $panel.slideDown("slow", fn) : fn(1000)
                } else {
                    $displayPanel && $displayPanel.hide();
                    $panel.is(":hidden") && $panel.show();
                    fn(1000)
                }
            })
        }, propertyObject: function () {
            var selector = $.topology.selector, isMultiSelected = selector.size() > 1;
            return isMultiSelected ? selector.focus() : $.topology.contextObj
        }, selectedPropertyObjects: function () {
            var selector = $.topology.selector, selected = selector.selected(), isMultiSelected = selector.size() > 1,
                arr = isMultiSelected ? selected.symbols.concat(selected.containers).concat(selected.lines).concat(selected.lineseters) : [$.topology.contextObj];
            $.each(arr, function (index, value) {
                if (typeof value !== "object") {
                    arr[index] = $.topology.find(value)
                }
            });
            return arr
        }, _fillProp: function () {
            var o = this.propertyObject();
            if (o && this.type) {
                var i, id = null, $e, rels = [];
                rels.push(this._panelConfig[this.type].relation);
                if (this.type !== "view") {
                    rels.push(this._panelConfig[this.type.indexOf("multi") != -1 ? "multiEvent" : "event"].relation)
                }
                for (i = 0; i < rels.length; i++) {
                    for (id in rels[i]) {
                        $e = $("#" + id);
                        this._setValue($e, this._getPropValue(o, rels[i][id]))
                    }
                }
            }
        }, _saveProp: function () {
            var _this = this, $panel = $("#" + _this.type + "_panel");
            if (!$panel.data("jvalidate").valid()) {
                return false
            }
            var multiSelected = _this.type.indexOf("multi") != -1;
            if (multiSelected) {
                var checkedCount = 0;
                $panel.find(":checkbox[id^='apply2_']").each(function () {
                    if ($(this).prop("checked")) {
                        checkedCount++
                    }
                });
                if (checkedCount === 0) {
                    $("#multiEvent_panel").find(":checkbox[id^='apply2_']").each(function () {
                        if ($(this).prop("checked")) {
                            checkedCount++
                        }
                    })
                }
                if (checkedCount > 0) {
                    save();
                    return true
                } else {
                    $.jAlert({type: "info", content: "您未选择要变更的属性，请在要变更的属性前勾选，然后再点击 <b>应用</b> 或 <b>确定</b> ！"});
                    return false
                }
            } else {
                save();
                return true
            }

            function specialHandle(id, o, map, nval) {
                if (!$.topology.changed.alarmTfr) {
                    if (id === "event_tfr_status" || id === "event_tfr_min" || id === "events_tfr_status" || id === "events_tfr_min") {
                        var oval = _this._getPropValue(o, map) || map.def;
                        $.topology.changed.alarmTfr = oval != nval
                    }
                }
            }

            function save() {
                var i, id = null, value, $apply, arr = _this.selectedPropertyObjects(),
                    rels = [_this._panelConfig[_this.type].relation], typeSuffix = _this._panelConfig[_this.type].name;
                if (_this.type !== "view") {
                    rels.push(_this._panelConfig[multiSelected ? "multiEvent" : "event"].relation)
                }
                if (_this.type === "container" || _this.type === "symbol" || _this.type === "line") {
                    _this.propertyObject().url = {icon: [], name: [], link: [], open: []}
                }
                for (i = 0; i < rels.length;
                     i++) {
                    for (id in rels[i]) {
                        if (id === typeSuffix + "_name_location_h" || id === typeSuffix + "_name_location_v") {
                            $apply = $("#apply2_" + typeSuffix + "_name_location")
                        } else {
                            $apply = $("#apply2_" + id)
                        }
                        if (!$apply.length || $apply.prop("checked")) {
                            value = _this._getValue(id);
                            $.each(arr, function () {
                                specialHandle(id, this, rels[i][id], value);
                                _this._setPropValue(this, rels[i][id], value)
                            })
                        }
                    }
                }
                if ($.inArray(_this.type, ["container", "symbol", "multiContainer", "multiSymbol", "multiNode"]) != -1) {
                    _this._nodeCoords()
                } else {
                    if (_this.type == "view") {
                        $.lab.topo.viewNameReflush()
                    }
                }
                $.each(arr, function () {
                    $.isFunction(this.change) && this.change();
                    $.isFunction(this.edgeDetect) && this.edgeDetect()
                });
                $.topology.selector.refresh()
            }
        }, _render: function () {
            var _type = arguments[0] || this.type;
            if (_type === "view") {
                this.switchs();
                this.slider();
                this.colorPicker();
                this.help()
            } else {
                if (_type === "symbol" || _type === "multiSymbol" || _type === "multiNode") {
                    this.switchs();
                    this.slider();
                    this.spinner();
                    this.colorPicker();
                    this.iconPicker();
                    this.hyperlink();
                    this.help()
                } else {
                    if (_type === "container" || _type === "multiContainer") {
                        this.switchs();
                        this.slider();
                        this.spinner();
                        this.colorPicker();
                        this.iconPicker();
                        this.hyperlink();
                        this.help()
                    } else {
                        if (_type === "line" || _type === "multiLine") {
                            this.dashed();
                            this.switchs();
                            this.spinner();
                            this.colorPicker();
                            this.hyperlink();
                            this.help()
                        } else {
                            if (_type === "event" || _type === "multiEvent") {
                                this.help(_type)
                            }
                        }
                    }
                }
            }
        }, _validate: function () {
            var _this = this, _type = _this.type;
            if (_type === "view") {
                $("#view_name").addClass("jvalidate").attr({
                    validtype: "required,noSpecialCaracters,maxLength",
                    validpar: $.toJSON({length: 30}),
                    requiredmsg: "必须填写拓扑图名称.",
                    noSpecialCaractersmsg: "拓扑图名称中不能出现特殊字符, 请用数字、英文字母、汉字或下划线作为拓扑图的名称.",
                    maxLengthmsg: "名称过长, 请减少名称内容."
                });
                this._lengthValidate("view_width", "拓扑图宽度");
                this._lengthValidate("view_height", "拓扑图高度")
            } else {
                if (_type === "symbol") {
                    this._nameValidate("symbol_name", 128);
                    this._coordinatesValidate("symbol_x", "横坐标");
                    this._coordinatesValidate("symbol_y", "纵坐标");
                    this._lengthValidate("symbol_icon_width", "图标宽度");
                    this._lengthValidate("symbol_icon_height", "图标高度")
                } else {
                    if (_type === "container") {
                        this._nameValidate("container_name", 128);
                        this._coordinatesValidate("container_x", "横坐标");
                        this._coordinatesValidate("container_y", "纵坐标");
                        this._lengthValidate("container_icon_width", "图标宽度");
                        this._lengthValidate("container_icon_height", "图标高度");
                        this._lengthValidate("container_expand_width", "容器展开宽度");
                        this._lengthValidate("container_expand_height", "容器展开高度")
                    } else {
                        if (_type === "line") {
                            this._nameValidate("line_name", 128)
                        } else {
                            if (_type === "multiSymbol") {
                                this._coordinatesValidate("symbols_x", "横坐标");
                                this._coordinatesValidate("symbols_y", "纵坐标");
                                this._lengthValidate("symbols_icon_width", "图标宽度");
                                this._lengthValidate("symbols_icon_height", "图标高度")
                            } else {
                                if (_type === "multiContainer") {
                                    this._coordinatesValidate("containers_x", "横坐标");
                                    this._coordinatesValidate("containers_y", "纵坐标");
                                    this._lengthValidate("containers_icon_width", "图标宽度");
                                    this._lengthValidate("containers_icon_height", "图标高度");
                                    this._lengthValidate("containers_expand_width", "容器展开宽度");
                                    this._lengthValidate("containers_expand_height", "容器展开高度")
                                } else {
                                    if (_type === "multiNode") {
                                        this._coordinatesValidate("node_x", "横坐标");
                                        this._coordinatesValidate("node_y", "纵坐标");
                                        this._lengthValidate("node_icon_width", "图标宽度");
                                        this._lengthValidate("node_icon_height", "图标高度")
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var $panel = $("#" + _type + "_panel");
            $panel.jvalidate({
                arrowPointing: {
                    "#view_name": "up",
                    "#symbol_name": "up",
                    "#container_name": "up",
                    "#line_name": "up"
                }
            });
            $panel.data("jvalidate", $panel)
        }, _support: function () {
            var _type = arguments[0] || this.type;
            if (_type === "view") {
                this._fontSupport("view_font_family");
                this._hiddenSpeech("view_speech")
            } else {
                if (_type === "symbol") {
                    this._fontSupport("symbol_font_family");
                    this._filterSupport("symbol_font_effect")
                } else {
                    if (_type === "container") {
                        this._fontSupport("container_font_family");
                        this._filterSupport("container_font_effect");
                        this._filterSupport("container_expand_effect")
                    } else {
                        if (_type === "line") {
                            this._filterSupport("line_effect")
                        } else {
                            if (_type === "multiSymbol") {
                                this._fontSupport("symbols_font_family");
                                this._filterSupport("symbols_font_effect")
                            } else {
                                if (_type === "multiContainer") {
                                    this._fontSupport("containers_font_family");
                                    this._filterSupport("containers_font_effect");
                                    this._filterSupport("containers_expand_effect")
                                } else {
                                    if (_type === "multiNode") {
                                        this._fontSupport("node_font_family");
                                        this._filterSupport("node_font_effect")
                                    } else {
                                        if (_type === "multiLine") {
                                            this._filterSupport("lines_effect")
                                        } else {
                                            if (_type === "event") {
                                                this._animateSupport("event_render");
                                                this._hiddenAlarmTransferParam()
                                            } else {
                                                if (_type === "multiEvent") {
                                                    this._animateSupport("events_render");
                                                    this._hiddenAlarmTransferParam()
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }, _operate: function () {
            var _this = this, _type = arguments[0] || _this.type;
            var $panel = $("#" + _type + "_panel");
            if (_type === "multiSymbol" || _type === "multiContainer" || _type === "multiLine" || _type === "multiNode" || _type === "multiEvent") {
                var $chk = $panel.find(":checkbox[id^='apply2_']");
                $panel.find(".check_all").click(function () {
                    _this._checkAll($chk)
                });
                $panel.find(".check_invert").click(function () {
                    _this._checkInvert($chk)
                })
            }
            $panel.find(".apply_button").click(function () {
                if (_this._saveProp()) {
                    if ($.isFunction(_this.afterApply)) {
                        _this.afterApply()
                    }
                }
            });
            $panel.find(".apply_button").click(function () {
                if (_this._saveProp()) {
                    delete _this.type;
                    if ($.isFunction(_this.afterSubmit)) {
                        _this.afterSubmit()
                    }
                }
            });
            $panel.find(".cancel_button").click(function () {
                delete _this.type;
                if ($.isFunction(_this.afterCancel)) {
                    _this.afterCancel()
                }
            })
        }, switchs: function (selector) {
            selector = selector || "#" + this.type + "_panel .switch";
            $(selector).iphoneStyle({
                onChange: function (chk, checked) {
                    var id = chk.attr("id");
                    if (id === "label_weight" || id === "labels_weight") {
                        if (!checked) {
                            return
                        }
                        if ($.browser.msie && Number($.browser.version.split(".")[0]) < 9) {
                            $.jAlert({
                                ParentWindowId: "effect4Label",
                                type: "warn",
                                content: "您的浏览器版本较低，不支持针对文字加粗的显示，建议升级至IE 10或更高版本，或者更换浏览器！"
                            })
                        }
                    } else {
                        if (id === "container_expand_autoresize") {
                            $("#container_expand_width_block").css("display", checked ? "none" : "inline");
                            $("#container_expand_height_block").css("display", checked ? "none" : "inline");
                            $.topology.ui.innerLayout.options.east.onresize_end()
                        } else {
                            if (id === "containers_expand_autoresize") {
                                var $width = $("#containers_expand_width_block"),
                                    $height = $("#containers_expand_height_block");
                                if (checked) {
                                    $("#apply2_containers_expand_width").prop("checked", false);
                                    $("#apply2_containers_expand_height").prop("checked", false);
                                    $width.hide();
                                    $height.hide()
                                } else {
                                    $width.show();
                                    $height.show()
                                }
                                $.topology.ui.innerLayout.options.east.onresize_end()
                            } else {
                                if (id === "symbol_name_reflash") {
                                    if (checked) {
                                        $("#symbol_name").attr("disabled", "disabled")
                                    } else {
                                        $("#symbol_name").removeAttr("disabled")
                                    }
                                } else {
                                    if (id === "line_name_reflash") {
                                        if (checked) {
                                            $("#line_name").attr("disabled", "disabled")
                                        } else {
                                            $("#line_name").removeAttr("disabled")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            })
        }, slider: function (selector, param) {
            selector = selector || "#" + this.type + "_panel .slider";
            $(selector).each(function () {
                var $this = $(this);
                var option = null;
                var id = $this.attr("id");
                switch (id) {
                    case"label_stroke":
                    case"label_border":
                    case"label_shadow_h":
                    case"label_shadow_v":
                    case"label_shadow_blur":
                    case"labels_stroke":
                    case"labels_border":
                    case"labels_shadow_h":
                    case"labels_shadow_v":
                    case"labels_shadow_blur":
                    case"container_expand_border":
                    case"container_expand_shadow_h":
                    case"container_expand_shadow_v":
                    case"container_expand_shadow_blur":
                    case"containers_expand_border":
                    case"containers_expand_shadow_h":
                    case"containers_expand_shadow_v":
                    case"containers_expand_shadow_blur":
                    case"line_border":
                    case"line_shadow_h":
                    case"line_shadow_v":
                    case"line_shadow_blur":
                    case"lines_border":
                    case"lines_shadow_h":
                    case"lines_shadow_v":
                    case"lines_shadow_blur":
                        option = {max: 10};
                        $this.attr("propunit", "px");
                        break;
                    case"label_border_radius":
                    case"labels_border_radius":
                        option = {max: param.maxLimit()};
                        $this.attr("propunit", "px");
                        break;
                    case"container_icon_opacity":
                    case"containers_icon_opacity":
                    case"node_icon_opacity":
                    case"symbols_icon_opacity":
                    case"symbol_icon_opacity":
                        option = {
                            stop: function () {
                                if ($.browser.msie && Number($.browser.version.split(".")[0]) < 9) {
                                    $.jAlert({
                                        type: "warn",
                                        content: "您的浏览器版本较低，不支持针对图标透明度的显示，建议升级至IE 10或更高版本，或者更换浏览器！"
                                    })
                                }
                            }
                        };
                        break
                }
                $this.slider($.extend({
                    value: 0,
                    min: 0,
                    max: 100,
                    range: "min",
                    animate: 500,
                    slide: function (event, ui) {
                        var unit = $this.attr("propunit") || "%";
                        $("#" + id + "_val").text(ui.value + unit)
                    }
                }, option));
                var unit = $this.attr("propunit") || "%";
                $("#" + id + "_val").text(0 + unit)
            })
        }, colorPicker: function (selector, parentWindowId) {
            selector = selector || "#" + this.type + "_panel .color-picker";
            $(selector).unbind("click").click(function () {
                var colorPickerWindow = $.MsgWindow({
                    WindowId: "colorPickerWindow",
                    ParentWindowId: parentWindowId,
                    WindowTitle: "拾色器",
                    WindowWidth: 360,
                    WindowHeight: 180,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosableByEsc: true,
                    contentBackground: "#fff",
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "colorPickerWidget")
                });
                var ele = $(this), _color = ele.val();
                $("#colorPickerWidget").ColorPicker({
                    flat: true,
                    color: (_color ? _color : "#ffffff"),
                    onSubmit: function (hsb, hex, rgb, el) {
                        var fontColor = "#000";
                        if ((rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114) < 192) {
                            fontColor = "#fff"
                        }
                        ele.val("#" + hex).animate({"background-color": "#" + hex, "color": fontColor}, 300);
                        colorPickerWindow.close()
                    },
                    onBeforeShow: function () {
                        $(this).ColorPickerSetColor(_color ? _color : "#ffffff")
                    }
                })
            })
        }, iconPicker: function () {
            $("#" + this.type + "_panel .icon-picker").unbind("click").click(function () {
                $.MsgWindow({
                    WindowId: "iconPickerWindow",
                    WindowTitle: "图标选取器",
                    WindowWidth: 564,
                    WindowHeight: 440,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosableByEsc: true,
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "iconPickerWidget")
                });
                var el = $(this), iconUrl = el.val(), iconCfgData = $.topology.iconConfig();
                $("#iconPickerWidget").empty().css("overflow-y", "hidden").append($("<div/>").attr("id", "iconTabs")).append($("<div style='text-align:center;padding:8px 0 0 0;'>" + "<input id='iconSubmit' type='button' value=' 确 定 ' class='apply_button'/>&nbsp;&nbsp;" + "<input id='iconCancel' type='button' value=' 取 消 ' class='cancel_button' />" + "</div>"));
                $("#iconSubmit").unbind("click").click(function () {
                    var eleid = el.attr("id"), chkrdo = $(":radio[name='iconrdo']:checked"),
                        vals = chkrdo.attr("value").split(";");
                    el.val(vals[0]);
                    $("#" + eleid + "_width").val(vals[1]);
                    $("#" + eleid + "_height").val(vals[2]);
                    window.$(".table-mm-container:first").siblings(".buttons").find(".win-close-btn").trigger("click")
                });
                $("#iconCancel").unbind("click").click(function () {
                    window.$(".table-mm-container:first").siblings(".buttons").find(".win-close-btn").trigger("click")
                });
                var tabUl = $("<ul/>"), tabDivs = [], checkedTab = 0, checkedRow = 0;
                for (var i = 0, len = iconCfgData.length; i < len; i++) {
                    $("<li/>").append($("<a href='#iconTabs-" + i + "'>" + iconCfgData[i].label + "</a>")).appendTo(tabUl);
                    var icons = iconCfgData[i].icons;
                    var tabId = "iconTabs-" + i, tab = $("<div/>").attr("id", tabId).css({
                            "overflow-y": "auto",
                            "height": 354,
                            "padding": "8px; 0 0 0"
                        }), icon = null, $table = $("<table></table>").addClass("icon-picker-table"), $tr = null,
                        iconPath = "", isChecked = false, _row = 0;
                    for (var j = 0, iconLen = icons.length; j < iconLen; j++) {
                        icon = icons[j];
                        iconPath = "icon/";
                        if ((icon.path + icon.name) === iconUrl) {
                            checkedTab = i;
                            isChecked = true
                        } else {
                            isChecked = false
                        }
                        if (j % 8 === 0) {
                            $tr = $("<tr></tr>").appendTo($table);
                            _row++
                        }
                        iconPath += icon.path + (icon.name.split(".")[1].toLowerCase() === "svg" ? (icon.name.split(".")[0] + ".svg") : icon.name);
                        var $img = $("<div/>").append($("<img/>").attr({
                                id: "icon-" + icon.name.split(".")[0],
                                src: iconPath,
                                title: icon.desc,
                                width: 48,
                                height: 48
                            }).addClass("icon-item")).attr("id", "icon-container-" + icon.name.split(".")[0]),
                            $radio = $("<input>").attr({
                                name: "iconrdo",
                                type: "radio",
                                value: (icon.path + icon.name + ";" + icon.width + ";" + icon.height),
                                id: icon.name.split(".")[0]
                            });
                        if (isChecked) {
                            $img.removeClass().addClass("icon-container-checked");
                            $radio.attr("checked", "checked");
                            checkedRow = _row
                        } else {
                            $img.removeClass().addClass("icon-container")
                        }
                        $("<td></td>").append($img).append($radio).appendTo($tr)
                    }
                    tab.append($table);
                    tabDivs.push(tab)
                }
                $("#iconTabs").append(tabUl);
                for (i = 0, len = tabDivs.length; i < len; i++) {
                    $("#iconTabs").append(tabDivs[i])
                }
                $("#iconTabs").tabs();
                $("#iconTabs>ul").children(":eq(" + checkedTab + ")").children().trigger("click");
                var offsetTop = (checkedRow - 1) * 52 > 0 ? ((checkedRow - 1) * 52) : 0;
                $("#iconTabs-" + checkedTab).scrollTop(offsetTop);
                $(":radio[name='iconrdo']").unbind("click").click(function () {
                    if ($(this).prop("checked")) {
                        $("div[id^='icon-container-'][class='icon-container-checked']").removeClass("icon-container-checked").addClass("icon-container");
                        $("#icon-container-" + $(this).attr("id")).removeClass("icon-container").addClass("icon-container-checked")
                    }
                });
                $(".icon-item").unbind("click").click(function () {
                    var id = $(this).attr("id");
                    $("div[id^='icon-container-'][class='icon-container-checked']").removeClass("icon-container-checked").addClass("icon-container");
                    $("#icon-container-" + id.replace(/icon-/i, "")).removeClass("icon-container").addClass("icon-container-checked");
                    $("#" + id.replace(/icon-/i, "")).prop("checked", true)
                })
            })
        }, dashed: function () {
            var _type = this.type;
            if (_type === "line" && !$("#line_dashed_val").val()) {
                $("#line_dashed_val").val("none");
                $("#line_dashed").attr("src", dex +"images/dashed/none.png")
            }
            if (_type === "multiLine" && !$("#lines_dashed_val").val()) {
                $("#lines_dashed_val").val("none");
                $("#lines_dashed").attr("src", dex +"images/dashed/none.png")
            }
            $("#" + _type + "_panel .dashed-picker").unbind("click").click(function () {
                $.MsgWindow({
                    WindowId: "dashedPickerWindow",
                    WindowTitle: "线型选取器",
                    WindowWidth: 202,
                    WindowHeight: 300,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosableByEsc: true,
                    contentBackground: "#fff",
                    contentBorder: "none",
                    showOverlay: true,
                    content: $("<div/>").attr("id", "dashedPickerWidget")
                });
                var dashedVal = "none";
                if (_type === "line") {
                    dashedVal = $("#line_dashed_val").val() ? $("#line_dashed_val").val() : "none"
                } else {
                    if (_type === "multiLine") {
                        dashedVal = $("#lines_dashed_val").val() ? $("#lines_dashed_val").val() : "none"
                    }
                }
                $("#dashedPickerWidget").css("text-align", "center").append($("<div/>").attr("id", "dashedContainer")).append($("<div/>").attr("id", "dashedButton"));
                $("#dashedButton").html("<input id='dashedSubmit' type='button' value=' 确 定 ' class='apply_button' />&nbsp;&nbsp;" + "<input id='dashedCancel' type='button' class='cancel_button' value=' 取 消 ' />").css("text-align", "center");
                $("#dashedSubmit").unbind("click").click(function () {
                    var chkrdo = $(":radio[name='dashedrdo']:checked").attr("value");
                    if (_type === "line") {
                        $("#line_dashed_val").val(chkrdo);
                        $("#line_dashed").attr("src", dex +"images/dashed/" + chkrdo + ".png")
                    } else {
                        if (_type === "multiLine") {
                            $("#lines_dashed_val").val(chkrdo);
                            $("#lines_dashed").attr("src", dex +"images/dashed/" + chkrdo + ".png")
                        }
                    }
                    window.$(".table-mm-container:first").siblings(".buttons").find(".win-close-btn").trigger("click")
                });
                $("#dashedCancel").unbind("click").click(function () {
                    window.$(".table-mm-container:first").siblings(".buttons").find(".win-close-btn").trigger("click")
                });
                var dasheds = ["none", "8_8", "8_14", "14_8", "14_14", "4_14_8_14", "8_4_14_4"],
                    $ctn = $("#dashedContainer"), $dc = null, $radio = null, $image = null;
                for (var i = 0, len = dasheds.length; i < len; i++) {
                    $radio = $("<input>").attr({
                        name: "dashedrdo",
                        type: "radio",
                        value: dasheds[i],
                        id: dasheds[i]
                    }).css("margin", "4px 4px 0 0");
                    $image = $("<img/>").attr({
                        id: "dashed-" + dasheds[i],
                        src: dex +"images/dashed/" + dasheds[i] + ".png",
                        width: 124,
                        height: 20
                    }).addClass("dashed-item");
                    $dc = $("<div/>").attr("id", "dashed-container-" + dasheds[i]).append($radio).append($image);
                    if (dasheds[i] === dashedVal) {
                        $dc.removeClass().addClass("dashed-container-checked");
                        $radio.attr("checked", "checked")
                    } else {
                        $dc.removeClass().addClass("dashed-container")
                    }
                    $ctn.append($dc)
                }
                $(":radio[name='dashedrdo']").unbind("click").click(function () {
                    if ($(this).prop("checked")) {
                        $("div[id^='dashed-container-'][class='dashed-container-checked']").removeClass("dashed-container-checked").addClass("dashed-container");
                        $("#dashed-container-" + $(this).attr("id")).removeClass("dashed-container").addClass("dashed-container-checked")
                    }
                });
                $(".dashed-item").unbind("click").click(function () {
                    var id = $(this).attr("id");
                    $("div[id^='dashed-container-'][class='dashed-container-checked']").removeClass("dashed-container-checked").addClass("dashed-container");
                    $("#dashed-container-" + id.replace(/dashed-/i, "")).removeClass("dashed-container").addClass("dashed-container-checked");
                    $("#" + id.replace(/dashed-/i, "")).prop("checked", true)
                })
            })
        }, spinner: function () {
            $("#" + this.type + "_panel .spinner").spinner()
        }, hyperlink: function () {
            var _this = this;
            $("#" + _this.type + "_link").unbind("click").click(function () {
                var $container = $("<div/>").addClass("hyperlinkContainer"),
                    $table = $("<table/>").appendTo($container), $addBtn = $("<img/>").attr({
                        "src": dex +"images/operate/add-32.png",
                        "title": "增加"
                    }).addClass("operaBtn").css("marginLeft", "15px").appendTo($container),
                    $ensureBtn = $("<img/>").addClass("disabled").attr({
                        "src": dex +"images/operate/ensure_gray-32.png",
                        "title": "保存"
                    }).addClass("operaBtn").css("marginLeft", "10px").appendTo($container), i, data = [],
                    rowSequence = 0, textKey = "textContent", iconRelativeDir = "images/icon/",
                    defaultIconName = "acrobat-32.png", linkWindow = $.MsgWindow({
                        WindowId: "hyperLinkConfig",
                        WindowTitle: "超链接配置",
                        WindowWidth: 600,
                        WindowHeight: 315,
                        WindowResizable: false,
                        WindowMaximize: false,
                        WindowMinimize: false,
                        WindowDraggable: true,
                        contentBorder: "none",
                        contentPadding: "0px",
                        containment: "html",
                        showOverlay: false,
                        WindowClosableByEsc: true,
                        content: $container
                    });
                $table.dataTable({
                    sDom: "rt",
                    bJQueryUI: true,
                    sScrollY: 265,
                    bPaginate: false,
                    bAutoWidth: false,
                    bSort: false,
                    aoColumns: [{sTitle: "图标", sClass: "center", sWidth: "60px"}, {
                        sTitle: "名称",
                        sClass: "center",
                        sWidth: "150px"
                    }, {sTitle: "URL", sClass: "left"}, {sTitle: "操作", sClass: "center", sWidth: "80px"}],
                    fnCreatedRow: function (nRow, aData, iDataIndex) {
                        var $iconTd = $("td:eq(0)", nRow), $nameTd = $("td:eq(1)", nRow), $urlTd = $("td:eq(2)", nRow),
                            nameText = $.trim(data[iDataIndex][1]), urlText = $.trim(data[iDataIndex][2]);
                        $(nRow).data("rowSequence", rowSequence++);
                        $nameTd.data(textKey, nameText).append($("<span/>").addClass("linkName" + (nameText ? "" : " nv")).text(lengthLimit(nameText, 10) || "点击编辑").mousedown(function () {
                            return false
                        }).mouseup(function () {
                            return false
                        })).delegate(".linkName", "click", function () {
                            var $this = $(this), $td = $this.parent(), $text = $("<input/>").css({width: "120px"});
                            activeEnsureBtn();
                            $td.empty().append($text.val($this.is(".nv") ? "" : $td.data(textKey)));
                            $text.blur(function () {
                                var $this = $(this), $td = $this.parent(), value = $.trim($this.val());
                                $this.remove();
                                var $name = $("<span/>").addClass("linkName").mousedown(function () {
                                    return false
                                }).mouseup(function () {
                                    return false
                                });
                                if (value) {
                                    $name.removeClass("nv").text(lengthLimit(value, 10)).attr("title", value).appendTo($td.data(textKey, value))
                                } else {
                                    $name.addClass("nv").text("点击编辑").appendTo($td.data(textKey, ""))
                                }
                                data[$td.parent().index()][1] = value
                            }).select();
                            return false
                        });
                        $urlTd.data(textKey, urlText).append($("<span/>").addClass("linkUrl" + (urlText ? "" : " nv")).text(lengthLimit(urlText, 40) || "点击编辑").mousedown(function () {
                            return false
                        }).mouseup(function () {
                            return false
                        })).delegate(".linkUrl", "click", function () {
                            var $this = $(this), $td = $this.parent(), $text = $("<input/>").css({width: "180px"});
                            $td.empty().append($text.val($this.is(".nv") ? "" : $td.data(textKey)));
                            activeEnsureBtn();
                            $text.blur(function () {
                                var $this = $(this), $td = $this.parent(), value = $.trim($this.val());
                                $this.remove();
                                var $url = $("<span/>").addClass("linkUrl").mousedown(function () {
                                    return false
                                }).mouseup(function () {
                                    return false
                                });
                                if (value) {
                                    $url.removeClass("nv").text(lengthLimit(value, 40)).attr("title", value).appendTo($td.data(textKey, value))
                                } else {
                                    $url.addClass("nv").text("点击编辑").appendTo($td.data(textKey, ""))
                                }
                                data[$td.parent().index()][2] = value
                            }).select();
                            return false
                        });
                        setTimeout(function () {
                            var icon = data[iDataIndex][0];
                            if (icon) {
                                icon = icon.replace(/16\.png$/, "32.png")
                            }
                            icon = icon || defaultIconName;
                            data[iDataIndex][0] = icon.replace(/32\.png$/, "16.png");
                            $iconTd.children().mousedown(function () {
                                return false
                            }).mouseup(function () {
                                return false
                            })
                        }, 0);
                        $(nRow).mousedown(function (e) {
                            var $tr = $(this), queueName = "dragEventQueue", y = e.pageY, top = $tr.position().top,
                                $area = $table.parent(".dataTables_scrollBody");
                            $tr.clearQueue(queueName).delay(100, queueName).queue(queueName, function () {
                                var $aThead = $tr.parents("table:first").children("thead"),
                                    $aTable = $("<table/>").append($aThead.clone(false, true)).addClass("dataTable").addClass("dragTable").append($tr.clone(false, true)).css({
                                        position: "absolute",
                                        width: $table.width(),
                                        top: top,
                                        left: "0px"
                                    }).data("tableRow", $tr),
                                    height = $tr.parents(".dataTables_scroll").children(".dataTables_scrollHead").height();
                                $tr.css("visibility", "hidden");
                                $area.append($aTable).data("dragInfo", {
                                    dragRow: $tr,
                                    store: {start: $tr.index(), end: null},
                                    y: y,
                                    top: top,
                                    h: height,
                                    dragTable: $aTable
                                });
                                changeSelectable($area, false);
                                $(this).dequeue(queueName)
                            }).dequeue(queueName)
                        }).mousemove(function () {
                            $(this).clearQueue("dragEventQueue")
                        }).mouseup(function () {
                            $(this).clearQueue("dragEventQueue")
                        });
                        var $delBtn = $("<img/>").addClass("operaBtn").addClass("del").attr({
                            title: "删除",
                            src: dex +"images/operate/delete-32.png"
                        }).mousedown(function () {
                            return false
                        }).mouseup(function () {
                            return false
                        }).click(function () {
                            var $tr = $(this).parents("tr:first");
                            shrinkageRow($tr, function () {
                                data.splice($tr.index(), 1);
                                $table.fnDeleteRow($tr[0]);
                                $addBtn.removeClass("disabled").attr("src", dex +"images/operate/add-32.png");
                                activeEnsureBtn()
                            })
                        });
                        $("td:eq(3)", nRow).append($delBtn)
                    },
                    oLanguage: {sEmptyTable: "未配置链接"}
                });
                $table.parent(".dataTables_scrollBody").css("overflow", "hidden").bind("mousemove", function (e) {
                    var $area = $(this), info = $area.data("dragInfo");
                    if (!info) {
                        return
                    }
                    var $tr = info.dragRow, store = info.store, $aTable = info.dragTable;
                    if (info.rowAnimating || $tr == null || info.y == null || info.top == null || info.h == null) {
                        return
                    }
                    var t = e.pageY - info.y + info.top, $tr = $aTable.data("tableRow");
                    if (!$tr || !$tr.length) {
                        return
                    }
                    var h = $area.height(), middleTop = null, trTop = $tr.position().top;
                    t = t < info.h ? info.h : t;
                    t = t > h ? h : t;
                    $aTable.css("top", t + "px");
                    middleTop = t + $aTable.height() / 2;
                    if (middleTop < trTop || middleTop > trTop + $tr.height()) {
                        $tr.siblings(".even,.odd").each(function () {
                            var $this = $(this), top = $this.position().top, queueName = "animateQueue";
                            if (middleTop > top && middleTop < top + $this.height()) {
                                $area.clearQueue(queueName).delay(500, queueName).queue(queueName, function () {
                                    info.rowAnimating = true;
                                    var $new = $("<tr/>").append($("<td/>").append("<div/>"));
                                    if ($tr.index() > $this.index()) {
                                        $this.before($new)
                                    } else {
                                        $this.after($new)
                                    }
                                    $new.find("div").animate({height: $aTable.height() - 4}, 200, function () {
                                        info.rowAnimating = false
                                    });
                                    $aTable.data("tableRow", $new);
                                    shrinkageRow($tr, function () {
                                        var $tbody = $tr.parent();
                                        if ($tr.is(".even") || $tr.is(".odd")) {
                                            $tr.hide()
                                        } else {
                                            $tr.remove()
                                        }
                                        store.end = $new.index();
                                        $tbody.children().each(function (i, tr) {
                                            if (i < store.end) {
                                                var $tr = $(tr);
                                                if ($tr.is(".even") || $tr.is(".odd")) {
                                                    if ($tr.is(":hidden")) {
                                                        store.end = store.end - 1;
                                                        return false
                                                    }
                                                }
                                            }
                                        })
                                    });
                                    $(this).dequeue(queueName)
                                }).dequeue(queueName);
                                return false
                            }
                        })
                    }
                }).bind("mouseup", function (e) {
                    var $area = $(this), info = $area.data("dragInfo"), store = info && info.store;
                    if (!store) {
                        return
                    }
                    var $tbody = $table.children("tbody"), $aTable = $area.children(".dragTable"),
                        $dst = $aTable.data("tableRow");
                    $aTable.removeData("tableRow");
                    if ($dst && $aTable && $dst.length && $aTable.length) {
                        $area.clearQueue("animateQueue");
                        $aTable.animate({top: $dst.position().top}, 500, function () {
                            $(this).remove();
                            if (store.start != null && store.end != null) {
                                var c = data[store.start], i;
                                if (store.start < store.end) {
                                    for (i = store.start + 1; i <= store.end; i++) {
                                        data[i - 1] = data[i]
                                    }
                                } else {
                                    if (store.start > store.end) {
                                        for (i = store.start; i > store.end; i--) {
                                            data[i] = data[i - 1]
                                        }
                                    }
                                }
                                data[store.end] = c;
                                if (store.start != store.end) {
                                    activeEnsureBtn()
                                }
                            }
                            $tbody.children().each(function () {
                                var $tr = $(this);
                                if ($tr.is(".even") || $tr.is(".odd")) {
                                    $tr.css("visibility", "");
                                    $tr.is(":hidden") && $tr.show()
                                } else {
                                    $tr.remove()
                                }
                            });
                            $.each(data, function (i, rowData) {
                                var $tr = $tbody.children(":eq(" + i + ")"), $imgTd = $tr.children("td:eq(0)"),
                                    $img = $imgTd.children(".iconviewer").find("img"),
                                    $name = $tr.children("td:eq(1)").children(".linkName"),
                                    $url = $tr.children("td:eq(2)").children(".linkUrl"),
                                    iconPointIndex = $img.attr("src").lastIndexOf("/"),
                                    iconName = rowData[0] || defaultIconName;
                                $imgTd.IconChooser("select", iconName.replace(/16\.png$/, "32.png"));
                                iconName = iconName.replace(/32\.png$/, "16.png");
                                $img.attr("src", $img.attr("src").substring(0, iconPointIndex) + "/" + iconName);
                                if (rowData[1]) {
                                    $name.removeClass("nv").text(lengthLimit(rowData[1], 10)).appendTo($name.parent().data(textKey, rowData[1]))
                                } else {
                                    $name.addClass("nv").text("点击编辑").appendTo($name.parent().data(textKey, ""))
                                }
                                if (rowData[2]) {
                                    $url.removeClass("nv").text(lengthLimit(rowData[2], 40)).appendTo($url.parent().data(textKey, rowData[2]))
                                } else {
                                    $url.addClass("nv").text("点击编辑").appendTo($url.parent().data(textKey, ""))
                                }
                            });
                            changeSelectable($area, true)
                        })
                    }
                    $area.removeData("dragInfo")
                });
                var url = {}, hyperLinkIds = [{id: _this.type + "_link_icons", prop: "icon"}, {
                    id: _this.type + "_link_names",
                    prop: "name"
                }, {id: _this.type + "_link_links", prop: "link"}, {id: _this.type + "_link_opens", prop: "open"}];
                $.each(hyperLinkIds, function (i, m) {
                    var rel = _this._panelConfig[_this.type].relation[m.id], fn = _this._valueParser[rel.type],
                        value = _this._getValue(m.id);
                    value = $.isFunction(fn) ? fn(value, true) : value;
                    url[m.prop] = value
                });
                for (i = 0; i < url.name.length; i++) {
                    data.push([url.icon[i].replace(iconRelativeDir, ""), url.name[i], url.link[i], ""]);
                    $table.fnAddData(["", "", "", ""], false)
                }
                $table.fnDraw();
                $addBtn.click(function () {
                    var maxLinkNum = 5, length = $table.fnGetNodes().length;
                    if (length < maxLinkNum) {
                        data.push(["", "", "", ""]);
                        $table.fnAddData(["", "", "", ""]);
                        if (length + 1 === maxLinkNum) {
                            $(this).addClass("disabled").attr("src", dex +"images/operate/add_gray-32.png")
                        }
                        activeEnsureBtn()
                    }
                });
                $ensureBtn.click(function () {
                    if ($(this).is(".disabled")) {
                        return
                    }
                    var flag = false, url = {icon: [], name: [], link: [], open: []}, save = function (url) {
                        $.each(hyperLinkIds, function (i, m) {
                            var rel = _this._panelConfig[_this.type].relation[m.id], fn = _this._valueParser[rel.type],
                                value = url[m.prop];
                            value = $.isFunction(fn) ? fn(value) : value;
                            _this._setValue(m.id, value)
                        })
                    };
                    $.each(data, function (index, arr) {
                        if (arr[0] && arr[1] && arr[2]) {
                            url.icon.push(iconRelativeDir + arr[0]);
                            url.name.push(arr[1]);
                            url.link.push(arr[2]);
                            url.open.push("_blank")
                        } else {
                            flag = true
                        }
                    });
                    if (flag) {
                        $.jConfirm({
                            ParentWindowId: "hyperLinkConfig",
                            content: "图标、名称、URL不能为空，当存在为空的属性时，对应的记录会自动删除，若继续请点击确定按钮，否则点击取消按钮进行缺失属性的增补.",
                            callback: function (flag) {
                                if (flag) {
                                    save(url);
                                    linkWindow.close()
                                }
                            }
                        })
                    } else {
                        save(url);
                        linkWindow.close()
                    }
                });

                function lengthLimit(text, maxLength) {
                    return text.length > maxLength ? text.substring(0, maxLength) + "..." : text
                }

                function shrinkageRow($tr, callback) {
                    $tr.parent().children(".tmpRow").each(function () {
                        var $this = $(this);
                        if ($this.data("mk") === $tr.data("rowSequence")) {
                            $this.remove()
                        }
                    });
                    var $div = $("<div/>").height($tr.height() - 4),
                        $td = $("<td/>").css({paddingTop: 0, paddingBottom: 0}).append($div),
                        $new = $("<tr/>").addClass("tmpRow").data("mk", $tr.data("rowSequence")).append($td);
                    $tr.before($new).hide();
                    $div.animate({height: 0}, 200, function () {
                        $new.remove();
                        $.isFunction(callback) && callback()
                    })
                }

                function changeSelectable(element, allow) {
                    if (element) {
                        var $element = element instanceof jQuery ? element : $(element);
                        if ($.browser.msie) {
                            $element.unbind("selectstart").bind("selectstart", function (e) {
                                e.stopPropagation();
                                !allow && e.preventDefault()
                            })
                        } else {
                            if (allow) {
                                $element.removeClass("unselectable")
                            } else {
                                $element.addClass("unselectable")
                            }
                        }
                    }
                }

                function activeEnsureBtn() {
                    $ensureBtn.removeClass("disabled").attr("src", dex +"images/operate/ensure-32.png")
                }
            })
        }, _effect4Label: function (panelSuffix, effectSuffix) {
            var _this = this, _type = _this.type, _callee = arguments.callee, _cache = _callee._domCache;
            if (!_cache) {
                _cache = {}
            }
            if (_cache[effectSuffix]) {
                show(_cache[effectSuffix])
            } else {
                var effect = _this._panelConfig[_type].effect;
                if (effect && effect.font) {
                    _this._requestPage(effect.font, show)
                }
            }

            function show(data) {
                _cache[effectSuffix] = data;
                data = $(data);
                var w = $.MsgWindow({
                        WindowId: "effect4Label",
                        WindowTitle: "名称效果",
                        WindowWidth: 263,
                        WindowHeight: 328,
                        WindowResizable: false,
                        WindowMaximize: false,
                        WindowMinimize: false,
                        WindowClosableByEsc: true,
                        showOverlay: true,
                        content: data
                    }),
                    keys = ["weight", "italic", "stroke", "stroke_color", "border", "border_color", "border_fill_color", "border_radius", "shadow_h", "shadow_v", "shadow_blur", "shadow_color", "opacity"];
                _this.switchs(data.find(".switch"));
                _this.slider(data.find(".slider"), {
                    maxLimit: function () {
                        return parseInt($("#" + _this._panelConfig[_type].name + "_font_size").val() / 2, 10)
                    }
                });
                _this.colorPicker(data.find(".color-picker"), "effect4Label");
                var $chk = data.find(":checkbox[id^='apply2_']");
                data.find(".check_all").click(function () {
                    _this._checkAll($chk)
                });
                data.find(".check_invert").click(function () {
                    _this._checkInvert($chk)
                });
                data.find(".apply_button").click(function () {
                    var key, i, $apply;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!(shadowKey(key) || weightKey(key) || italicKey(key))) {
                            $apply = $("#apply2_" + effectSuffix + "_" + key);
                            if (!$apply.length || $apply.prop("checked")) {
                                _this._setValue(panelSuffix + "_" + key, _this._getValue(effectSuffix + "_" + key))
                            }
                            if ($apply.length) {
                                $("#apply2_" + panelSuffix + "_" + key).prop("checked", $apply.prop("checked"))
                            }
                        }
                    }
                    setWeightValue();
                    setItalicValue();
                    setShadowValue();
                    w.close()
                });
                data.find(".reset_button").click(function () {
                    var id, rel = _this._panelConfig[_type].relation, o = _this.propertyObject(), key, i;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            id = panelSuffix + "_" + key;
                            _this._setValue(id, _this._getPropValue(o, rel[id]))
                        }
                    }
                    id = panelSuffix + "_shadow";
                    _this._setValue(id, _this._getPropValue(o, rel[id]));
                    data.find(".chk-field :checkbox").prop("checked", true);
                    initValue()
                });
                data.find(".cancel_button").click(function () {
                    w.close()
                });
                setTimeout(initValue, 750);

                function initValue() {
                    var i, key;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!(shadowKey(key) || weightKey(key) || italicKey(key))) {
                            _this._setValue(effectSuffix + "_" + key, $("#" + panelSuffix + "_" + key).val())
                        }
                    }
                    initWeightValue();
                    initItalicValue();
                    initShadowValue()
                }

                function shadowKey(key) {
                    return key === "shadow_h" || key === "shadow_v" || key === "shadow_blur"
                }

                function setShadowValue() {
                    var shadowStr = "", $apply = null, flag = false;
                    var arr = _this._getValue(panelSuffix + "_shadow").split(",");
                    spelling("_shadow_h", arr[0]);
                    spelling("_shadow_v", arr[1]);
                    spelling("_shadow_blur", arr[2]);
                    _this._setValue(panelSuffix + "_shadow", shadowStr);
                    $apply = $("#apply2_" + panelSuffix + "_shadow");
                    if ($apply.length) {
                        $apply.prop("checked", flag)
                    }

                    function spelling(key, val) {
                        $apply = $("#apply2_" + effectSuffix + key);
                        if (!$apply.length || $apply.prop("checked")) {
                            flag = true;
                            shadowStr += _this._getValue(effectSuffix + key)
                        } else {
                            shadowStr += val
                        }
                        shadowStr += ","
                    }
                }

                function initShadowValue() {
                    var arr = $("#" + panelSuffix + "_shadow").val().split(",");
                    _this._setValue(effectSuffix + "_shadow_h", arr[0]);
                    _this._setValue(effectSuffix + "_shadow_v", arr[1]);
                    _this._setValue(effectSuffix + "_shadow_blur", arr[2])
                }

                function weightKey(key) {
                    return key === "weight"
                }

                function setWeightValue() {
                    var $apply = $("#apply2_" + effectSuffix + "_weight");
                    if (!$apply.length || $apply.prop("checked")) {
                        _this._setValue(panelSuffix + "_weight", $("#" + effectSuffix + "_weight").prop("checked") ? "bold" : "normal")
                    }
                    if ($apply.length) {
                        $("#apply2_" + panelSuffix + "_weight").prop("checked", $apply.prop("checked"))
                    }
                }

                function initWeightValue() {
                    _this._setValue(effectSuffix + "_weight", $("#" + panelSuffix + "_weight").val() === "bold")
                }

                function italicKey(key) {
                    return key === "italic"
                }

                function setItalicValue() {
                    var $apply = $("#apply2_" + effectSuffix + "_italic");
                    if (!$apply.length || $apply.prop("checked")) {
                        _this._setValue(panelSuffix + "_italic", $("#" + effectSuffix + "_italic").prop("checked") ? "italic" : "normal")
                    }
                    if ($apply.length) {
                        $("#apply2_" + panelSuffix + "_italic").prop("checked", $apply.prop("checked"))
                    }
                }

                function initItalicValue() {
                    _this._setValue(effectSuffix + "_italic", $("#" + panelSuffix + "_italic").val() === "italic")
                }
            }
        }, _effect4Expand: function (panelSuffix, effectSuffix) {
            var _this = this, _type = _this.type, _callee = arguments.callee, _cache = _callee._domCache;
            if (!_cache) {
                _cache = {}
            }
            if (_cache[effectSuffix]) {
                show(_cache[effectSuffix])
            } else {
                var effect = _this._panelConfig[_type].effect;
                if (effect && effect.expand) {
                    _this._requestPage(effect.expand, show)
                }
            }

            function show(data) {
                _cache[effectSuffix] = data;
                data = $(data);
                var w = $.MsgWindow({
                    WindowId: "effect4Expand",
                    WindowTitle: "展开效果",
                    WindowWidth: 263,
                    WindowHeight: 170,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosableByEsc: true,
                    showOverlay: true,
                    content: data
                }), keys = ["border", "border_color", "shadow_h", "shadow_v", "shadow_blur", "opacity"];
                _this.slider(data.find(".slider"));
                _this.colorPicker(data.find(".color-picker"), "effect4Expand");
                var $chk = data.find(":checkbox[id^='apply2_']");
                data.find(".check_all").click(function () {
                    _this._checkAll($chk)
                });
                data.find(".check_invert").click(function () {
                    _this._checkInvert($chk)
                });
                data.find(".apply_button").click(function () {
                    var key, i, $apply;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            $apply = $("#apply2_" + effectSuffix + "_" + key);
                            if (!$apply.length || $apply.prop("checked")) {
                                _this._setValue(panelSuffix + "_" + key, _this._getValue(effectSuffix + "_" + key))
                            }
                            if ($apply.length) {
                                $("#apply2_" + panelSuffix + "_" + key).prop("checked", $apply.prop("checked"))
                            }
                        }
                    }
                    setShadowValue();
                    w.close()
                });
                data.find(".reset_button").click(function () {
                    var id, rel = _this._panelConfig[_type].relation, o = _this.propertyObject(), key, i;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            id = panelSuffix + "_" + key;
                            _this._setValue(id, _this._getPropValue(o, rel[id]))
                        }
                    }
                    id = panelSuffix + "_shadow";
                    _this._setValue(id, _this._getPropValue(o, rel[id]));
                    data.find(".chk-field :checkbox").prop("checked", true);
                    initValue()
                });
                data.find(".cancel_button").click(function () {
                    w.close()
                });
                setTimeout(initValue, 750);

                function initValue() {
                    var i, key;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            _this._setValue(effectSuffix + "_" + key, $("#" + panelSuffix + "_" + key).val())
                        }
                    }
                    initShadowValue()
                }

                function shadowKey(key) {
                    return key === "shadow_h" || key === "shadow_v" || key === "shadow_blur"
                }

                function setShadowValue() {
                    var shadowStr = "", $apply = null, flag = false;
                    var arr = _this._getValue(panelSuffix + "_shadow").split(",");
                    spelling("_shadow_h", arr[0]);
                    spelling("_shadow_v", arr[1]);
                    spelling("_shadow_blur", arr[2]);
                    _this._setValue(panelSuffix + "_shadow", shadowStr);
                    $apply = $("#apply2_" + panelSuffix + "_shadow");
                    if ($apply.length) {
                        $apply.prop("checked", flag)
                    }

                    function spelling(key, val) {
                        $apply = $("#apply2_" + effectSuffix + key);
                        if (!$apply.length || $apply.prop("checked")) {
                            flag = true;
                            shadowStr += _this._getValue(effectSuffix + key)
                        } else {
                            shadowStr += val
                        }
                        shadowStr += ","
                    }
                }

                function initShadowValue() {
                    var arr = $("#" + panelSuffix + "_shadow").val().split(",");
                    _this._setValue(effectSuffix + "_shadow_h", arr[0]);
                    _this._setValue(effectSuffix + "_shadow_v", arr[1]);
                    _this._setValue(effectSuffix + "_shadow_blur", arr[2])
                }
            }
        }, _effect4Line: function (panelSuffix, effectSuffix) {
            var _this = this, _type = _this.type, _callee = arguments.callee, _cache = _callee._domCache;
            if (!_cache) {
                _cache = {}
            }
            if (_cache[effectSuffix]) {
                show(_cache[effectSuffix])
            } else {
                var effect = _this._panelConfig[_type].effect;
                if (effect && effect.line) {
                    _this._requestPage(effect.line, show)
                }
            }

            function show(data) {
                _cache[effectSuffix] = data;
                data = $(data);
                var w = $.MsgWindow({
                    WindowId: "effect4Line",
                    WindowTitle: "连线效果",
                    WindowWidth: 263,
                    WindowHeight: 170,
                    WindowResizable: false,
                    WindowMaximize: false,
                    WindowMinimize: false,
                    WindowClosableByEsc: true,
                    showOverlay: true,
                    content: data
                }), keys = ["border", "border_color", "shadow_h", "shadow_v", "shadow_blur", "opacity"];
                _this.slider(data.find(".slider"));
                _this.colorPicker(data.find(".color-picker"), "effect4Line");
                var $chk = data.find(":checkbox[id^='apply2_']");
                data.find(".check_all").click(function () {
                    _this._checkAll($chk)
                });
                data.find(".check_invert").click(function () {
                    _this._checkInvert($chk)
                });
                data.find(".apply_button").click(function () {
                    var key, i, $apply;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            $apply = $("#apply2_" + effectSuffix + "_" + key);
                            if (!$apply.length || $apply.prop("checked")) {
                                _this._setValue(panelSuffix + "_" + key, _this._getValue(effectSuffix + "_" + key))
                            }
                            if ($apply.length) {
                                $("#apply2_" + panelSuffix + "_" + key).prop("checked", $apply.prop("checked"))
                            }
                        }
                    }
                    setShadowValue();
                    w.close()
                });
                data.find(".reset_button").click(function () {
                    var id, rel = _this._panelConfig[_type].relation, o = _this.propertyObject(), key, i;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            id = panelSuffix + "_" + key;
                            _this._setValue(id, _this._getPropValue(o, rel[id]))
                        }
                    }
                    id = panelSuffix + "_shadow";
                    _this._setValue(id, _this._getPropValue(o, rel[id]));
                    data.find(".chk-field :checkbox").prop("checked", true);
                    initValue()
                });
                data.find(".cancel_button").click(function () {
                    w.close()
                });
                setTimeout(initValue, 750);

                function initValue() {
                    var i, key;
                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];
                        if (!shadowKey(key)) {
                            _this._setValue(effectSuffix + "_" + key, $("#" + panelSuffix + "_" + key).val())
                        }
                    }
                    initShadowValue()
                }

                function shadowKey(key) {
                    return key === "shadow_h" || key === "shadow_v" || key === "shadow_blur"
                }

                function setShadowValue() {
                    var shadowStr = "", $apply = null, flag = false;
                    var arr = _this._getValue(panelSuffix + "_shadow").split(",");
                    spelling("_shadow_h", arr[0]);
                    spelling("_shadow_v", arr[1]);
                    spelling("_shadow_blur", arr[2]);
                    _this._setValue(panelSuffix + "_shadow", shadowStr);
                    $apply = $("#apply2_" + panelSuffix + "_shadow");
                    if ($apply.length) {
                        $apply.prop("checked", flag)
                    }

                    function spelling(key, val) {
                        $apply = $("#apply2_" + effectSuffix + key);
                        if (!$apply.length || $apply.prop("checked")) {
                            flag = true;
                            shadowStr += _this._getValue(effectSuffix + key)
                        } else {
                            shadowStr += val
                        }
                        shadowStr += ","
                    }
                }

                function initShadowValue() {
                    var arr = $("#" + panelSuffix + "_shadow").val().split(",");
                    _this._setValue(effectSuffix + "_shadow_h", arr[0]);
                    _this._setValue(effectSuffix + "_shadow_v", arr[1]);
                    _this._setValue(effectSuffix + "_shadow_blur", arr[2])
                }
            }
        }, help: function (type) {
            var _type = type || this.type;
            $("#" + _type + "_panel .help").unbind("click").click(function () {
                var id = $(this).attr("id"), helpNode = testData.config.help[id];
                if (helpNode) {
                    $.jAlert({
                        type: "help",
                        WindowWidth: 480,
                        content: "<label class='help-head'>" + helpNode.head + "</label><hr class='help-space'><label class='help-body'>" + helpNode.body + "</label>"
                    })
                } else {
                    $.jAlert({type: "error", content: "帮助内容不存在！知识号[" + id + "]"})
                }
            })
        }, _nodeCoords: function () {
            var type = this.type, focus = $.topology.selector.focus(), isChangeX = false, isChangeY = false, oriCoords,
                currX, currY, offsetX = 0, offsetY = 0;
            if (type == "container") {
                isChangeX = true;
                isChangeY = true;
                currX = parseInt($("#container_x").val());
                currY = parseInt($("#container_y").val())
            } else {
                if (type == "multiContainer") {
                    isChangeX = $("#apply2_containers_x").prop("checked");
                    isChangeY = $("#apply2_containers_y").prop("checked");
                    if (isChangeX) {
                        currX = parseInt($("#containers_x").val())
                    }
                    if (isChangeY) {
                        currY = parseInt($("#containers_y").val())
                    }
                } else {
                    if (type == "symbol") {
                        isChangeX = true;
                        isChangeY = true;
                        currX = parseInt($("#symbol_x").val());
                        currY = parseInt($("#symbol_y").val())
                    } else {
                        if (type == "multiSymbol") {
                            isChangeX = $("#apply2_symbols_x").prop("checked");
                            isChangeY = $("#apply2_symbols_y").prop("checked");
                            if (isChangeX) {
                                currX = parseInt($("#symbols_x").val())
                            }
                            if (isChangeY) {
                                currY = parseInt($("#symbols_y").val())
                            }
                        } else {
                            if (type == "multiNode") {
                                isChangeX = $("#apply2_node_x").prop("checked");
                                isChangeY = $("#apply2_node_y").prop("checked");
                                if (isChangeX) {
                                    currX = parseInt($("#node_x").val())
                                }
                                if (isChangeY) {
                                    currY = parseInt($("#node_y").val())
                                }
                            }
                        }
                    }
                }
            }
            var symbols = $.topology.selector.symbols();
            $.each(symbols, function (i, id) {
                var symbol = $.topology.find(id, "symbol");
                if (!symbol.parent || !$.topology.selector.contains(symbol.parent)) {
                    oriCoords = getNodeCoords(symbol);
                    offsetX = isChangeX ? currX - oriCoords.x : 0;
                    offsetY = isChangeY ? currY - oriCoords.y : 0;
                    moveNode(symbol, offsetX, offsetY)
                }
            });
            var containers = $.topology.selector.containers();
            $.each(containers, function (i, id) {
                var container = $.topology.find(id, "container");
                oriCoords = getNodeCoords(container);
                offsetX = isChangeX ? currX - oriCoords.x : 0;
                offsetY = isChangeY ? currY - oriCoords.y : 0;
                moveNode(container, offsetX, offsetY)
            });

            function moveNode(node, dx, dy) {
                if (dx || dy) {
                    $.topology.view.moveNodes([node], dx, dy);
                    $.topology.view.moveNodesStop([node])
                }
            }

            function getNodeCoords(node) {
                if ($.topology.isContainer(node)) {
                    return {x: node.isExpand ? node.expandX : node.x, y: node.isExpand ? node.expandY : node.y}
                } else {
                    return {x: node.x, y: node.y}
                }
            }
        }, _coordinatesValidate: function (id, zh) {
            $("#" + id).addClass("jvalidate").attr({
                validtype: "required,number,integer,range",
                validpar: $.toJSON({range: [0]}),
                requiredmsg: "必须填写" + zh + ".",
                numbermsg: zh + "为像素值, 请使用数字.",
                integermsg: zh + "为像素值, 请使用整数.",
                rangemsg: zh + "为像素值, 请不要使用负数."
            })
        }, _nameValidate: function (id, length) {
            $("#" + id).addClass("jvalidate").attr({
                validtype: "maxLength",
                validpar: $.toJSON({length: length}),
                maxLengthmsg: "名称过长 [ " + length + " ] , 请减少名称内容."
            })
        }, _lengthValidate: function (id, zh) {
            $("#" + id).addClass("jvalidate").attr({
                validtype: "required,number,integer,range",
                validpar: $.toJSON({range: [1, 9999]}),
                requiredmsg: "必须填写" + zh + ".",
                numbermsg: zh + "为像素值, 请使用数字.",
                integermsg: zh + "为像素值, 请使用整数.",
                rangemsg: zh + "为像素值, 范围${range[0]}至${range[1]}."
            })
        }, _coverageValidate: function (id) {
            var zh = "所在图层";
            $("#" + id).addClass("jvalidate").attr({
                validtype: "required,number,integer",
                requiredmsg: "必须填写" + zh + ".",
                numbermsg: zh + "为视觉层次值, 请使用数字.",
                integermsg: zh + "为视觉层次值, 请使用整数."
            })
        }, _fontSupport: function (id) {
            var eventName = "change.font_family_support";
            $("#" + id).unbind(eventName).bind(eventName, function () {
                var $this = $(this), defaultOption = "SimSun";
                if ($this.val() === defaultOption) {
                    return
                }
                if (!$.topology.graphEngine.support.font) {
                    var msgAlert = function (msg) {
                        $.jAlert({content: msg, WindowDraggable: false, showOverlay: true})
                    };
                    if ($.browser.chrome) {
                        msgAlert("您的浏览器版本较低，不支持针对效果的显示，建议升级至Chrome 8或更高版本！")
                    } else {
                        if ($.browser.safari) {
                            msgAlert("您的浏览器版本较低，不支持针对效果的显示，建议升级至Safari 6或更高版本！")
                        } else {
                            if ($.browser.opera) {
                                msgAlert("您的浏览器版本较低，不支持针对效果的显示，建议升级至Opera 9或更高版本！")
                            } else {
                                msgAlert("您的浏览器对标准兼容较差，不支持针对字体的显示，建议更换浏览器！")
                            }
                        }
                    }
                }
            })
        }, _filterSupport: function (id) {
            var eventName = "click.font_effect_support";
            $("#" + id).unbind(eventName).bind(eventName, function () {
                if ($.topology.graphEngine.support.filter) {
                    var $this = $(this);
                    var id = $this.attr("id");
                    if ($this.is(".apply_button")) {
                        var effectSuffix = (id === "container_font_effect" || id === "symbol_font_effect" ? "label" : "labels");
                        $.propertyPanel._effect4Label(id, effectSuffix)
                    } else {
                        if ($this.is(".expand-effect")) {
                            $.propertyPanel._effect4Expand(id, id.replace(/\_effect/, ""))
                        } else {
                            if ($this.is(".line-effect")) {
                                $.propertyPanel._effect4Line(id, id.replace(/\_effect/, ""))
                            }
                        }
                    }
                } else {
                    var msgAlert = function (msg) {
                        $.jAlert({content: msg, WindowDraggable: false, showOverlay: true})
                    };
                    if ($.browser.msie) {
                        msgAlert("您的浏览器版本较低，不支持针对效果的设置与显示，建议升级至IE 10或更高版本，或者更换浏览器！")
                    } else {
                        if ($.browser.chrome) {
                            msgAlert("您的浏览器版本较低，不支持针对效果的设置与显示，建议升级至Chrome 8或更高版本！")
                        } else {
                            if ($.browser.mozilla) {
                                msgAlert("您的浏览器版本较低，不支持针对效果的设置与显示，建议升级至FireFox 3或更高版本！")
                            } else {
                                if ($.browser.safari) {
                                    msgAlert("您的浏览器版本较低，不支持针对效果的设置与显示，建议升级至Safari 6或更高版本！")
                                } else {
                                    if ($.browser.opera) {
                                        msgAlert("您的浏览器版本较低，不支持针对效果的设置与显示，建议升级至Opera 9或更高版本！")
                                    } else {
                                        msgAlert("您的浏览器对标准兼容较差，不支持针对效果的设置与显示，建议更换浏览器！")
                                    }
                                }
                            }
                        }
                    }
                }
            })
        }, _animateSupport: function (id) {
            var eventName = "change.font_effect_support";
            $("#" + id).unbind(eventName).bind(eventName, function () {
                var $this = $(this), defaultOption = "matrix";
                if ($this.val() === defaultOption) {
                    return
                }
                if (!$.topology.graphEngine.support.animation) {
                    var msgAlert = function (msg) {
                        $.jAlert({content: msg, WindowDraggable: false, showOverlay: true})
                    };
                    if ($.browser.msie) {
                        msgAlert("您的浏览器对标准兼容较差，不支持动画渲染，建议更换浏览器，或者开启<a 链接打开兼容性视图说明与开启方法>兼容性视图</a>后<a href='" + "tools/SVGView.exe'>安装插件</a>")
                    } else {
                        if ($.browser.chrome) {
                            msgAlert("您的浏览器版本较低，不支持动画渲染，建议升级至Chrome 5或更高版本！")
                        } else {
                            if ($.browser.mozilla) {
                                msgAlert("您的浏览器版本较低，不支持动画渲染，建议升级至FireFox 4或更高版本！")
                            } else {
                                if ($.browser.safari) {
                                    msgAlert("您的浏览器版本较低，不支持动画渲染，建议升级至Safari 4或更高版本！")
                                } else {
                                    if ($.browser.opera) {
                                        msgAlert("您的浏览器版本较低，不支持动画渲染，建议升级至Opera 9或更高版本！")
                                    } else {
                                        msgAlert("您的浏览器对标准兼容较差，不支持动画渲染，建议更换浏览器")
                                    }
                                }
                            }
                        }
                    }
                }
            })
        }, _hiddenSpeech: function (id) {
            if ($.topology.config.global["speech_service"] != 1 || this.options.scope != 2) {
                $("#" + id + "_block").hide()
            }
        }, _hiddenAlarmTransferParam: function () {
            if ($.topology.view.type == 2) {
                $("#event_tfr_status_block").hide();
                $("#event_tfr_min_block").hide();
                $("#events_tfr_status_block").hide();
                $("#events_tfr_min_block").hide()
            }
        }, _getPropValue: function (o, map) {
            var getter = this._valueGetter[map.getter];
            if (!getter) {
                getter = this._valueGetter["normal"]
            }
            return getter.apply(this, arguments)
        }, _setPropValue: function (o, map, value) {
            if (typeof map.scope === "undefined" || map.scope == this.options.scope) {
                var setter = this._valueSetter[map.setter];
                if (!setter) {
                    setter = this._valueSetter["normal"]
                }
                setter.apply(this, arguments)
            }
        }, _getValue: function ($e) {
            if (typeof $e === "string") {
                $e = $("#" + $e)
            }
            if ($e && $e.length) {
                if ($e.is("select")) {
                    return $e.val()
                } else {
                    if ($e.is(".switch")) {
                        return $e.prop("checked")
                    } else {
                        if ($e.is(".slider")) {
                            return $e.slider("value")
                        } else {
                            if ($e.is("input")) {
                                return $e.val()
                            }
                        }
                    }
                }
            }
        }, _setValue: function ($e, value) {
            var eid = null;
            if (typeof $e === "string") {
                eid = $e;
                $e = $("#" + eid)
            } else {
                eid = $e.attr("id")
            }
            if ($e && $e.length) {
                var isMulti = this.type.indexOf("multi") != -1,
                    map = this._panelConfig[this.type].relation[eid] || this._panelConfig[isMulti ? "multiEvent" : "event"].relation[eid],
                    defValue = (map && map.def) || null;
                if (defValue != null) {
                    var fn = this._valueParser[map.type];
                    defValue = $.isFunction(fn) ? fn(defValue) : defValue
                }
                if ($e.is("select")) {
                    var tmp = value || defValue;
                    $e.val(tmp)
                } else {
                    if ($e.is(".switch")) {
                        value = value == null ? defValue : value;
                        $e.prop("checked", value);
                        $e.iphoneStyle("refresh")
                    } else {
                        if ($e.is(".slider")) {
                            value = value === "" || isNaN(value) ? (defValue || 0) : value;
                            $e.slider("value", value);
                            $("#" + eid + "_val").text(value + ($e.attr("propunit") || "%"))
                        } else {
                            if ($e.is("input")) {
                                value = value == null ? (defValue || "") : value;
                                $e.val(value);
                                if ($e.is(".color-picker")) {
                                    var fontColor = null;
                                    if (value) {
                                        var rgb = $.color.color2rgb(value);
                                        fontColor = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114 < 192 ? "#fff" : "#000"
                                    } else {
                                        value = "#fff";
                                        fontColor = "#000"
                                    }
                                    $e.animate({"background-color": value, "color": fontColor}, 300)
                                } else {
                                    if ($e.is(".icon-picker") || $e.is(".img-picker") || $e.is(".spinner")) {
                                    } else {
                                        if ($e.is("#lines_dashed_val") || $e.is("#line_dashed_val")) {
                                            $("#" + eid.replace(/\_val/, "")).attr({src: dex +"images/dashed/" + (value || "none") + ".png"})
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }, _checkAll: function ($chk) {
            $chk.prop("checked", true)
        }, _checkInvert: function ($chk) {
            $chk.each(function () {
                var $this = $(this);
                $this.prop("checked", !$this.prop("checked"))
            })
        }, _requestPage: function (url, callback) {
            callback.call(this, testPanelHtml[url])
        }
    });
    $.propertyPanel = new PropertyPanel();
    $.fn.extend({
        propertyPanel: function (options) {
            return this.each(function () {
                if (options.panelTypes) {
                    var $parent = $(this).empty();
                    $.each(options.panelTypes, function (i, value) {
                        if ($.propertyPanel._panelConfig[value]) {
                            $("<div class='prop-panel'/>").attr("id", value + "_panel").appendTo($parent)
                        }
                    })
                }
            })
        }
    })
})(jQuery);
var testPanelHtml = {
    "view.html": '<table id="property_panel_view" class="property-panel-table"><tr id="view_name_block"><td class="label-field">拓扑名称</td><td class="component-field"><input id="view_name" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="view_width_block"><td class="label-field">拓扑宽度</td><td class="component-field"><input id="view_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="view_height_block"><td class="label-field">拓扑高度</td><td class="component-field"><input id="view_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="view_bgimg_block"><td class="label-field">背景图片</td><td class="component-field"><input id="view_bgimg" type="text" disabled="true" class="img-picker proptext" /></td><td class="help-field"></td></tr><!--<tr id="view_bgcolor_block"><td class="label-field">背景颜色</td><td class="component-field"><input id="view_bgcolor" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="view_bgopacity_block"><td class="label-field">背景透明度</td><td class="component-field"><table style="border: 0px;"><tr><td><div id="view_bgopacity" class="slider" /></td><td><div id="view_bgopacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr>--><tr id="view_adapter_block"><td class="label-field">屏幕自适应</td><td class="component-field"><input id="view_adapter" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="view_location_block"><td class="label-field">相对定位</td><td class="component-field"><input id="view_location" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="view_hidden_nav_block"><td class="label-field">导航隐藏</td><td class="component-field"><input id="view_hidden_nav" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="view_speech_block"><td class="label-field">告警朗读</td><td class="component-field"><input id="view_speech" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "symbol.html": '<table id="property_panel_symbol" class="property-panel-table"><tr id="symbol_name_block"><td class="label-field">节点名称</td><td class="component-field"><input id="symbol_name" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbol_name_hidden_block"><td class="label-field">名称隐藏</td><td class="component-field"><input id="symbol_name_hidden" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="symbol_name_reflash_block"><td class="label-field">自动更新</td><td class="component-field"><input id="symbol_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="symbol_x_block"><td class="label-field">横坐标</td><td class="component-field"><input id="symbol_x" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbol_y_block"><td class="label-field">纵坐标</td><td class="component-field"><input id="symbol_y" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbol_icon_block"><td class="label-field">节点图标</td><td class="component-field"><input id="symbol_icon" type="text" class="icon-picker proptext" /></td><td class="help-field"></td></tr><tr id="symbol_icon_width_block"><td class="label-field">图标宽度</td><td class="component-field"><input id="symbol_icon_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbol_icon_height_block"><td class="label-field">图标高度</td><td class="component-field"><input id="symbol_icon_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbol_icon_opacity_block"><td class="label-field">图标透明度</td><td class="component-field"><table style="border: 0px;"><tr><td><div id="symbol_icon_opacity" class="slider" /></td><td><div id="symbol_icon_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="symbol_icon_shadow_block"><td class="label-field">图标阴影</td><td class="component-field"><select id="symbol_icon_shadow" class="propsel"><option value="null" selected="selected">不使用</option><option value="top_left">左上</option><option value="bottom_left">左下</option><option value="bottom_right">右下</option><option value="top_right">右上</option><option value="top">上</option><option value="left">左</option><option value="bottom">下</option><option value="right">右</option></select></td><td class="help-field"></td></tr><tr id="symbol_font_family_block"><td class="label-field">名称字体</td><td class="component-field"><select id="symbol_font_family" class="propsel"><option value="SimSun" selected="selected">宋体</option><option value="SimHei">黑体</option><option value="KaiTi_GB2312">楷体</option><option value="LiSu">隶书*</option><option value="YouYuan">幼圆*</option><option value="COURIER">Courier*</option><option value="MODERN">Modern*</option></select></td><td class="help-field"></td></tr><tr id="symbol_font_size_block"><td class="label-field">名称字号</td><td class="component-field"><select id="symbol_font_size" class="propsel"><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12" selected="selected">12</option><option value="14">14</option><option value="16">16</option><option value="18">20</option><option value="20">24</option><option value="24">28</option><option value="32">32</option></select></td><td class="help-field"></td></tr><tr id="symbol_font_effect_block"><td class="label-field">名称效果</td><td class="component-field"><input id="symbol_font_effect_weight" type="hidden" /><input id="symbol_font_effect_italic" type="hidden" /><input id="symbol_font_effect_stroke" type="hidden" /><input id="symbol_font_effect_stroke_color" type="hidden" /><input id="symbol_font_effect_border" type="hidden" /><input id="symbol_font_effect_border_color" type="hidden" /><input id="symbol_font_effect_border_fill_color" type="hidden" /><input id="symbol_font_effect_border_radius" type="hidden" /><input id="symbol_font_effect_opacity" type="hidden" /><input id="symbol_font_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr id="symbol_name_location_block"><td class="label-field">名称位置</td><td class="component-field">水平方向<select id="symbol_name_location_h" class="minipropsel"><option value="left">左侧</option><option value="center" selected="selected">中部</option><option value="right">右侧</option></select><br>垂直方向<select id="symbol_name_location_v" class="minipropsel"><option value="top">顶部</option><option value="middle">中部</option><option value="bottom" selected="selected">底部</option></select></td><td class="help-field"></td></tr><tr id="symbol_link_block"><td class="label-field">超链接</td><td class="component-field"><input id="symbol_link_names" type="hidden" /><input id="symbol_link_icons" type="hidden" /><input id="symbol_link_links" type="hidden" /><input id="symbol_link_opens" type="hidden" /><input id="symbol_link" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "container.html": '<table id="property_panel_container" class="property-panel-table"><tr id="container_name_block"><td class="label-field">容器名称</td><td class="component-field"><input id="container_name" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_name_hidden_block"><td class="label-field">名称隐藏</td><td class="component-field"><input id="container_name_hidden" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="container_class_block"><td class="label-field">容器类型</td><td class="component-field"><input id="container_class" type="text" class="proptext" readonly="readonly" /></td><td class="help-field"></td></tr><tr id="container_name_reflash_block"><td class="label-field">自动更新</td><td class="component-field"><input id="container_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="container_x_block"><td class="label-field">横坐标</td><td class="component-field"><input id="container_x" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_y_block"><td class="label-field">纵坐标</td><td class="component-field"><input id="container_y" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_icon_block"><td class="label-field">容器图标</td><td class="component-field"><input id="container_icon" type="text" class="icon-picker proptext" /></td><td class="help-field"></td></tr><tr id="container_icon_width_block"><td class="label-field">图标宽度</td><td class="component-field"><input id="container_icon_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_icon_height_block"><td class="label-field">图标高度</td><td class="component-field"><input id="container_icon_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_icon_opacity_block"><td class="label-field">图标透明度</td><td class="component-field"><table style="border: 0px;"><tr><td><div id="container_icon_opacity" class="slider" /></td><td><div id="container_icon_opacity_val" class="slider-val"></td></tr></table></td><td class="help-field"></td></tr><tr id="container_icon_shadow_block"><td class="label-field">图标阴影</td><td class="component-field"><select id="container_icon_shadow" class="propsel"><option value="null" selected="selected">不使用</option><option value="top_left">左上</option><option value="bottom_left">左下</option><option value="bottom_right">右下</option><option value="top_right">右上</option><option value="top">上</option><option value="left">左</option><option value="bottom">下</option><option value="right">右</option></select></td><td class="help-field"></td></tr><tr id="container_font_family_block"><td class="label-field">名称字体</td><td class="component-field"><select id="container_font_family" class="propsel"><option value="SimSun" selected="selected">宋体</option><option value="SimHei">黑体</option><option value="KaiTi_GB2312">楷体</option><option value="LiSu">隶书*</option><option value="YouYuan">幼圆*</option><option value="COURIER">Courier*</option><option value="MODERN">Modern*</option></select></td><td class="help-field"></td></tr><tr id="container_font_size_block"><td class="label-field">名称字号</td><td class="component-field"><select id="container_font_size" class="propsel"><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12" selected="selected">12</option><option value="14">14</option><option value="16">16</option><option value="18">20</option><option value="20">24</option><option value="24">28</option><option value="32">32</option></select></td><td class="help-field"></td></tr><tr id="container_font_effect_block"><td class="label-field">名称效果</td><td class="component-field"><input id="container_font_effect_weight" type="hidden" /><input id="container_font_effect_italic" type="hidden" /><input id="container_font_effect_stroke" type="hidden" /><input id="container_font_effect_stroke_color" type="hidden" /><input id="container_font_effect_border" type="hidden" /><input id="container_font_effect_border_color" type="hidden" /><input id="container_font_effect_border_fill_color" type="hidden" /><input id="container_font_effect_border_radius" type="hidden" /><input id="container_font_effect_opacity" type="hidden" /><input id="container_font_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr id="container_name_location_block"><td class="label-field">名称位置</td><td class="component-field">水平方向<select id="container_name_location_h" class="minipropsel"><option value="left">左侧</option><option value="center" selected="selected">中部</option><option value="right">右侧</option></select><br>垂直方向<select id="container_name_location_v" class="minipropsel"><option value="top">顶部</option><option value="middle">中部</option><option value="bottom" selected="selected">底部</option></select></td><td class="help-field"></td></tr><tr id="container_expand_bgcolor_block"><td class="label-field">展开底色</td><td class="component-field"><input id="container_expand_bgcolor" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="container_expand_effect_block"><td class="label-field">展开效果</td><td class="component-field"><input id="container_expand_effect_border" type="hidden" /><input id="container_expand_effect_border_color" type="hidden" /><input id="container_expand_effect_opacity" type="hidden" /><input id="container_expand_effect" type="button" value="编辑..." class="expand-effect" /></td><td class="help-field"></td></tr><tr id="container_expand_autoresize_block" style="display: none;"><td class="label-field">尺寸自适应</td><td class="component-field"><input id="container_expand_autoresize" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="container_expand_width_block" style="display: none;"><td class="label-field">展开宽度</td><td class="component-field"><input id="container_expand_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_expand_height_block" style="display: none;"><td class="label-field">展开高度</td><td class="component-field"><input id="container_expand_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="container_isexpand_block"><td class="label-field">默认展开</td><td class="component-field"><input id="container_isexpand" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="container_ispermit_block"><td class="label-field">允许开合</td><td class="component-field"><input id="container_ispermit" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="container_link_block"><td class="label-field">超链接</td><td class="component-field"><input id="container_link_names" type="hidden" /><input id="container_link_icons" type="hidden" /><input id="container_link_links" type="hidden" /><input id="container_link_opens" type="hidden" /><input id="container_link" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "line.html": '<table id="property_panel_line" class="property-panel-table"><tr id="line_name_block"><td class="label-field">连线名称</td><td class="component-field"><input id="line_name" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="line_class_block"><td class="label-field">连线类型</td><td class="component-field"><input id="line_class" type="text" class="proptext" readonly="readonly" /></td><td class="help-field"></td></tr><tr id="line_name_reflash_block"><td class="label-field">自动更新</td><td class="component-field"><input id="line_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="line_srcnode_block"><td class="label-field">源头节点</td><td class="component-field"><input id="line_srcnode" type="text" class="proptext" readonly="readonly" /></td><td class="help-field"></td></tr><tr id="line_dstnode_block"><td class="label-field">目的节点</td><td class="component-field"><input id="line_dstnode" type="text" class="proptext" readonly="readonly" /></td><td class="help-field"></td></tr><tr id="line_dashed_block"><td class="label-field">连线线型</td><td class="component-field"><input id="line_dashed_val" type="hidden" /><img id="line_dashed" class="dashed-picker"></td><td class="help-field"></td></tr><tr id="line_weight_block"><td class="label-field">连线粗细</td><td class="component-field"><select id="line_weight" class="propsel"><option value="2" selected="selected">2</option><option value="4">4</option><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12">12</option></select></td><td class="help-field"></td></tr><tr id="line_color_block"><td class="label-field">连线颜色</td><td class="component-field"><input id="line_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="line_effect_block"><td class="label-field">连线效果</td><td class="component-field"><input id="line_effect_border" type="hidden" /><input id="line_effect_border_color" type="hidden" /><input id="line_effect_opacity" type="hidden" /><input id="line_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr id="line_path_block"><td class="label-field">连线路径</td><td class="component-field"><input id="line_path" type="text" class="proptext" readonly="readonly" /></td><td class="help-field"></td></tr><tr id="line_link_block"><td class="label-field">超链接</td><td class="component-field"><input id="line_link_names" type="hidden" /><input id="line_link_icons" type="hidden" /><input id="line_link_links" type="hidden" /><input id="line_link_opens" type="hidden" /><input id="line_link" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "event.html": '<table id="property_panel_event" class="property-panel-table"><tr id="event_render_block"><td class="label-field">渲染方式</td><td class="component-field"><select id="event_render" class="propsel"><option value="matrix">颜色</option><option value="animation">动画</option></select></td><td class="help-field"></td></tr><tr id="event_tfr_min_block"><td class="label-field">最小传递</td><td class="component-field"><select id="event_tfr_min" class="propsel"><option value="1">正常</option><option value="2">警告</option><option value="3">轻微</option><option value="4">主要</option><option value="5">严重</option><option value="6">不传递</option></select></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "link.html": "",
    "multi_node.html": '<table id="property_panel_multi_node" class="property-panel-table"><tr id="node_name_hidden_block"><td class="chk-field"><input id="apply2_node_name_hidden" type="checkbox" /></td><td class="label-field2">名称隐藏</td><td class="component-field"><input id="node_name_hidden" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="node_name_reflash_block"><td class="chk-field"><input id="apply2_node_name_reflash" type="checkbox" /></td><td class="label-field2">自动更新</td><td class="component-field"><input id="node_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="node_x_block"><td class="chk-field"><input id="apply2_node_x" type="checkbox" /></td><td class="label-field2">横坐标</td><td class="component-field"><input id="node_x" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="node_y_block"><td class="chk-field"><input id="apply2_node_y" type="checkbox" /></td><td class="label-field2">纵坐标</td><td class="component-field"><input id="node_y" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="node_icon_block"><td class="chk-field"><input id="apply2_node_icon" type="checkbox" /></td><td class="label-field2">图标</td><td class="component-field"><input id="node_icon" type="text" class="icon-picker proptext" /></td><td class="help-field"></td></tr><tr id="node_icon_width_block"><td class="chk-field"><input id="apply2_node_icon_width" type="checkbox" /></td><td class="label-field2">图标宽度</td><td class="component-field"><input id="node_icon_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="node_icon_height_block"><td class="chk-field"><input id="apply2_node_icon_height" type="checkbox" /></td><td class="label-field2">图标高度</td><td class="component-field"><input id="node_icon_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="node_icon_opacity_block"><td class="chk-field"><input id="apply2_node_icon_opacity" type="checkbox" /></td><td class="label-field2">图标透明度</td><td class="component-field"><table style="border: 0px;"><tr><td><div id="node_icon_opacity" class="slider" /></td><td><div id="node_icon_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="node_icon_shadow_block"><td class="chk-field"><input id="apply2_node_icon_shadow" type="checkbox" /></td><td class="label-field2">图标阴影</td><td class="component-field"><select id="node_icon_shadow" class="propsel"><option value="null" selected="selected">不使用</option><option value="top_left">左上</option><option value="bottom_left">左下</option><option value="bottom_right">右下</option><option value="top_right">右上</option><option value="top">上</option><option value="left">左</option><option value="bottom">下</option><option value="right">右</option></select></td><td class="help-field"></td></tr><tr id="node_font_family_block"><td class="chk-field"><input id="apply2_node_font_family" type="checkbox" /></td><td class="label-field2">名称字体</td><td class="component-field"><select id="node_font_family" class="propsel"><option value="SimSun" selected="selected">宋体</option><option value="SimHei">黑体</option><option value="KaiTi_GB2312">楷体</option><option value="LiSu">隶书*</option><option value="YouYuan">幼圆*</option><option value="COURIER">Courier*</option><option value="MODERN">Modern*</option></select></td><td class="help-field"></td></tr><tr id="node_font_size_block"><td class="chk-field"><input id="apply2_node_font_size" type="checkbox" /></td><td class="label-field2">名称字号</td><td class="component-field"><select id="node_font_size" class="propsel"><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12" selected="selected">12</option><option value="14">14</option><option value="16">16</option><option value="18">20</option><option value="20">24</option><option value="24">28</option><option value="32">32</option></select></td><td class="help-field"></td></tr><tr id="node_font_effect_block"><td class="chk-field"></td><td class="label-field2">名称效果</td><td class="component-field"><input id="apply2_node_font_effect_weight" type="checkbox" style="display:none;" /><input id="node_font_effect_weight" type="hidden" /><input id="apply2_node_font_effect_italic" type="checkbox" style="display:none;" /><input id="node_font_effect_italic" type="hidden" /><input id="apply2_node_font_effect_stroke" type="checkbox" style="display:none;" /><input id="node_font_effect_stroke" type="hidden" /><input id="apply2_node_font_effect_stroke_color" type="checkbox" style="display:none;" /><input id="node_font_effect_stroke_color" type="hidden" /><input id="apply2_node_font_effect_border" type="checkbox" style="display:none;" /><input id="node_font_effect_border" type="hidden" /><input id="apply2_node_font_effect_border_color" type="checkbox" style="display:none;" /><input id="node_font_effect_border_color" type="hidden" /><input id="apply2_node_font_effect_border_fill_color" type="checkbox" style="display:none;" /><input id="node_font_effect_border_fill_color" type="hidden" /><input id="apply2_node_font_effect_border_radius" type="checkbox" style="display:none;" /><input id="node_font_effect_border_radius" type="hidden" /><input id="apply2_node_font_effect_shadow" type="checkbox" style="display:none;" /><input id="node_font_effect_shadow" type="hidden" /><input id="apply2_node_font_effect_shadow_color" type="checkbox" style="display:none;" /><input id="node_font_effect_shadow_color" type="hidden" /><input id="apply2_node_font_effect_opacity" type="checkbox" style="display:none;" /><input id="node_font_effect_opacity" type="hidden" /><input id="node_font_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr id="node_name_location_block"><td class="chk-field"><input id="apply2_node_name_location" type="checkbox" /></td><td class="label-field2">名称位置</td><td class="component-field">水平方向<select id="node_name_location_h" class="minipropsel"><option value="left">左侧</option><option value="center" selected="selected">中部</option><option value="right">右侧</option></select><br>垂直方向<select id="node_name_location_v" class="minipropsel"><option value="top">顶部</option><option value="middle">中部</option><option value="bottom" selected="selected">底部</option></select></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "multi_symbol.html": '<table id="property_panel_multi_symbol" class="property-panel-table"><tr id="symbols_name_hidden_block"><td class="chk-field"><input id="apply2_symbols_name_hidden" type="checkbox" /></td><td class="label-field2">名称隐藏</td><td class="component-field"><input id="symbols_name_hidden" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="symbols_name_reflash_block"><td class="chk-field"><input id="apply2_symbols_name_reflash" type="checkbox" /></td><td class="label-field2">自动更新</td><td class="component-field"><input id="symbols_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="symbols_x_block"><td class="chk-field"><input id="apply2_symbols_x" type="checkbox" /></td><td class="label-field2">横坐标</td><td class="component-field"><input id="symbols_x" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbols_y_block"><td class="chk-field"><input id="apply2_symbols_y" type="checkbox" /></td><td class="label-field2">纵坐标</td><td class="component-field"><input id="symbols_y" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbols_icon_block"><td class="chk-field"><input id="apply2_symbols_icon" type="checkbox" /></td><td class="label-field2">节点图标</td><td class="component-field"><input id="symbols_icon" type="text" class="icon-picker proptext" /></td><td class="help-field"></td></tr><tr id="symbols_icon_width_block"><td class="chk-field"><input id="apply2_symbols_icon_width" type="checkbox" /></td><td class="label-field2">图标宽度</td><td class="component-field"><input id="symbols_icon_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbols_icon_height_block"><td class="chk-field"><input id="apply2_symbols_icon_height" type="checkbox" /></td><td class="label-field2">图标高度</td><td class="component-field"><input id="symbols_icon_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="symbols_icon_opacity_block"><td class="chk-field"><input id="apply2_symbols_icon_opacity" type="checkbox" /></td><td class="label-field2">图标透明度</td><td class="component-field"><table style="border: 0px;"><tr><td><div id="symbols_icon_opacity" class="slider" /></td><td><div id="symbols_icon_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="symbols_icon_shadow_block"><td class="chk-field"><input id="apply2_symbols_icon_shadow" type="checkbox" /></td><td class="label-field2">图标阴影</td><td class="component-field"><select id="symbols_icon_shadow" class="propsel"><option value="null" selected="selected">不使用</option><option value="top_left">左上</option><option value="bottom_left">左下</option><option value="bottom_right">右下</option><option value="top_right">右上</option><option value="top">上</option><option value="left">左</option><option value="bottom">下</option><option value="right">右</option></select></td><td class="help-field"></td></tr><tr id="symbols_font_family_block"><td class="chk-field"><input id="apply2_symbols_font_family" type="checkbox" /></td><td class="label-field2">名称字体</td><td class="component-field"><select id="symbols_font_family" class="propsel"><option value="SimSun" selected="selected">宋体</option><option value="SimHei">黑体</option><option value="KaiTi_GB2312">楷体</option><option value="LiSu">隶书*</option><option value="YouYuan">幼圆*</option><option value="COURIER">Courier*</option><option value="MODERN">Modern*</option></select></td><td class="help-field"></td></tr><tr id="symbols_font_size_block"><td class="chk-field"><input id="apply2_symbols_font_size" type="checkbox" /></td><td class="label-field2">名称字号</td><td class="component-field"><select id="symbols_font_size" class="propsel"><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12" selected="selected">12</option><option value="14">14</option><option value="16">16</option><option value="18">20</option><option value="20">24</option><option value="24">28</option><option value="32">32</option></select></td><td class="help-field"></td></tr><tr id="symbols_font_effect_block"><td class="chk-field"></td><td class="label-field2">名称效果</td><td class="component-field"><input id="apply2_symbols_font_effect_weight" type="checkbox" style="display:none;" /><input id="symbols_font_effect_weight" type="hidden" /><input id="apply2_symbols_font_effect_italic" type="checkbox" style="display:none;" /><input id="symbols_font_effect_italic" type="hidden" /><input id="apply2_symbols_font_effect_stroke" type="checkbox" style="display:none;" /><input id="symbols_font_effect_stroke" type="hidden" /><input id="apply2_symbols_font_effect_stroke_color" type="checkbox" style="display:none;" /><input id="symbols_font_effect_stroke_color" type="hidden" /><input id="apply2_symbols_font_effect_border" type="checkbox" style="display:none;" /><input id="symbols_font_effect_border" type="hidden" /><input id="apply2_symbols_font_effect_border_color" type="checkbox" style="display:none;" /><input id="symbols_font_effect_border_color" type="hidden" /><input id="apply2_symbols_font_effect_border_fill_color" type="checkbox" style="display:none;" /><input id="symbols_font_effect_border_fill_color" type="hidden" /><input id="apply2_symbols_font_effect_border_radius" type="checkbox" style="display:none;" /><input id="symbols_font_effect_border_radius" type="hidden" /><input id="apply2_symbols_font_effect_opacity" type="checkbox" style="display:none;" /><input id="symbols_font_effect_opacity" type="hidden" /><input id="symbols_font_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr id="symbols_name_location_block"><td class="chk-field"><input id="apply2_symbols_name_location" type="checkbox" /></td><td class="label-field2">名称位置</td><td class="component-field">水平方向<select id="symbols_name_location_h" class="minipropsel"><option value="left">左侧</option><option value="center" selected="selected">中部</option><option value="right">右侧</option></select><br>垂直方向<select id="symbols_name_location_v" class="minipropsel"><option value="top">顶部</option><option value="middle">中部</option><option value="bottom" selected="selected">底部</option></select></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "multi_container.html": '<table id="property_panel_multi_container" class="property-panel-table"><tr id="containers_name_hidden_block"><td class="chk-field"><input id="apply2_containers_name_hidden" type="checkbox" /></td><td class="label-field2">名称隐藏</td><td class="component-field"><input id="containers_name_hidden" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="containers_name_reflash_block"><td class="chk-field"><input id="apply2_containers_name_reflash" type="checkbox" /></td><td class="label-field2">自动更新</td><td class="component-field"><input id="containers_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="containers_x_block"><td class="chk-field"><input id="apply2_containers_x" type="checkbox" /></td><td class="label-field2">横坐标</td><td class="component-field"><input id="containers_x" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="containers_y_block"><td class="chk-field"><input id="apply2_containers_y" type="checkbox" /></td><td class="label-field2">纵坐标</td><td class="component-field"><input id="containers_y" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="containers_icon_block"><td class="chk-field"><input id="apply2_containers_icon" type="checkbox" /></td><td class="label-field2">容器图标</td><td class="component-field"><input id="containers_icon" type="text" class="icon-picker proptext" /></td><td class="help-field"></td></tr><tr id="containers_icon_width_block"><td class="chk-field"><input id="apply2_containers_icon_width" type="checkbox" /></td><td class="label-field2">图标宽度</td><td class="component-field"><input id="containers_icon_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="containers_icon_height_block"><td class="chk-field"><input id="apply2_containers_icon_height" type="checkbox" /></td><td class="label-field2">图标高度</td><td class="component-field"><input id="containers_icon_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="containers_icon_opacity_block"><td class="chk-field"><input id="apply2_containers_icon_opacity" type="checkbox" /></td><td class="label-field2">图标透明度</td><td class="component-field"><table style="border: 0px;"><tr><td><div id="containers_icon_opacity" class="slider" /></td><td><div id="containers_icon_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="containers_icon_shadow_block"><td class="chk-field"><input id="apply2_containers_icon_shadow" type="checkbox" /></td><td class="label-field2">图标阴影</td><td class="component-field"><select id="containers_icon_shadow" class="propsel"><option value="null" selected="selected">不使用</option><option value="top_left">左上</option><option value="bottom_left">左下</option><option value="bottom_right">右下</option><option value="top_right">右上</option><option value="top">上</option><option value="left">左</option><option value="bottom">下</option><option value="right">右</option></select></td><td class="help-field"></td></tr><tr id="containers_font_family_block"><td class="chk-field"><input id="apply2_containers_font_family" type="checkbox" /></td><td class="label-field2">名称字体</td><td class="component-field"><select id="containers_font_family" class="propsel"><option value="SimSun" selected="selected">宋体</option><option value="SimHei">黑体</option><option value="KaiTi_GB2312">楷体</option><option value="LiSu">隶书*</option><option value="YouYuan">幼圆*</option><option value="COURIER">Courier*</option><option value="MODERN">Modern*</option></select></td><td class="help-field"></td></tr><tr id="containers_font_size_block"><td class="chk-field"><input id="apply2_containers_font_size" type="checkbox" /></td><td class="label-field2">名称字号</td><td class="component-field"><select id="containers_font_size" class="propsel"><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12" selected="selected">12</option><option value="14">14</option><option value="16">16</option><option value="18">20</option><option value="20">24</option><option value="24">28</option><option value="32">32</option></select></td><td class="help-field"></td></tr><tr id="containers_font_effect_block"><td class="chk-field"></td><td class="label-field2">名称效果</td><td class="component-field"><input id="apply2_containers_font_effect_weight" type="checkbox" style="display:none;" /><input id="containers_font_effect_weight" type="hidden" /><input id="apply2_containers_font_effect_italic" type="checkbox" style="display:none;" /><input id="containers_font_effect_italic" type="hidden" /><input id="apply2_containers_font_effect_stroke" type="checkbox" style="display:none;" /><input id="containers_font_effect_stroke" type="hidden" /><input id="apply2_containers_font_effect_stroke_color" type="checkbox" style="display:none;" /><input id="containers_font_effect_stroke_color" type="hidden" /><input id="apply2_containers_font_effect_border" type="checkbox" style="display:none;" /><input id="containers_font_effect_border" type="hidden" /><input id="apply2_containers_font_effect_border_color" type="checkbox" style="display:none;" /><input id="containers_font_effect_border_color" type="hidden" /><input id="apply2_containers_font_effect_border_fill_color" type="checkbox" style="display:none;" /><input id="containers_font_effect_border_fill_color" type="hidden" /><input id="apply2_containers_font_effect_border_radius" type="checkbox" style="display:none;" /><input id="containers_font_effect_border_radius" type="hidden" /><input id="apply2_containers_font_effect_opacity" type="checkbox" style="display:none;" /><input id="containers_font_effect_opacity" type="hidden" /><input id="containers_font_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr id="containers_name_location_block"><td class="chk-field"><input id="apply2_containers_name_location" type="checkbox" /></td><td class="label-field2">名称位置</td><td class="component-field">水平方向<select id="containers_name_location_h" class="minipropsel"><option value="left">左侧</option><option value="center" selected="selected">中部</option><option value="right">右侧</option></select><br>垂直方向<select id="containers_name_location_v" class="minipropsel"><option value="top">顶部</option><option value="middle">中部</option><option value="bottom" selected="selected">底部</option></select></td><td class="help-field"></td></tr><tr id="containers_expand_bgcolor_block"><td class="chk-field"><input id="apply2_containers_expand_bgcolor" type="checkbox" /></td><td class="label-field2">展开底色</td><td class="component-field"><input id="containers_expand_bgcolor" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="containers_expand_effect_block"><td class="chk-field"></td><td class="label-field2">展开效果</td><td class="component-field"><input id="apply2_containers_expand_effect_border" type="checkbox" style="display:none;" /><input id="containers_expand_effect_border" type="hidden" /><input id="apply2_containers_expand_effect_border_color" type="checkbox" style="display:none;" /><input id="containers_expand_effect_border_color" type="hidden" /><input id="apply2_containers_expand_effect_opacity" type="checkbox" style="display:none;" /><input id="containers_expand_effect_opacity" type="hidden" /><input id="containers_expand_effect" type="button" value="编辑..." class="expand-effect" /></td><td class="help-field"></td></tr><tr id="containers_expand_autoresize_block" style="display: none;"><td class="chk-field"><input id="apply2_containers_expand_autoresize" type="checkbox" /></td><td class="label-field2">尺寸自适应</td><td class="component-field"><input id="containers_expand_autoresize" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="containers_expand_width_block" style="display: none;"><td class="chk-field"><input id="apply2_containers_expand_width" type="checkbox" /></td><td class="label-field2">展开宽度</td><td class="component-field"><input id="containers_expand_width" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="containers_expand_height_block" style="display: none;"><td class="chk-field"><input id="apply2_containers_expand_height" type="checkbox" /></td><td class="label-field2">展开高度</td><td class="component-field"><input id="containers_expand_height" type="text" class="proptext" /></td><td class="help-field"></td></tr><tr id="containers_isexpand_block"><td class="chk-field"><input id="apply2_containers_isexpand" type="checkbox" /></td><td class="label-field2">默认展开</td><td class="component-field"><input id="containers_isexpand" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="containers_ispermit_block"><td class="chk-field"><input id="apply2_containers_ispermit" type="checkbox" /></td><td class="label-field2">允许开合</td><td class="component-field"><input id="containers_ispermit" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "multi_line.html": '<table id="property_panel_multi_line" class="property-panel-table"><tr id="lines_name_reflash_block"><td class="chk-field"><input id="apply2_lines_name_reflash" type="checkbox" /></td><td class="label-field2">自动更新</td><td class="component-field"><input id="lines_name_reflash" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="lines_dashed_block"><td class="chk-field"><input id="apply2_lines_dashed" type="checkbox" /></td><td class="label-field2">连线线型</td><td class="component-field"><input id="lines_dashed_val" type="hidden" /><img id="lines_dashed" class="dashed-picker" /></td><td class="help-field"></td></tr><tr id="lines_weight_block"><td class="chk-field"><input id="apply2_lines_weight" type="checkbox" /></td><td class="label-field2">连线粗细</td><td class="component-field"><select id="lines_weight" class="propsel"><option value="2" selected="selected">2</option><option value="4">4</option><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12">12</option></select></td><td class="help-field"></td></tr><tr id="lines_color_block"><td class="chk-field"><input id="apply2_lines_color" type="checkbox" /></td><td class="label-field2">连线颜色</td><td class="component-field"><input id="lines_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="lines_effect_block"><td class="chk-field"><input id="apply2_lines_effect" type="checkbox" /></td><td class="label-field2">连线效果</td><td class="component-field"><input id="lines_effect_border" type="hidden" /><input id="lines_effect_border_color" type="hidden" /><input id="lines_effect_opacity" type="hidden" /><input id="lines_effect" type="button" value="编辑..." class="apply_button" /></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> <a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "multi_event.html": '<table id="property_panel_events" class="property-panel-table"><tr id="events_render_block"><td class="chk-field"><input id="apply2_lines_name_reflash" type="checkbox" /></td><td class="label-field2">渲染方式</td><td class="component-field"><select id="events_render" class="propsel"><option value="matrix">颜色</option><option value="animation">动画</option></select></td><td class="help-field"></td></tr><tr id="events_tfr_status_block"><td class="chk-field"><input id="apply2_lines_name_reflash" type="checkbox" /></td><td class="label-field2">状态传递</td><td class="component-field"><select id="events_tfr_status" class="propsel"><option value="-5">忽略</option><option value="-3">降低三级</option><option value="-2">降低二级</option><option value="-1">降低一级</option><option value="0">不变</option><option value="1">增加一级</option><option value="2">增加二级</option><option value="3">增加三级</option></select></td><td class="help-field"></td></tr><tr id="events_tfr_min_block"><td class="chk-field"><input id="apply2_lines_name_reflash" type="checkbox" /></td><td class="label-field2">最小传递</td><td class="component-field"><select id="events_tfr_min" class="propsel"><option value="1">正常</option><option value="2">警告</option><option value="3">轻微</option><option value="4">主要</option><option value="5">严重</option><option value="6">不传递</option></select></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="应用" class="apply_button" /><input type="button" value="确定" class="apply_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "effect_label.html": '<table id="property_panel_label" class="property-panel-table"><tr id="label_weight_block"><td class="label-field">文字加粗</td><td class="component-field"><input id="label_weight" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="label_italic_block"><td class="label-field">文字倾斜</td><td class="component-field"><input id="label_italic" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="label_stroke_block"><td class="label-field">描边粗细</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="label_stroke" class="slider" /></td><td><div id="label_stroke_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="label_opacity_block"><td class="label-field">透明度</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="label_opacity" class="slider" /></td><td><div id="label_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="确定" class="apply_button" /><input type="button" value="重置" class="reset_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "effect_labels.html": '<table id="property_panel_labels" class="property-panel-table"><tr id="labels_weight_block"><td class="chk-field"><input id="apply2_labels_weight" type="checkbox" /></td><td class="label-field2">文字加粗</td><td class="component-field"><input id="labels_weight" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="labels_italic_block"><td class="chk-field"><input id="apply2_labels_italic" type="checkbox" /></td><td class="label-field2">文字倾斜</td><td class="component-field"><input id="labels_italic" type="checkbox" class="switch" /></td><td class="help-field"></td></tr><tr id="labels_stroke_block"><td class="chk-field"><input id="apply2_labels_stroke" type="checkbox" /></td><td class="label-field2">描边粗细</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="labels_stroke" class="slider" /></td><td><div id="labels_stroke_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="labels_stroke_color_block"><td class="chk-field"><input id="apply2_labels_stroke_color" type="checkbox" /></td><td class="label-field2">描边颜色</td><td class="component-field"><input id="labels_stroke_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="labels_opacity_block"><td class="chk-field"><input id="apply2_labels_opacity" type="checkbox" /></td><td class="label-field2">透明度</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="labels_opacity" class="slider" /></td><td><div id="labels_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"<a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="确定" class="apply_button" /><input type="button" value="重置" class="reset_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "effect_container_expand.html": '<table id="property_panel_container_expand" class="property-panel-table"><tr id="container_expand_border_block"><td class="label-field">边框粗细</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="container_expand_border" class="slider" /></td><td><div id="container_expand_border_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="container_expand_border_color_block"><td class="label-field">边框颜色</td><td class="component-field"><input id="container_expand_border_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="container_expand_opacity_block"><td class="label-field">透明度</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="container_expand_opacity" class="slider" /></td><td><div id="container_expand_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="确定" class="apply_button" /><input type="button" value="重置" class="reset_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "effect_containers_expand.html": '<table id="property_panel_containers_expand" class="property-panel-table"><tr id="containers_expand_border_block"><td class="chk-field"><input id="apply2_containers_expand_border" type="checkbox" /></td><td class="label-field">边框粗细</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="containers_expand_border" class="slider" /></td><td><div id="containers_expand_border_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="containers_expand_border_color_block"><td class="chk-field"><input id="apply2_containers_expand_border_color" type="checkbox" /></td><td class="label-field">边框颜色</td><td class="component-field"><input id="containers_expand_border_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="containers_expand_opacity_block"><td class="chk-field"><input id="apply2_containers_expand_opacity" type="checkbox" /></td><td class="label-field">透明度</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="containers_expand_opacity" class="slider" /></td><td><div id="containers_expand_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="确定" class="apply_button" /><input type="button" value="重置" class="reset_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "effect_line.html": '<table id="property_panel_line" class="property-panel-table"><tr id="line_border_block"><td class="label-field">边框粗细</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="line_border" class="slider" /></td><td><div id="line_border_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="line_border_color_block"><td class="label-field">边框颜色</td><td class="component-field"><input id="line_border_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="line_opacity_block"><td class="label-field">透明度</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="line_opacity" class="slider" /></td><td><div id="line_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate"></td><td class="operate" colspan="2"><input type="button" value="确定" class="apply_button" /><input type="button" value="重置" class="reset_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "effect_lines.html": '<table id="property_panel_lines" class="property-panel-table"><tr id="lines_border_block"><td class="chk-field"><input id="apply2_lines_border" type="checkbox" /></td><td class="label-field">边框粗细</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="lines_border" class="slider" /></td><td><div id="lines_border_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr id="lines_border_color_block"><td class="chk-field"><input id="apply2_lines_border_color" type="checkbox" /></td><td class="label-field">边框颜色</td><td class="component-field"><input id="lines_border_color" type="text" class="color-picker proptext" /></td><td class="help-field"></td></tr><tr id="lines_opacity_block"><td class="chk-field"><input id="apply2_lines_opacity" type="checkbox" /></td><td class="label-field">透明度</td><td class="component-field"><table style="border-collapse:collapse;"><tr><td><div id="lines_opacity" class="slider" /></td><td><div id="lines_opacity_val" class="slider-val" /></td></tr></table></td><td class="help-field"></td></tr><tr class="submit_block"><td class="operate-left" colspan="2"><a href="javascript:void(0);" class="check_all">全选</a> /<a href="javascript:void(0);" class="check_invert">反选</a></td><td class="operate" colspan="2"><input type="button" value="确定" class="apply_button" /><input type="button" value="重置" class="reset_button" /><input type="button" value="取消" class="cancel_button" /></td></tr></table>',
    "layout_force.html": '<table class="pair-table" id="forceLayout-setting"><tbody><tr><td class="label-field">连线长度</td><td class="value-field"><input type="text" id="forceLayout-linkDistance"></td></tr><tr><td class="label-field">间距斥力</td><td class="value-field"><input type="text" id="forceLayout-charge"></td></tr><tr class="submit_block"><td align="center" class="operate" style="padding-top: 20px;" colspan="3"><input id="forceLayout-friction" type="hidden"><input id="forceLayout-linkStrength" type="hidden"><input id="forceLayout-gravity" type="hidden"><input id="forceLayout-theta" type="hidden"><input id="forceLayout-submit" type="button" value="确定">&nbsp;&nbsp;<input id="forceLayout-reset" type="button" value="重置">&nbsp;&nbsp;<input id="forceLayout-cancel" type="button" value="取消"></td></tr></tbody></table>',
    "layout_tree.html": '<table class="pair-table" id="treeLayout-setting"><tbody><tr><td class="label-field">生长方向</td><td class="value-field" style="height: 25px;"><select id="treeLayout-orientation" class="propsel"><option value="0">由上向下</option><option value="1">由下向上</option><option value="2">由左向右</option><option value="3">由右向左</option></select></td></tr><tr><td class="label-field">层间距</td><td class="value-field"><input type="text" id="treeLayout-levelDistance"></td></tr><tr><td class="label-field">节点间距</td><td class="value-field"><input type="text" id="treeLayout-siblingDistance"></td></tr><tr><td class="label-field">子树间距</td><td class="value-field"><input type="text" id="treeLayout-subtreeDistance"></td></tr><tr class="submit_block"><td align="center" class="operate" style="padding-top: 20px;" colspan="3"><input id="treeLayout-submit" type="button" value="确定">&nbsp;&nbsp;<input id="treeLayout-reset" type="button" value="重置">&nbsp;&nbsp;<input id="treeLayout-cancel" type="button" value="取消"></td></tr></tbody></table>'
};